{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDNETC",
          "organization": "JetBrains, Inc",
          "fullName": "Qodana Community for .NET",
          "version": "2025.1.61.87",
          "semanticVersion": "251.0.20250604.2353",
          "informationUri": "http://www.jetbrains.com/resharper/features/command-line.html",
          "rules": [
            {
              "id": "AccessRightsInText",
              "shortDescription": {
                "text": "Cannot access symbol in text argument"
              },
              "fullDescription": {
                "text": "Cannot access symbol in text argument"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AccessToDisposedClosure",
              "shortDescription": {
                "text": "Access to disposed captured variable"
              },
              "fullDescription": {
                "text": "Access to captured variable from anonymous method when the variable is disposed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AccessToDisposedClosure.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AccessToDisposedClosure.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AccessToForEachVariableInClosure",
              "shortDescription": {
                "text": "Access to foreach variable in closure"
              },
              "fullDescription": {
                "text": "This code can have different behavior when compiled with different versions of compiler. See changes for 'foreach' loop in C# 5.0 and Visual Basic 11."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AccessToForEachVariableInClosure.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AccessToForEachVariableInClosure.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AccessToModifiedClosure",
              "shortDescription": {
                "text": "Access to modified captured variable"
              },
              "fullDescription": {
                "text": "Access to captured variable from anonymous method when the variable is modified externally"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AccessToModifiedClosure.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AccessToModifiedClosure.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AccessToStaticMemberViaDerivedType",
              "shortDescription": {
                "text": "Access to a static member of a type via a derived type"
              },
              "fullDescription": {
                "text": "Access to a static member of a type via a derived type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AccessToStaticMemberViaDerivedType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AccessToStaticMemberViaDerivedType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AddressOfMarshalByRefObject",
              "shortDescription": {
                "text": "Captured field reference of a marshal-by-reference class may cause a runtime exception"
              },
              "fullDescription": {
                "text": "Captured field reference of a marshal-by-reference class may cause a runtime exception"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AllUnderscoreLocalParameterName",
              "shortDescription": {
                "text": "Potentially misleading parameter name in lambda or local function"
              },
              "fullDescription": {
                "text": "A name that consists of the '_' characters can be misleading for parameters that have usages, because such names are typically reserved for unused parameters"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AllUnderscoreLocalParameterName.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AllUnderscoreLocalParameterName.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AngularHtml.Banana",
              "shortDescription": {
                "text": "'Banana in a box' [()] violation in Angular 2 binding"
              },
              "fullDescription": {
                "text": "Angular 2 requires parentheses inside brackets for two-direction bindings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Angular2HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AnnotateCanBeNullParameter",
              "shortDescription": {
                "text": "Declaration nullability inferred: Parameter is inferred to be nullable"
              },
              "fullDescription": {
                "text": "[EXPERIMENTAL] Parameter is inferred to be nullable: consider annotating it with [CanBeNull] or [ItemCanBeNull] attribute. This inspection sometimes produces unsound results."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AnnotateCanBeNullTypeMember",
              "shortDescription": {
                "text": "Declaration nullability inferred: Type member is inferred to be nullable"
              },
              "fullDescription": {
                "text": "Type member is inferred to be nullable: consider annotating it with [CanBeNull] or [ItemCanBeNull] attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AnnotateNotNullParameter",
              "shortDescription": {
                "text": "Declaration nullability inferred: Parameter is inferred to be not null"
              },
              "fullDescription": {
                "text": "Parameter is inferred always not to be null: consider annotating it with [NotNull] or [ItemNotNull] attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AnnotateNotNullTypeMember",
              "shortDescription": {
                "text": "Declaration nullability inferred: Type member is inferred to be not null"
              },
              "fullDescription": {
                "text": "Type member is inferred always not to be null: consider annotating it with [NotNull] or [ItemNotNull] attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AnnotationConflictInHierarchy",
              "shortDescription": {
                "text": "Annotation conflict in hierarchy"
              },
              "fullDescription": {
                "text": "There is base member that has conflicting nullness annotation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AnnotationRedundancyAtValueType",
              "shortDescription": {
                "text": "Nullability attribute usage with declaration of void or value type"
              },
              "fullDescription": {
                "text": "Nullability attribute usage with declaration of void or value type does not affect code analysis"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AnnotationRedundancyAtValueType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AnnotationRedundancyAtValueType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AnnotationRedundancyInHierarchy",
              "shortDescription": {
                "text": "Annotation duplicate in hierarchy"
              },
              "fullDescription": {
                "text": "There is base member that has the same nullness annotation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AppendToCollectionExpression",
              "shortDescription": {
                "text": "Append to collection expression"
              },
              "fullDescription": {
                "text": "Suggest to merge collection items additions into C# 12 collection expression syntax"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AppendToCollectionExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AppendToCollectionExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArgumentsStyleAnonymousFunction",
              "shortDescription": {
                "text": "Use preferred argument style for anonymous functions"
              },
              "fullDescription": {
                "text": "Prefer using named/positional argument when anonymous function (lambda or delegate) is passed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArgumentsStyleAnonymousFunction.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArgumentsStyleAnonymousFunction.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArgumentsStyleLiteral",
              "shortDescription": {
                "text": "Use preferred argument style for literal values"
              },
              "fullDescription": {
                "text": "Prefer using named/positional argument when boolean, numeric, 'byte', or 'char' literal value is passed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArgumentsStyleLiteral.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArgumentsStyleLiteral.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArgumentsStyleNamedExpression",
              "shortDescription": {
                "text": "Use preferred argument style for named expressions"
              },
              "fullDescription": {
                "text": "Prefer using named/positional argument for named expressions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArgumentsStyleNamedExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArgumentsStyleNamedExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArgumentsStyleOther",
              "shortDescription": {
                "text": "Use preferred argument style"
              },
              "fullDescription": {
                "text": "Prefer using named/positional argument for all expressions except literal, named and anonymous function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArgumentsStyleOther.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArgumentsStyleOther.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArgumentsStyleStringLiteral",
              "shortDescription": {
                "text": "Use preferred argument style for string literal values"
              },
              "fullDescription": {
                "text": "Prefer using named/positional argument when 'string' literal value is passed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArgumentsStyleStringLiteral.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArgumentsStyleStringLiteral.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeAccessorOwnerBody",
              "shortDescription": {
                "text": "Use preferred body style: Convert into property, indexer, or event with preferred body style"
              },
              "fullDescription": {
                "text": "Use expression or block body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeAccessorOwnerBody.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeAccessorOwnerBody.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeAttributes",
              "shortDescription": {
                "text": "Join or separate attributes in section"
              },
              "fullDescription": {
                "text": "Attributes have to be declared in separate sections or in a single sections"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeAttributes.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeAttributes.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeConstructorOrDestructorBody",
              "shortDescription": {
                "text": "Use preferred body style: Convert into constructor or destructor with preferred body style"
              },
              "fullDescription": {
                "text": "Use expression or block body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeConstructorOrDestructorBody.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeConstructorOrDestructorBody.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeDefaultValueWhenTypeEvident",
              "shortDescription": {
                "text": "Use preferred style of default value expression when type is evident"
              },
              "fullDescription": {
                "text": "Add or remove explicit type specification in default value expression when type is evident from the usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeDefaultValueWhenTypeEvident.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeDefaultValueWhenTypeEvident.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeDefaultValueWhenTypeNotEvident",
              "shortDescription": {
                "text": "Use preferred style of default value expression when type is not evident"
              },
              "fullDescription": {
                "text": "Add or remove explicit type specification in default value expression when type is not evident from the usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeDefaultValueWhenTypeNotEvident.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeDefaultValueWhenTypeNotEvident.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeLocalFunctionBody",
              "shortDescription": {
                "text": "Use preferred body style: Convert into local function with preferred body style"
              },
              "fullDescription": {
                "text": "Use expression or block body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeLocalFunctionBody.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeLocalFunctionBody.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeMethodOrOperatorBody",
              "shortDescription": {
                "text": "Use preferred body style: Convert into method or operator with preferred body style"
              },
              "fullDescription": {
                "text": "Use expression or block body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeMethodOrOperatorBody.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeMethodOrOperatorBody.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeMissingParentheses",
              "shortDescription": {
                "text": "Add parentheses to avoid non-obvious precedence"
              },
              "fullDescription": {
                "text": "Parentheses can be safely added to expressions to clarify precedence"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeMissingParentheses.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeMissingParentheses.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeModifiersOrder",
              "shortDescription": {
                "text": "Adjust modifiers declaration order"
              },
              "fullDescription": {
                "text": "The order of declaration modifiers does not match code style settings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeModifiersOrder.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeModifiersOrder.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeNamespaceBody",
              "shortDescription": {
                "text": "Use preferred namespace body style"
              },
              "fullDescription": {
                "text": "Use file-scoped or block-scoped namespace body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeNamespaceBody.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeNamespaceBody.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeNullCheckingPattern",
              "shortDescription": {
                "text": "Arrange null checking pattern"
              },
              "fullDescription": {
                "text": "Use preferred null checking pattern style (either 'not null' or '{ }')"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeNullCheckingPattern.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeNullCheckingPattern.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeObjectCreationWhenTypeEvident",
              "shortDescription": {
                "text": "Use preferred style of 'new' expression when created type is evident"
              },
              "fullDescription": {
                "text": "Add or remove explicit type specification in 'new' expression when type is evident from the usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeObjectCreationWhenTypeEvident.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeObjectCreationWhenTypeEvident.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeObjectCreationWhenTypeNotEvident",
              "shortDescription": {
                "text": "Use preferred style of 'new' expression when created type is not evident"
              },
              "fullDescription": {
                "text": "Add or remove explicit type specification in 'new' expression when type is not evident from the usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeObjectCreationWhenTypeNotEvident.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeObjectCreationWhenTypeNotEvident.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeRedundantParentheses",
              "shortDescription": {
                "text": "Remove redundant parentheses"
              },
              "fullDescription": {
                "text": "Parentheses can be safely removed from expressions without changing code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeRedundantParentheses.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeRedundantParentheses.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeStaticMemberQualifier",
              "shortDescription": {
                "text": "Add/remove qualifier for static members"
              },
              "fullDescription": {
                "text": "Qualifier can be safely added/removed without changing code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeStaticMemberQualifier.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeStaticMemberQualifier.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeThisQualifier",
              "shortDescription": {
                "text": "Add/remove 'this.' qualifier"
              },
              "fullDescription": {
                "text": "'this.' qualifier can be safely added/removed without changing code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeThisQualifier.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeThisQualifier.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeTrailingCommaInMultilineLists",
              "shortDescription": {
                "text": "Use preferred style for trailing comma before new line in multiline lists"
              },
              "fullDescription": {
                "text": "Add or remove trailing comma before new line in multiline lists according to code style settings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeTrailingCommaInMultilineLists.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeTrailingCommaInMultilineLists.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeTrailingCommaInSinglelineLists",
              "shortDescription": {
                "text": "Use preferred style for trailing comma when the last element is not followed by a new line"
              },
              "fullDescription": {
                "text": "Add or remove trailing comma when the last element is not followed by a new line according to code style settings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeTrailingCommaInSinglelineLists.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeTrailingCommaInSinglelineLists.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeTypeMemberModifiers",
              "shortDescription": {
                "text": "Use explicit or implicit modifier definition for type members"
              },
              "fullDescription": {
                "text": "'private' modifier can be safely added/removed from type members without changing code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeTypeMemberModifiers.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeTypeMemberModifiers.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeTypeModifiers",
              "shortDescription": {
                "text": "Use explicit or implicit modifier definition for types"
              },
              "fullDescription": {
                "text": "'internal' modifier can be safely added/removed from types without changing code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeTypeModifiers.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeTypeModifiers.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArrangeVarKeywordsInDeconstructingDeclaration",
              "shortDescription": {
                "text": "Join or separate 'var' in deconstruction declarations"
              },
              "fullDescription": {
                "text": "Use preferred code style to check joined/separate 'var' usages in deconstruction declarations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ArrangeVarKeywordsInDeconstructingDeclaration.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ArrangeVarKeywordsInDeconstructingDeclaration.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.ContentPlaceholderNotResolved",
              "shortDescription": {
                "text": "Unknown content placeholder"
              },
              "fullDescription": {
                "text": "Unknown content placeholder"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.CustomPageParserFilterType",
              "shortDescription": {
                "text": "Unsupported pageParserFilterType"
              },
              "fullDescription": {
                "text": "ReSharper does not support pageParserFilterType specified in web.config"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.DeadCode",
              "shortDescription": {
                "text": "ASP.NET Dead Code"
              },
              "fullDescription": {
                "text": "ASP.NET Dead Code"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/Asp.DeadCode.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/Asp.DeadCode.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.Entity",
              "shortDescription": {
                "text": "Unknown HTML entity"
              },
              "fullDescription": {
                "text": "Unknown HTML entity"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.Image",
              "shortDescription": {
                "text": "Wrong image size"
              },
              "fullDescription": {
                "text": "Wrong image size"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.InvalidControlType",
              "shortDescription": {
                "text": "Invalid control type"
              },
              "fullDescription": {
                "text": "Invalid control type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.NotResolved",
              "shortDescription": {
                "text": "Unknown symbol"
              },
              "fullDescription": {
                "text": "Unknown symbol in ASP.NET and related technologies"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.ResolveWarning",
              "shortDescription": {
                "text": "ASP.NET Resolve Warning"
              },
              "fullDescription": {
                "text": "ASP.NET Resolve Warning"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.SkinNotResolved",
              "shortDescription": {
                "text": "Unknown skin"
              },
              "fullDescription": {
                "text": "Unknown skin"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.TagAttributeWithOptionalValue",
              "shortDescription": {
                "text": "Attribute with optional value problem"
              },
              "fullDescription": {
                "text": "Attribute with optional value problem"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.ThemeNotResolved",
              "shortDescription": {
                "text": "Unknown theme"
              },
              "fullDescription": {
                "text": "Unknown theme"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asp.Warning",
              "shortDescription": {
                "text": "ASP.NET Warning"
              },
              "fullDescription": {
                "text": "ASP.NET Warning"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AspOdsMethodReferenceResolveError",
              "shortDescription": {
                "text": "Object data source method resolve problem"
              },
              "fullDescription": {
                "text": "Object data source method resolve problem"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AspUnusedRegisterDirectiveHighlighting",
              "shortDescription": {
                "text": "Unused register directive"
              },
              "fullDescription": {
                "text": "Register directive is unused and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AssignNullToNotNullAttribute",
              "shortDescription": {
                "text": "Possible 'null' assignment to non-nullable entity"
              },
              "fullDescription": {
                "text": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AssignNullToNotNullAttribute.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AssignNullToNotNullAttribute.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AssignmentInConditionalExpression",
              "shortDescription": {
                "text": "Assignment in conditional expression"
              },
              "fullDescription": {
                "text": "Assignment in conditional expression; did you mean to use '==' instead of '='?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AssignmentInConditionalExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AssignmentInConditionalExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AssignmentInsteadOfDiscard",
              "shortDescription": {
                "text": "Suspicious use of variable with discard-like name"
              },
              "fullDescription": {
                "text": "Reports expressions that look like discard patterns but actually assign a local variable with discard-like name '_'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AssignmentIsFullyDiscarded",
              "shortDescription": {
                "text": "Assignment results are fully discarded"
              },
              "fullDescription": {
                "text": "The values of deconstructing assignment are all discarded and cannot be used in any execution path"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Asxx.PathError",
              "shortDescription": {
                "text": "Path error"
              },
              "fullDescription": {
                "text": "Path error"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASXX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AsyncIteratorInvocationWithoutAwaitForeach",
              "shortDescription": {
                "text": "Async iterator invocation without 'await foreach'"
              },
              "fullDescription": {
                "text": "Because the result of asynchronous iterator call is not being iterated, execution of the current method continues before the call is completed. Consider using the 'await foreach' over the result of the call."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AsyncVoidLambda",
              "shortDescription": {
                "text": "Avoid using 'async' lambda when delegate type returns 'void'"
              },
              "fullDescription": {
                "text": "Check the usage of 'async' lambda expression: any exceptions unhandled by the lambda might lead to the process crash"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AsyncVoidLambda.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AsyncVoidLambda.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AsyncVoidMethod",
              "shortDescription": {
                "text": "Avoid using 'async' for methods and functions with the 'void' return type"
              },
              "fullDescription": {
                "text": "Prefer Task methods over methods returning 'void': any exceptions unhandled by the 'async void' method might lead to the process crash"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AutoPropertyCanBeMadeGetOnly.Global",
              "shortDescription": {
                "text": "Auto-property can be made get-only: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Auto-property has no write usages after initialization and can be made get-only"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AutoPropertyCanBeMadeGetOnly.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AutoPropertyCanBeMadeGetOnly.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "AutoPropertyCanBeMadeGetOnly.Local",
              "shortDescription": {
                "text": "Auto-property can be made get-only: Private accessibility"
              },
              "fullDescription": {
                "text": "Auto-property has no write usages after initialization and can be made get-only"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/AutoPropertyCanBeMadeGetOnly.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/AutoPropertyCanBeMadeGetOnly.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadAttributeBracketsSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around attributes"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around attributes"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadAttributeBracketsSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadAttributeBracketsSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadBracesSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around braces"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadBracesSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadBracesSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadChildStatementIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around child statement"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around child statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadChildStatementIndent.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadChildStatementIndent.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadColonSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around colon"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around colon"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadColonSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadColonSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadCommaSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around comma"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around comma"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadCommaSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadCommaSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadControlBracesIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around statement braces"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around statement braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadControlBracesIndent.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadControlBracesIndent.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadControlBracesLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around statement braces"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around statement braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadControlBracesLineBreaks.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadControlBracesLineBreaks.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadDeclarationBracesIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around declaration braces"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around declaration braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadDeclarationBracesIndent.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadDeclarationBracesIndent.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadDeclarationBracesLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around declaration braces"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around declaration braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadDeclarationBracesLineBreaks.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadDeclarationBracesLineBreaks.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadEmptyBracesLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around empty braces"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around empty braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadEmptyBracesLineBreaks.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadEmptyBracesLineBreaks.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadExpressionBracesIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around expression braces"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around expression braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadExpressionBracesIndent.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadExpressionBracesIndent.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadExpressionBracesLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around expression braces"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around expression braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadExpressionBracesLineBreaks.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadExpressionBracesLineBreaks.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadGenericBracketsSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around generic brackets"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around generic brackets"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadGenericBracketsSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadGenericBracketsSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadIndent",
              "shortDescription": {
                "text": "Incorrect indent: Redundant indent/outdent elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect indent: Redundant indent/outdent elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadIndent.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadIndent.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadLinqLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around LINQ queries"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around LINQ queries"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadLinqLineBreaks.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadLinqLineBreaks.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadListLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around comma in lists"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around comma in lists"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadListLineBreaks.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadListLineBreaks.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadMemberAccessSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around member access symbols"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around member access symbols"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadMemberAccessSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadMemberAccessSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadNamespaceBracesIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around namespace braces"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around namespace braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadNamespaceBracesIndent.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadNamespaceBracesIndent.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadParensLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around parenthesis"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around parenthesis"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadParensLineBreaks.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadParensLineBreaks.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadParensSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around parenthesis"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around parenthesis"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadParensSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadParensSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadPreprocessorIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around preprocessor directive"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around preprocessor directive"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadPreprocessorIndent.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadPreprocessorIndent.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadSemicolonSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around semicolon"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around semicolon"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadSemicolonSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadSemicolonSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadSpacesAfterKeyword",
              "shortDescription": {
                "text": "Incorrect spacing: Between keyword and parenthesis"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Between keyword and parenthesis"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadSpacesAfterKeyword.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadSpacesAfterKeyword.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadSquareBracketsSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around square brackets within a statement"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around square brackets within a statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadSquareBracketsSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadSquareBracketsSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadSwitchBracesIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around switch statement"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around switch statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadSwitchBracesIndent.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadSwitchBracesIndent.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BadSymbolSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around operator symbols"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around operator symbols"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BadSymbolSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BadSymbolSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BaseMemberHasParams",
              "shortDescription": {
                "text": "Base member has 'params' parameter, but the overrider does not have it"
              },
              "fullDescription": {
                "text": "Base member has 'params' parameter, but the overrider does not have it"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BaseMethodCallWithDefaultParameter",
              "shortDescription": {
                "text": "Call to base member with implicit default parameters"
              },
              "fullDescription": {
                "text": "Call to base member with implicit default parameters"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BaseObjectEqualsIsObjectEquals",
              "shortDescription": {
                "text": "Call to 'base.Equals(...)' is reference equality"
              },
              "fullDescription": {
                "text": "Call to base 'Equals(...)' method is resolved to 'Object.Equals', which is reference equality"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BaseObjectGetHashCodeCallInGetHashCode",
              "shortDescription": {
                "text": "Overridden GetHashCode calls base 'Object.GetHashCode()'"
              },
              "fullDescription": {
                "text": "Overridden GetHashCode calls base 'Object.GetHashCode()'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BaseObjectGetHashCodeCallInGetHashCode.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BaseObjectGetHashCodeCallInGetHashCode.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BitwiseOperatorOnEnumWithoutFlags",
              "shortDescription": {
                "text": "Bitwise operation on enum that is not marked by the [Flags] attribute"
              },
              "fullDescription": {
                "text": "Bitwise operation on enum that is not marked by the [Flags] attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BitwiseOperatorOnEnumWithoutFlags.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BitwiseOperatorOnEnumWithoutFlags.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Blazor.EditorRequired",
              "shortDescription": {
                "text": "Missed value for required attribute"
              },
              "fullDescription": {
                "text": "Missed value for required attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Blazor.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BuiltInTypeReferenceStyle",
              "shortDescription": {
                "text": "Replace built-in type reference with a CLR type name or a keyword"
              },
              "fullDescription": {
                "text": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BuiltInTypeReferenceStyle.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BuiltInTypeReferenceStyle.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "BuiltInTypeReferenceStyleForMemberAccess",
              "shortDescription": {
                "text": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions"
              },
              "fullDescription": {
                "text": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/BuiltInTypeReferenceStyleForMemberAccess.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/BuiltInTypeReferenceStyleForMemberAccess.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ByRefArgumentIsVolatileField",
              "shortDescription": {
                "text": "Captured reference to 'volatile' field will not be treated as 'volatile'"
              },
              "fullDescription": {
                "text": "Captured reference to 'volatile' field will not be treated as 'volatile'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CDeclarationWithImplicitIntType",
              "shortDescription": {
                "text": "Type-specifier missing, defaults to int"
              },
              "fullDescription": {
                "text": "No type-specifier found in a declaration. Defaults to 'int'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpBuildCSInvalidModuleName",
              "shortDescription": {
                "text": "Module with this name does not exist"
              },
              "fullDescription": {
                "text": "Module with this name does not exist"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.Unreal Build System"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpMissingPluginDependency",
              "shortDescription": {
                "text": "Dependency for the plugin is missing in the project file"
              },
              "fullDescription": {
                "text": "Dependency for the plugin is missing in the project file"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.Unreal Build System"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CA2252",
              "shortDescription": {
                "text": "Opt in to preview features before using them."
              },
              "fullDescription": {
                "text": "Opt in to preview features before using them."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2252",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2252"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CA2254",
              "shortDescription": {
                "text": "Template should be a static expression"
              },
              "fullDescription": {
                "text": "Template should be a static expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0078",
              "shortDescription": {
                "text": "The 'l' suffix is easily confused with the digit '1'"
              },
              "fullDescription": {
                "text": "The 'l' suffix is easily confused with the digit '1'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/s74dtt7k.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/s74dtt7k.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0108,CS0114",
              "shortDescription": {
                "text": "Keyword 'new' is required"
              },
              "fullDescription": {
                "text": "Keyword 'new' is required"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CSharpWarnings_CS0108_CS0114.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CSharpWarnings_CS0108_CS0114.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0109",
              "shortDescription": {
                "text": "Keyword 'new' is redundant"
              },
              "fullDescription": {
                "text": "Keyword 'new' is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/css4y2c4.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/css4y2c4.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0162",
              "shortDescription": {
                "text": "Code is unreachable"
              },
              "fullDescription": {
                "text": "Code is unreachable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/c0h4st1x.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/c0h4st1x.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0183",
              "shortDescription": {
                "text": "Given expression is always of the provided type"
              },
              "fullDescription": {
                "text": "Given expression is always of the provided type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/sb7782xb.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/sb7782xb.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0184",
              "shortDescription": {
                "text": "Given expression is never of the provided type"
              },
              "fullDescription": {
                "text": "Given expression is never of the provided type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/230kb9yt.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/230kb9yt.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0197",
              "shortDescription": {
                "text": "Taking address of marshal-by-reference class field"
              },
              "fullDescription": {
                "text": "Taking address of marshal-by-reference class field"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/y545659k.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/y545659k.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0252,CS0253",
              "shortDescription": {
                "text": "Possible unintended reference comparison"
              },
              "fullDescription": {
                "text": "Possible unintended reference comparison"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CSharpWarnings_CS0252_CS0253.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CSharpWarnings_CS0252_CS0253.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0282",
              "shortDescription": {
                "text": "There is no defined ordering between fields in multiple declarations of partial struct. To specify an ordering, all instance fields must be in the same declaration."
              },
              "fullDescription": {
                "text": "There is no defined ordering between fields in multiple declarations of partial struct. To specify an ordering, all instance fields must be in the same declaration."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0282",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0282"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0420",
              "shortDescription": {
                "text": "Reference to a volatile field will not be treated as volatile"
              },
              "fullDescription": {
                "text": "Reference to a volatile field will not be treated as volatile"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/4bw5ewxy.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/4bw5ewxy.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0458",
              "shortDescription": {
                "text": "The result of the expression is always 'null' of nullable type"
              },
              "fullDescription": {
                "text": "The result of the expression is always 'null' of nullable type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0458",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0458"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0464",
              "shortDescription": {
                "text": "Comparing with null of nullable value type always produces 'false'"
              },
              "fullDescription": {
                "text": "Comparing with null of nullable value type always produces 'false'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0464",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0464"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0465",
              "shortDescription": {
                "text": "Introducing a 'Finalize' method can interfere with destructor invocation"
              },
              "fullDescription": {
                "text": "Introducing a 'Finalize' method can interfere with destructor invocation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/02wtfwbt.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/02wtfwbt.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0469",
              "shortDescription": {
                "text": "'goto case' value is not implicitly convertible to required type"
              },
              "fullDescription": {
                "text": "'goto case' value is not implicitly convertible to required type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/ms228370.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/ms228370.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0472",
              "shortDescription": {
                "text": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'"
              },
              "fullDescription": {
                "text": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0472",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0472"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0612",
              "shortDescription": {
                "text": "Use of obsolete symbol (without message)"
              },
              "fullDescription": {
                "text": "Use of obsolete symbol (without message)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/h0h063ka.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/h0h063ka.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0618",
              "shortDescription": {
                "text": "Use of obsolete symbol"
              },
              "fullDescription": {
                "text": "Use of obsolete symbol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/x5ye6x1e.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/x5ye6x1e.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0628",
              "shortDescription": {
                "text": "Declaring new protected member in sealed class is the same as declaring it as private"
              },
              "fullDescription": {
                "text": "Declaring new protected member in sealed class is the same as declaring it as private"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/7x8ekes3.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/7x8ekes3.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0642",
              "shortDescription": {
                "text": "Possible mistaken empty statement"
              },
              "fullDescription": {
                "text": "Possible mistaken empty statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/9x19t380.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/9x19t380.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0652",
              "shortDescription": {
                "text": "Comparison to integral constant is useless; the constant is outside the range of type 'type'."
              },
              "fullDescription": {
                "text": "Comparison to integral constant is useless; the constant is outside the range of type 'type'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0652",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0652"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0657",
              "shortDescription": {
                "text": "'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored"
              },
              "fullDescription": {
                "text": "'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/c6hdfbk4.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/c6hdfbk4.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0658",
              "shortDescription": {
                "text": "'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored"
              },
              "fullDescription": {
                "text": "'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/4ky08ezz.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/4ky08ezz.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0659",
              "shortDescription": {
                "text": "Class overrides Object.Equals(object o) but not Object.GetHashCode()"
              },
              "fullDescription": {
                "text": "Class overrides Object.Equals(object o) but not Object.GetHashCode()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/xxhbfytk.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/xxhbfytk.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0660,CS0661",
              "shortDescription": {
                "text": "Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overridden"
              },
              "fullDescription": {
                "text": "Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overridden"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CSharpWarnings_CS0660_CS0661.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CSharpWarnings_CS0660_CS0661.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0665",
              "shortDescription": {
                "text": "Assignment in conditional expression"
              },
              "fullDescription": {
                "text": "Assignment in conditional expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/c1sde1ax.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/c1sde1ax.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0672",
              "shortDescription": {
                "text": "Member overrides obsolete member"
              },
              "fullDescription": {
                "text": "Member overrides obsolete member"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/9dzeyth8.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/9dzeyth8.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0675",
              "shortDescription": {
                "text": "Bitwise-or operator used on a sign-extended operand."
              },
              "fullDescription": {
                "text": "Bitwise-or operator used on a sign-extended operand."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0675",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0675"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0693",
              "shortDescription": {
                "text": "Type parameter has the same name as a type parameter from the outer type"
              },
              "fullDescription": {
                "text": "Type parameter has the same name as a type parameter from the outer type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/0ah54ze5.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/0ah54ze5.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0728",
              "shortDescription": {
                "text": "Possibly incorrect assignment to local which is the argument to a 'using' or 'lock' statement"
              },
              "fullDescription": {
                "text": "Possibly incorrect assignment to local which is the argument to a 'using' or 'lock' statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0728",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0728"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS0809",
              "shortDescription": {
                "text": "Obsolete member overrides non-obsolete member"
              },
              "fullDescription": {
                "text": "Obsolete member overrides non-obsolete member"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1030",
              "shortDescription": {
                "text": "'#warning' directive"
              },
              "fullDescription": {
                "text": "'#warning' directive"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/ckcykyd4.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/ckcykyd4.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1058",
              "shortDescription": {
                "text": "A previous catch clause already catches all exceptions"
              },
              "fullDescription": {
                "text": "A previous catch clause already catches all exceptions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/ms228623.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/ms228623.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1066",
              "shortDescription": {
                "text": "Default value specified for parameter will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
              },
              "fullDescription": {
                "text": "Default value specified for parameter will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1522",
              "shortDescription": {
                "text": "Empty switch block"
              },
              "fullDescription": {
                "text": "Empty switch block"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/x68b4s45.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/x68b4s45.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1570",
              "shortDescription": {
                "text": "Invalid XML in XML comment"
              },
              "fullDescription": {
                "text": "Invalid XML in XML comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/c20zzdxx.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/c20zzdxx.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1571",
              "shortDescription": {
                "text": "Duplicate param tag in XML comment"
              },
              "fullDescription": {
                "text": "Duplicate param tag in XML comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/a5c6cbk0.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/a5c6cbk0.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1572",
              "shortDescription": {
                "text": "XML comment has a 'param' tag for 'Parameter', but there is no parameter by that name"
              },
              "fullDescription": {
                "text": "XML comment has a 'param' tag for 'Parameter', but there is no parameter by that name"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1573",
              "shortDescription": {
                "text": "Parameter has no matching param tag in the XML comment"
              },
              "fullDescription": {
                "text": "Parameter has no matching param tag in the XML comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/01248w2b.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/01248w2b.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1574",
              "shortDescription": {
                "text": "Ambiguous reference in XML comment"
              },
              "fullDescription": {
                "text": "Ambiguous reference in XML comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/26x4hk2a.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/26x4hk2a.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1574,CS1584,CS1581,CS1580",
              "shortDescription": {
                "text": "Cannot resolve reference in XML comment"
              },
              "fullDescription": {
                "text": "Cannot resolve reference in XML comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CSharpWarnings_CS1574_CS1584_CS1581_CS1580.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CSharpWarnings_CS1574_CS1584_CS1581_CS1580.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1580",
              "shortDescription": {
                "text": "Incorrect signature in XML comment"
              },
              "fullDescription": {
                "text": "Incorrect signature in XML comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/03t96cfx.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/03t96cfx.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1584",
              "shortDescription": {
                "text": "Syntax error in XML comment"
              },
              "fullDescription": {
                "text": "Syntax error in XML comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/hz13h4se.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/hz13h4se.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1587",
              "shortDescription": {
                "text": "XML comment is not placed on a valid language element"
              },
              "fullDescription": {
                "text": "XML comment is not placed on a valid language element"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/d3x6ez1z.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/d3x6ez1z.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1589",
              "shortDescription": {
                "text": "Unable to include XML fragment"
              },
              "fullDescription": {
                "text": "Unable to include XML fragment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/3y857kz5.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/3y857kz5.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1590",
              "shortDescription": {
                "text": "Invalid XML include element"
              },
              "fullDescription": {
                "text": "Invalid XML include element"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/549c3y6s.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/549c3y6s.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1591",
              "shortDescription": {
                "text": "Missing XML comment for publicly visible type or member"
              },
              "fullDescription": {
                "text": "Compiler only produces XML documentation related warnings when 'XML Documentation' output generation option is enabled in project configuration settings (Project | Properties)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/zk18c1w9.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/zk18c1w9.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1592",
              "shortDescription": {
                "text": "Badly formed XML in included comments file"
              },
              "fullDescription": {
                "text": "Badly formed XML in included comments file"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/89c331t3.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/89c331t3.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1687",
              "shortDescription": {
                "text": "Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect"
              },
              "fullDescription": {
                "text": "Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs1687",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs1687"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1710",
              "shortDescription": {
                "text": "Duplicate typeparam tag in XML comment"
              },
              "fullDescription": {
                "text": "Duplicate typeparam tag in XML comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/k5ya7w1x.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/k5ya7w1x.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1711",
              "shortDescription": {
                "text": "XML comment has a 'typeparam' tag for 'TypeParameter', but there is no type parameter by that name"
              },
              "fullDescription": {
                "text": "XML comment has a 'typeparam' tag for 'TypeParameter', but there is no type parameter by that name"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs1711",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs1711"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1712",
              "shortDescription": {
                "text": "Type parameter has no matching typeparam tag in the XML comment"
              },
              "fullDescription": {
                "text": "Type parameter has no matching typeparam tag in the XML comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/t8zca749.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/t8zca749.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1717",
              "shortDescription": {
                "text": "Assignment made to same variable"
              },
              "fullDescription": {
                "text": "Assignment made to same variable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/a1kzfw0z.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/a1kzfw0z.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1723",
              "shortDescription": {
                "text": "XML comment has cref attribute that refers to a type parameter"
              },
              "fullDescription": {
                "text": "XML comment has cref attribute that refers to a type parameter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/ms228603.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/ms228603.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1911",
              "shortDescription": {
                "text": "Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable code"
              },
              "fullDescription": {
                "text": "Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable code"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/ms228459.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/ms228459.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1957",
              "shortDescription": {
                "text": "Multiple override candidates at run-time"
              },
              "fullDescription": {
                "text": "Multiple override candidates at run-time"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/bb882562.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/bb882562.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1981",
              "shortDescription": {
                "text": "Using 'is' to test compatibility with 'dynamic' is essentially identical to testing compatibility with 'Object' and will succeed for all non-null values"
              },
              "fullDescription": {
                "text": "Using 'is' to test compatibility with 'dynamic' is essentially identical to testing compatibility with 'Object' and will succeed for all non-null values"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS1998",
              "shortDescription": {
                "text": "Async function without await expression"
              },
              "fullDescription": {
                "text": "Async function without await expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS4014",
              "shortDescription": {
                "text": "Async method invocation without await expression"
              },
              "fullDescription": {
                "text": "Async method invocation without await expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/hh873131.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/hh873131.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS4024",
              "shortDescription": {
                "text": "The CallerLineNumberAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
              },
              "fullDescription": {
                "text": "The CallerLineNumberAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS4025",
              "shortDescription": {
                "text": "The CallerFilePathAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
              },
              "fullDescription": {
                "text": "The CallerFilePathAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS4026",
              "shortDescription": {
                "text": "The CallerMemberNameAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
              },
              "fullDescription": {
                "text": "The CallerMemberNameAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS7022",
              "shortDescription": {
                "text": "The 'Main' method will not be used as an entry point because compilation unit with top-level statements was found."
              },
              "fullDescription": {
                "text": "The 'Main' method will not be used as an entry point because compilation unit with top-level statements was found."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS7023",
              "shortDescription": {
                "text": "Static type in 'is' or 'as' operator."
              },
              "fullDescription": {
                "text": "Static type in 'is' or 'as' operator."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/warning-waves#cs7023---a-static-type-is-used-in-an-is-or-as-expression",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/warning-waves#cs7023---a-static-type-is-used-in-an-is-or-as-expression"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS7080",
              "shortDescription": {
                "text": "The CallerMemberNameAttribute will have no effect; it is overridden by the CallerFilePathAttribute"
              },
              "fullDescription": {
                "text": "The CallerMemberNameAttribute will have no effect; it is overridden by the CallerFilePathAttribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS7081",
              "shortDescription": {
                "text": "The CallerMemberNameAttribute will have no effect; it is overridden by the CallerLineNumberAttribute"
              },
              "fullDescription": {
                "text": "The CallerMemberNameAttribute will have no effect; it is overridden by the CallerLineNumberAttribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS7082",
              "shortDescription": {
                "text": "The CallerFilePathAttribute  will have no effect; it is overridden by the CallerLineNumberAttribute"
              },
              "fullDescription": {
                "text": "The CallerFilePathAttribute  will have no effect; it is overridden by the CallerLineNumberAttribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS7095",
              "shortDescription": {
                "text": "Filter expression is a constant, consider removing the filter"
              },
              "fullDescription": {
                "text": "Filter expression is a constant, consider removing the filter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8073",
              "shortDescription": {
                "text": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'"
              },
              "fullDescription": {
                "text": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/warning-waves#cs8073---the-result-of-the-expression-is-always-false-or-true",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/warning-waves#cs8073---the-result-of-the-expression-is-always-false-or-true"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8094",
              "shortDescription": {
                "text": "Alignment value 'value' has a magnitude greater than 'magnitude limit' and may result in a large formatted string."
              },
              "fullDescription": {
                "text": "Alignment value 'value' has a magnitude greater than 'magnitude limit' and may result in a large formatted string."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8123",
              "shortDescription": {
                "text": "The tuple element name is ignored because a different name or no name is specified by the target type."
              },
              "fullDescription": {
                "text": "The tuple element name is ignored because a different name or no name is specified by the target type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8305",
              "shortDescription": {
                "text": "Type is for evaluation purposes only and is subject to change or removal in future updates."
              },
              "fullDescription": {
                "text": "Type is for evaluation purposes only and is subject to change or removal in future updates."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8383",
              "shortDescription": {
                "text": "The tuple element name is ignored because a different name or no name is specified on the other side of the tuple == or != operator."
              },
              "fullDescription": {
                "text": "The tuple element name is ignored because a different name or no name is specified on the other side of the tuple == or != operator."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8424",
              "shortDescription": {
                "text": "The 'EnumeratorCancellation' attribute is only effective on a parameter of type 'CancellationToken' in an async-iterator method returning 'IAsyncEnumerable<>'."
              },
              "fullDescription": {
                "text": "The 'EnumeratorCancellation' attribute is only effective on a parameter of type 'CancellationToken' in an async-iterator method returning 'IAsyncEnumerable<>'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8425",
              "shortDescription": {
                "text": "Async-iterator has one or more parameters of type 'CancellationToken' but none of them is annotated with the 'EnumeratorCancellation' attribute."
              },
              "fullDescription": {
                "text": "Async-iterator has one or more parameters of type 'CancellationToken' but none of them is annotated with the 'EnumeratorCancellation' attribute."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8500",
              "shortDescription": {
                "text": "This takes the address of, gets the size of, or declares a pointer to a managed type."
              },
              "fullDescription": {
                "text": "This takes the address of, gets the size of, or declares a pointer to a managed type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8509",
              "shortDescription": {
                "text": "The switch expression does not handle all possible inputs (it is not exhaustive)."
              },
              "fullDescription": {
                "text": "The switch expression does not handle all possible inputs (it is not exhaustive)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/pattern-matching-warnings",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/pattern-matching-warnings"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8519",
              "shortDescription": {
                "text": "The given expression never matches the provided pattern."
              },
              "fullDescription": {
                "text": "The given expression never matches the provided pattern."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8520",
              "shortDescription": {
                "text": "The given expression always matches the provided constant."
              },
              "fullDescription": {
                "text": "The given expression always matches the provided constant."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8524",
              "shortDescription": {
                "text": "The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value."
              },
              "fullDescription": {
                "text": "The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8597",
              "shortDescription": {
                "text": "Thrown value may be null."
              },
              "fullDescription": {
                "text": "Thrown value may be null."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8600",
              "shortDescription": {
                "text": "Converting null literal or possible null value to non-nullable type."
              },
              "fullDescription": {
                "text": "Converting null literal or possible null value to non-nullable type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8601",
              "shortDescription": {
                "text": "Possible null reference assignment."
              },
              "fullDescription": {
                "text": "Possible null reference assignment."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8602",
              "shortDescription": {
                "text": "Dereference of a possibly null reference."
              },
              "fullDescription": {
                "text": "Dereference of a possibly null reference."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-dereference-of-null",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-dereference-of-null"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8603",
              "shortDescription": {
                "text": "Possible null reference return."
              },
              "fullDescription": {
                "text": "Possible null reference return."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8604",
              "shortDescription": {
                "text": "Possible null reference argument for a parameter."
              },
              "fullDescription": {
                "text": "Possible null reference argument for a parameter."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8605",
              "shortDescription": {
                "text": "Unboxing a possibly null value."
              },
              "fullDescription": {
                "text": "Unboxing a possibly null value."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8607",
              "shortDescription": {
                "text": "A possible null value may not be used for a type marked with [NotNull] or [DisallowNull]."
              },
              "fullDescription": {
                "text": "A possible null value may not be used for a type marked with [NotNull] or [DisallowNull]."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8608",
              "shortDescription": {
                "text": "Nullability of reference types in type doesn't match overridden member."
              },
              "fullDescription": {
                "text": "Nullability of reference types in type doesn't match overridden member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8609",
              "shortDescription": {
                "text": "Nullability of reference types in return type doesn't match overridden member."
              },
              "fullDescription": {
                "text": "Nullability of reference types in return type doesn't match overridden member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8610",
              "shortDescription": {
                "text": "Nullability of reference types in type of parameter doesn't match overridden member."
              },
              "fullDescription": {
                "text": "Nullability of reference types in type of parameter doesn't match overridden member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8611",
              "shortDescription": {
                "text": "Nullability of reference types in type of parameter doesn't match partial member declaration."
              },
              "fullDescription": {
                "text": "Nullability of reference types in type of parameter doesn't match partial member declaration."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8612",
              "shortDescription": {
                "text": "Nullability of reference types in type doesn't match implicitly implemented member."
              },
              "fullDescription": {
                "text": "Nullability of reference types in type doesn't match implicitly implemented member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8613",
              "shortDescription": {
                "text": "Nullability of reference types in return type doesn't match implicitly implemented member."
              },
              "fullDescription": {
                "text": "Nullability of reference types in return type doesn't match implicitly implemented member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8614",
              "shortDescription": {
                "text": "Nullability of reference types in type of parameter doesn't match implicitly implemented member."
              },
              "fullDescription": {
                "text": "Nullability of reference types in type of parameter doesn't match implicitly implemented member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8615",
              "shortDescription": {
                "text": "Nullability of reference types in type doesn't match implemented member."
              },
              "fullDescription": {
                "text": "Nullability of reference types in type doesn't match implemented member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8616",
              "shortDescription": {
                "text": "Nullability of reference types in return type doesn't match implemented member."
              },
              "fullDescription": {
                "text": "Nullability of reference types in return type doesn't match implemented member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8617",
              "shortDescription": {
                "text": "Nullability of reference types in type of parameter doesn't match implemented member."
              },
              "fullDescription": {
                "text": "Nullability of reference types in type of parameter doesn't match implemented member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8618",
              "shortDescription": {
                "text": "Non-nullable member is uninitialized."
              },
              "fullDescription": {
                "text": "Non-nullable member is uninitialized."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#nonnullable-reference-not-initialized",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#nonnullable-reference-not-initialized"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8619",
              "shortDescription": {
                "text": "Nullability of reference types in source type doesn't match target type."
              },
              "fullDescription": {
                "text": "Nullability of reference types in source type doesn't match target type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8620",
              "shortDescription": {
                "text": "Argument cannot be used for corresponding parameter due to differences in the nullability of reference types."
              },
              "fullDescription": {
                "text": "Argument cannot be used for corresponding parameter due to differences in the nullability of reference types."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8621",
              "shortDescription": {
                "text": "Nullability of reference types in return type doesn't match the target delegate (possibly because of nullability attributes)."
              },
              "fullDescription": {
                "text": "Nullability of reference types in return type doesn't match the target delegate (possibly because of nullability attributes)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8622",
              "shortDescription": {
                "text": "Nullability of reference types in type of a parameter doesn't match the target delegate (possibly because of nullability attributes)."
              },
              "fullDescription": {
                "text": "Nullability of reference types in type of a parameter doesn't match the target delegate (possibly because of nullability attributes)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8624",
              "shortDescription": {
                "text": "Argument cannot be used as an output for parameter due to differences in the nullability of reference types."
              },
              "fullDescription": {
                "text": "Argument cannot be used as an output for parameter due to differences in the nullability of reference types."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8625",
              "shortDescription": {
                "text": "Cannot convert null literal to non-nullable reference type."
              },
              "fullDescription": {
                "text": "Cannot convert null literal to non-nullable reference type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8629",
              "shortDescription": {
                "text": "Nullable value type may be null."
              },
              "fullDescription": {
                "text": "Nullable value type may be null."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-null-assigned-to-a-nonnullable-reference"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8631",
              "shortDescription": {
                "text": "Nullability of type argument doesn't match constraint type."
              },
              "fullDescription": {
                "text": "Nullability of type argument doesn't match constraint type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8632",
              "shortDescription": {
                "text": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context."
              },
              "fullDescription": {
                "text": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8633",
              "shortDescription": {
                "text": "Nullability mismatch in constraints for type parameter."
              },
              "fullDescription": {
                "text": "Nullability mismatch in constraints for type parameter."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8634",
              "shortDescription": {
                "text": "Nullability of type argument doesn't match 'class' constraint."
              },
              "fullDescription": {
                "text": "Nullability of type argument doesn't match 'class' constraint."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8643",
              "shortDescription": {
                "text": "Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type."
              },
              "fullDescription": {
                "text": "Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8644",
              "shortDescription": {
                "text": "Nullability of reference types in interface implemented by the base type doesn't match."
              },
              "fullDescription": {
                "text": "Nullability of reference types in interface implemented by the base type doesn't match."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8645",
              "shortDescription": {
                "text": "Type is already listed in the interface list with different nullability of reference types."
              },
              "fullDescription": {
                "text": "Type is already listed in the interface list with different nullability of reference types."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8655",
              "shortDescription": {
                "text": "The switch expression does not handle some null inputs (it is not exhaustive)."
              },
              "fullDescription": {
                "text": "The switch expression does not handle some null inputs (it is not exhaustive)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#exhaustive-switch-expression",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#exhaustive-switch-expression"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8656",
              "shortDescription": {
                "text": "Call to a non-readonly member from a 'readonly' member results in an implicit copy of 'this'"
              },
              "fullDescription": {
                "text": "Call to a non-readonly member from a 'readonly' member results in an implicit copy of 'this'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8667",
              "shortDescription": {
                "text": "Partial method declarations have inconsistent nullability for type parameter."
              },
              "fullDescription": {
                "text": "Partial method declarations have inconsistent nullability for type parameter."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8669",
              "shortDescription": {
                "text": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source."
              },
              "fullDescription": {
                "text": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8670",
              "shortDescription": {
                "text": "Object or collection initializer implicitly dereferences possibly null member."
              },
              "fullDescription": {
                "text": "Object or collection initializer implicitly dereferences possibly null member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-dereference-of-null",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#possible-dereference-of-null"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8714",
              "shortDescription": {
                "text": "Nullability of type argument doesn't match 'notnull' constraint."
              },
              "fullDescription": {
                "text": "Nullability of type argument doesn't match 'notnull' constraint."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8762",
              "shortDescription": {
                "text": "Parameter must conditionally have a non-null value when exiting a function."
              },
              "fullDescription": {
                "text": "Parameter must conditionally have a non-null value when exiting a function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#nonnullable-reference-not-initialized",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#nonnullable-reference-not-initialized"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8763",
              "shortDescription": {
                "text": "A method marked [DoesNotReturn] should not return."
              },
              "fullDescription": {
                "text": "A method marked [DoesNotReturn] should not return."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8764",
              "shortDescription": {
                "text": "Nullability of return type doesn't match overridden member (possibly because of nullability attributes)."
              },
              "fullDescription": {
                "text": "Nullability of return type doesn't match overridden member (possibly because of nullability attributes)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8765",
              "shortDescription": {
                "text": "Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."
              },
              "fullDescription": {
                "text": "Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8766",
              "shortDescription": {
                "text": "Nullability of return type doesn't match implicitly implemented member (possibly because of nullability attributes)."
              },
              "fullDescription": {
                "text": "Nullability of return type doesn't match implicitly implemented member (possibly because of nullability attributes)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8767",
              "shortDescription": {
                "text": "Nullability of type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes)."
              },
              "fullDescription": {
                "text": "Nullability of type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8768",
              "shortDescription": {
                "text": "Nullability of return type doesn't match implemented member (possibly because of nullability attributes)."
              },
              "fullDescription": {
                "text": "Nullability of return type doesn't match implemented member (possibly because of nullability attributes)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8769",
              "shortDescription": {
                "text": "Nullability of type of parameter doesn't match implemented member (possibly because of nullability attributes)."
              },
              "fullDescription": {
                "text": "Nullability of type of parameter doesn't match implemented member (possibly because of nullability attributes)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8770",
              "shortDescription": {
                "text": "Method lacks '[DoesNotReturn]' annotation in order to match implemented or overridden member."
              },
              "fullDescription": {
                "text": "Method lacks '[DoesNotReturn]' annotation in order to match implemented or overridden member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8774",
              "shortDescription": {
                "text": "Member must have a non-null value when exiting."
              },
              "fullDescription": {
                "text": "Member must have a non-null value when exiting."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8775",
              "shortDescription": {
                "text": "Member must conditionally have a non-null value when exiting a function."
              },
              "fullDescription": {
                "text": "Member must conditionally have a non-null value when exiting a function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8776",
              "shortDescription": {
                "text": "Member cannot be used in this attribute."
              },
              "fullDescription": {
                "text": "Member cannot be used in this attribute."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8777",
              "shortDescription": {
                "text": "Parameter must have a non-null value when exiting."
              },
              "fullDescription": {
                "text": "Parameter must have a non-null value when exiting."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8794",
              "shortDescription": {
                "text": "Given expression always matches the provided pattern"
              },
              "fullDescription": {
                "text": "Given expression always matches the provided pattern"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8819",
              "shortDescription": {
                "text": "Nullability of reference types in return type doesn't match partial method declaration."
              },
              "fullDescription": {
                "text": "Nullability of reference types in return type doesn't match partial method declaration."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#mismatch-in-nullability-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8824",
              "shortDescription": {
                "text": "Parameter must have a non-null value when exiting because parameter mentioned in [NotNullIfNotNull] annotation is non-null."
              },
              "fullDescription": {
                "text": "Parameter must have a non-null value when exiting because parameter mentioned in [NotNullIfNotNull] annotation is non-null."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8825",
              "shortDescription": {
                "text": "Return value must be non-null because parameter mentioned in [NotNullIfNotNull] annotation is non-null."
              },
              "fullDescription": {
                "text": "Return value must be non-null because parameter mentioned in [NotNullIfNotNull] annotation is non-null."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#code-doesnt-match-attribute-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8846",
              "shortDescription": {
                "text": "The switch expression does not handle all possible values of its input type (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value."
              },
              "fullDescription": {
                "text": "The switch expression does not handle all possible values of its input type (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8847",
              "shortDescription": {
                "text": "The switch expression does not handle some null inputs (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value."
              },
              "fullDescription": {
                "text": "The switch expression does not handle some null inputs (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#exhaustive-switch-expression",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings#exhaustive-switch-expression"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8851",
              "shortDescription": {
                "text": "Record defined 'Equals' but not 'GetHashCode'"
              },
              "fullDescription": {
                "text": "Record defined 'Equals' but not 'GetHashCode'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8860",
              "shortDescription": {
                "text": "Types and aliases should not be named 'record'"
              },
              "fullDescription": {
                "text": "Types and aliases should not be named 'record'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8892",
              "shortDescription": {
                "text": "Asynchronous 'Main' method will not be used as an entry point because a synchronous entry point was found."
              },
              "fullDescription": {
                "text": "Asynchronous 'Main' method will not be used as an entry point because a synchronous entry point was found."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/warning-waves#cs8892---method-will-not-be-used-as-an-entry-point-because-a-synchronous-entry-point-method-was-found",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/warning-waves#cs8892---method-will-not-be-used-as-an-entry-point-because-a-synchronous-entry-point-method-was-found"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8947",
              "shortDescription": {
                "text": "Parameter occurs after interpolated string handler parameter in the parameter list."
              },
              "fullDescription": {
                "text": "Parameter occurs after interpolated string handler parameter in the parameter list."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8960",
              "shortDescription": {
                "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerLineNumberAttribute"
              },
              "fullDescription": {
                "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerLineNumberAttribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8961",
              "shortDescription": {
                "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerFilePathAttribute"
              },
              "fullDescription": {
                "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerFilePathAttribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8962",
              "shortDescription": {
                "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerMemberNameAttribute"
              },
              "fullDescription": {
                "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerMemberNameAttribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8963",
              "shortDescription": {
                "text": "The CallerArgumentExpressionAttribute is applied with an invalid parameter name."
              },
              "fullDescription": {
                "text": "The CallerArgumentExpressionAttribute is applied with an invalid parameter name."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8965",
              "shortDescription": {
                "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential"
              },
              "fullDescription": {
                "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8966",
              "shortDescription": {
                "text": "The CallerArgumentExpressionAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
              },
              "fullDescription": {
                "text": "The CallerArgumentExpressionAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8971",
              "shortDescription": {
                "text": "[InterpolatedStringHandlerArgument] has no effect when applied to lambda parameters and will be ignored at the call site."
              },
              "fullDescription": {
                "text": "[InterpolatedStringHandlerArgument] has no effect when applied to lambda parameters and will be ignored at the call site."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/lambda-expression-errors#syntax-limitations-in-lambda-expressions",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/lambda-expression-errors#syntax-limitations-in-lambda-expressions"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8974",
              "shortDescription": {
                "text": "Converting method group to non-delegate type 'object'."
              },
              "fullDescription": {
                "text": "Converting method group to non-delegate type 'object'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS8981",
              "shortDescription": {
                "text": "The type name only contains lower-cased ASCII characters. Such names may become reserved for the language"
              },
              "fullDescription": {
                "text": "The type name only contains lower-cased ASCII characters. Such names may become reserved for the language"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/warning-waves#cs8981---the-type-name-only-contains-lower-cased-ascii-characters",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/warning-waves#cs8981---the-type-name-only-contains-lower-cased-ascii-characters"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9042",
              "shortDescription": {
                "text": "Obsolete members should not be required."
              },
              "fullDescription": {
                "text": "Obsolete members should not be required."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9073",
              "shortDescription": {
                "text": "The 'scoped' modifier of a parameter doesn't match target delegate."
              },
              "fullDescription": {
                "text": "The 'scoped' modifier of a parameter doesn't match target delegate."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9074",
              "shortDescription": {
                "text": "The 'scoped' modifier of parameter doesn't match overridden or implemented member."
              },
              "fullDescription": {
                "text": "The 'scoped' modifier of parameter doesn't match overridden or implemented member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9080",
              "shortDescription": {
                "text": "Use of a variable in this context may expose referenced variables outside of their declaration scope."
              },
              "fullDescription": {
                "text": "Use of a variable in this context may expose referenced variables outside of their declaration scope."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9081",
              "shortDescription": {
                "text": "A result of a stackalloc expression in this context may be exposed outside of the containing method."
              },
              "fullDescription": {
                "text": "A result of a stackalloc expression in this context may be exposed outside of the containing method."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9082",
              "shortDescription": {
                "text": "A local variable is returned by reference but was initialized to a value that cannot be returned by reference."
              },
              "fullDescription": {
                "text": "A local variable is returned by reference but was initialized to a value that cannot be returned by reference."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9083",
              "shortDescription": {
                "text": "A member of a variable is returned by reference but was initialized to a value that cannot be returned by reference"
              },
              "fullDescription": {
                "text": "A member of a variable is returned by reference but was initialized to a value that cannot be returned by reference"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9084",
              "shortDescription": {
                "text": "Struct member returns 'this' or other instance members by reference."
              },
              "fullDescription": {
                "text": "Struct member returns 'this' or other instance members by reference."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9085",
              "shortDescription": {
                "text": "This ref-assigns an expression to a variable with a narrower escape scope."
              },
              "fullDescription": {
                "text": "This ref-assigns an expression to a variable with a narrower escape scope."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9086",
              "shortDescription": {
                "text": "The branches of the ref conditional operator refer to variables with incompatible declaration scopes."
              },
              "fullDescription": {
                "text": "The branches of the ref conditional operator refer to variables with incompatible declaration scopes."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9087",
              "shortDescription": {
                "text": "This returns a parameter by reference but it is not a ref parameter."
              },
              "fullDescription": {
                "text": "This returns a parameter by reference but it is not a ref parameter."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9088",
              "shortDescription": {
                "text": "This returns a parameter by reference but it is scoped to the current method."
              },
              "fullDescription": {
                "text": "This returns a parameter by reference but it is scoped to the current method."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9089",
              "shortDescription": {
                "text": "This returns by reference a member of parameter that is not a ref or out parameter."
              },
              "fullDescription": {
                "text": "This returns by reference a member of parameter that is not a ref or out parameter."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9090",
              "shortDescription": {
                "text": "This returns by reference a member of parameter that is scoped to the current method."
              },
              "fullDescription": {
                "text": "This returns by reference a member of parameter that is scoped to the current method."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9091",
              "shortDescription": {
                "text": "This returns local by reference but it is not a ref local."
              },
              "fullDescription": {
                "text": "This returns local by reference but it is not a ref local."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9092",
              "shortDescription": {
                "text": "This returns a member of local by reference but it is not a ref local."
              },
              "fullDescription": {
                "text": "This returns a member of local by reference but it is not a ref local."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9093",
              "shortDescription": {
                "text": "This ref-assigns a value that can only escape the current method through a return statement."
              },
              "fullDescription": {
                "text": "This ref-assigns a value that can only escape the current method through a return statement."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9094",
              "shortDescription": {
                "text": "This returns a parameter by reference through a ref parameter; but it can only safely be returned in a return statement."
              },
              "fullDescription": {
                "text": "This returns a parameter by reference through a ref parameter; but it can only safely be returned in a return statement."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9095",
              "shortDescription": {
                "text": "This returns by reference a member of parameter through a ref parameter; but it can only safely be returned in a return statement."
              },
              "fullDescription": {
                "text": "This returns by reference a member of parameter through a ref parameter; but it can only safely be returned in a return statement."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9097",
              "shortDescription": {
                "text": "This ref-assigns a value that has a wider value escape scope than the target allowing assignment through the target of values with narrower escapes scopes."
              },
              "fullDescription": {
                "text": "This ref-assigns a value that has a wider value escape scope than the target allowing assignment through the target of values with narrower escapes scopes."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#ref-safety-violations"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9099",
              "shortDescription": {
                "text": "The default parameter value does not match in the target delegate type."
              },
              "fullDescription": {
                "text": "The default parameter value does not match in the target delegate type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/lambda-expression-errors#lambda-expression-delegate-type",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/lambda-expression-errors#lambda-expression-delegate-type"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9100",
              "shortDescription": {
                "text": "Parameter has params modifier in lambda but not in target delegate type."
              },
              "fullDescription": {
                "text": "Parameter has params modifier in lambda but not in target delegate type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/lambda-expression-errors#lambda-expression-delegate-type",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/lambda-expression-errors#lambda-expression-delegate-type"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9107",
              "shortDescription": {
                "text": "Parameter is captured into the state of the enclosing type and its value is also passed to the base constructor. The value might be captured by the base class as well."
              },
              "fullDescription": {
                "text": "Parameter is captured into the state of the enclosing type and its value is also passed to the base constructor. The value might be captured by the base class as well."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/constructor-errors#primary-constructor-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/constructor-errors#primary-constructor-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9123",
              "shortDescription": {
                "text": "The '&' operator should not be used on parameters or local variables in async methods."
              },
              "fullDescription": {
                "text": "The '&' operator should not be used on parameters or local variables in async methods."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/warning-waves#cs9123---taking-address-of-local-or-parameter-in-async-method-can-create-a-gc-hole",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/warning-waves#cs9123---taking-address-of-local-or-parameter-in-async-method-can-create-a-gc-hole"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9124",
              "shortDescription": {
                "text": "Parameter is captured into the state of the enclosing type and its value is also used to initialize a field, property, or event."
              },
              "fullDescription": {
                "text": "Parameter is captured into the state of the enclosing type and its value is also used to initialize a field, property, or event."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/constructor-errors#primary-constructor-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/constructor-errors#primary-constructor-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9154",
              "shortDescription": {
                "text": "Signatures of interceptable and interceptor methods do not match"
              },
              "fullDescription": {
                "text": "Signatures of interceptable and interceptor methods do not match"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/source-generator-errors#signature-mismatch",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/source-generator-errors#signature-mismatch"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9158",
              "shortDescription": {
                "text": "Nullability of reference types in type of parameter doesn't match interceptable method"
              },
              "fullDescription": {
                "text": "Nullability of reference types in type of parameter doesn't match interceptable method"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/source-generator-errors#signature-mismatch",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/source-generator-errors#signature-mismatch"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9159",
              "shortDescription": {
                "text": "Nullability of reference types in return type in interceptor method doesn't match interceptable method'"
              },
              "fullDescription": {
                "text": "Nullability of reference types in return type in interceptor method doesn't match interceptable method'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/source-generator-errors#signature-mismatch",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/source-generator-errors#signature-mismatch"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9179",
              "shortDescription": {
                "text": "Primary constructor parameter is shadowed by a member from base type."
              },
              "fullDescription": {
                "text": "Primary constructor parameter is shadowed by a member from base type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/constructor-errors#primary-constructor-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/constructor-errors#primary-constructor-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9181",
              "shortDescription": {
                "text": "Inline array indexer will not be used for element access expression."
              },
              "fullDescription": {
                "text": "Inline array indexer will not be used for element access expression."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/inline-array-errors#element-access",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/inline-array-errors#element-access"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9182",
              "shortDescription": {
                "text": "Inline array 'Slice' method will not be used for element access expression."
              },
              "fullDescription": {
                "text": "Inline array 'Slice' method will not be used for element access expression."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/inline-array-errors#conversions-to-span",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/inline-array-errors#conversions-to-span"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9183",
              "shortDescription": {
                "text": "Inline array conversion operator will not be used for conversion from expression of the declaring type."
              },
              "fullDescription": {
                "text": "Inline array conversion operator will not be used for conversion from expression of the declaring type."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/inline-array-errors#conversions-to-span",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/inline-array-errors#conversions-to-span"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9184",
              "shortDescription": {
                "text": "'Inline arrays' language feature is not supported for inline array types with element field which is either a 'ref' field, or has type that is not valid as a type argument."
              },
              "fullDescription": {
                "text": "'Inline arrays' language feature is not supported for inline array types with element field which is either a 'ref' field, or has type that is not valid as a type argument."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/inline-array-errors#inline-array-declaration",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/inline-array-errors#inline-array-declaration"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9191",
              "shortDescription": {
                "text": "The 'ref' modifier for an argument corresponding to 'in' parameter is equivalent to 'in'. Consider using 'in' instead."
              },
              "fullDescription": {
                "text": "The 'ref' modifier for an argument corresponding to 'in' parameter is equivalent to 'in'. Consider using 'in' instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variables-require-a-referent",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variables-require-a-referent"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9192",
              "shortDescription": {
                "text": "The 'ref' modifier for an argument corresponding to 'in' parameter is equivalent to 'in'. Consider using 'in' instead."
              },
              "fullDescription": {
                "text": "The 'ref' modifier for an argument corresponding to 'in' parameter is equivalent to 'in'. Consider using 'in' instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variables-require-a-referent",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variables-require-a-referent"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9193",
              "shortDescription": {
                "text": "Argument should be a variable because it is passed to a 'ref readonly' parameter."
              },
              "fullDescription": {
                "text": "Argument should be a variable because it is passed to a 'ref readonly' parameter."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variables-require-a-referent",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variables-require-a-referent"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9195",
              "shortDescription": {
                "text": "Argument should be passed with the 'in' keyword."
              },
              "fullDescription": {
                "text": "Argument should be passed with the 'in' keyword."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variables-require-a-referent",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variables-require-a-referent"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9196",
              "shortDescription": {
                "text": "Reference kind modifier of parameter doesn't match the corresponding parameter in overridden or implemented member."
              },
              "fullDescription": {
                "text": "Reference kind modifier of parameter doesn't match the corresponding parameter in overridden or implemented member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variable-restrictions",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variable-restrictions"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9197",
              "shortDescription": {
                "text": "Reference kind modifier of parameter doesn't match the corresponding parameter in hidden member."
              },
              "fullDescription": {
                "text": "Reference kind modifier of parameter doesn't match the corresponding parameter in hidden member."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9198",
              "shortDescription": {
                "text": "Reference kind modifier of parameter doesn't match the corresponding parameter in target."
              },
              "fullDescription": {
                "text": "Reference kind modifier of parameter doesn't match the corresponding parameter in target."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9200",
              "shortDescription": {
                "text": "A default value is specified for 'ref readonly' parameter, but 'ref readonly' should be used only for references. Consider declaring the parameter as 'in'."
              },
              "fullDescription": {
                "text": "A default value is specified for 'ref readonly' parameter, but 'ref readonly' should be used only for references. Consider declaring the parameter as 'in'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variable-restrictions",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/ref-modifiers-errors#reference-variable-restrictions"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9204",
              "shortDescription": {
                "text": "Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed."
              },
              "fullDescription": {
                "text": "Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9208",
              "shortDescription": {
                "text": "Collection expression may incur unexpected heap allocations"
              },
              "fullDescription": {
                "text": "Collection expression may incur unexpected heap allocations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9209",
              "shortDescription": {
                "text": "Collection expression may incur unexpected heap allocations due to the use of '..' spreads"
              },
              "fullDescription": {
                "text": "Collection expression may incur unexpected heap allocations due to the use of '..' spreads"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9216",
              "shortDescription": {
                "text": "A value of type 'System.Threading.Lock' converted to a different type will use likely unintended monitor-based locking in 'lock' statement"
              },
              "fullDescription": {
                "text": "A value of type 'System.Threading.Lock' converted to a different type will use likely unintended monitor-based locking in 'lock' statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/lock-semantics#lock-warning",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/lock-semantics#lock-warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9256",
              "shortDescription": {
                "text": "Partial member declarations have signature differences."
              },
              "fullDescription": {
                "text": "Partial member declarations have signature differences."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/partial-declarations#partial-properties",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/partial-declarations#partial-properties"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9258",
              "shortDescription": {
                "text": "In language version preview, the 'field' keyword binds to a synthesized backing field for the property"
              },
              "fullDescription": {
                "text": "In language version preview, the 'field' keyword binds to a synthesized backing field for the property"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/partial-declarations#field-backed-properties",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/partial-declarations#field-backed-properties"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::CS9264",
              "shortDescription": {
                "text": "Non-nullable backing field is uninitialized."
              },
              "fullDescription": {
                "text": "Non-nullable backing field is uninitialized."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/partial-declarations#field-backed-properties",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/partial-declarations#field-backed-properties"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSharpWarnings::WME006",
              "shortDescription": {
                "text": "Namespace should be default namespace of this project"
              },
              "fullDescription": {
                "text": "Namespace should be default namespace of this project"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanReplaceCastWithLambdaReturnType",
              "shortDescription": {
                "text": "Cast expression can be replaced with lambda return type"
              },
              "fullDescription": {
                "text": "Replace cast expression with lambda return type to enhance compile-time safety"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanReplaceCastWithLambdaReturnType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanReplaceCastWithLambdaReturnType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanReplaceCastWithShorterTypeArgument",
              "shortDescription": {
                "text": "Cast expression can be replaced with simplified type arguments"
              },
              "fullDescription": {
                "text": "Replace cast expression with simplified type arguments to enhance compile-time safety and code conciseness"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanReplaceCastWithShorterTypeArgument.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanReplaceCastWithShorterTypeArgument.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanReplaceCastWithTypeArgument",
              "shortDescription": {
                "text": "Cast expression can be replaced with explicit type arguments"
              },
              "fullDescription": {
                "text": "Replace cast expression with explicit type arguments to enhance compile-time safety"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanReplaceCastWithTypeArgument.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanReplaceCastWithTypeArgument.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanReplaceCastWithVariableType",
              "shortDescription": {
                "text": "Cast expression can be replaced with explicit variable type"
              },
              "fullDescription": {
                "text": "Replace cast expression with explicit variable type to enhance compile-time safety"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanReplaceCastWithVariableType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanReplaceCastWithVariableType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanSimplifyDictionaryLookupWithTryAdd",
              "shortDescription": {
                "text": "Dictionary lookup can be simplified with 'TryAdd'"
              },
              "fullDescription": {
                "text": "Dictionary lookup can be simplified with 'TryAdd'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanSimplifyDictionaryLookupWithTryAdd.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanSimplifyDictionaryLookupWithTryAdd.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanSimplifyDictionaryLookupWithTryGetValue",
              "shortDescription": {
                "text": "Dictionary lookup can be simplified with 'TryGetValue'"
              },
              "fullDescription": {
                "text": "Dictionary lookup can be simplified with 'TryGetValue'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanSimplifyDictionaryLookupWithTryGetValue.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanSimplifyDictionaryLookupWithTryGetValue.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanSimplifyDictionaryRemovingWithSingleCall",
              "shortDescription": {
                "text": "Dictionary item removal can be simplified with single 'Remove'"
              },
              "fullDescription": {
                "text": "Dictionary item removal can be simplified using single 'Remove' call with out-parameter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanSimplifyDictionaryRemovingWithSingleCall.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanSimplifyDictionaryRemovingWithSingleCall.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanSimplifyDictionaryTryGetValueWithGetValueOrDefault",
              "shortDescription": {
                "text": "Dictionary lookup can be simplified with 'GetValueOrDefault'"
              },
              "fullDescription": {
                "text": "Dictionary lookup can be simplified with 'GetValueOrDefault' extension method"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanSimplifyDictionaryTryGetValueWithGetValueOrDefault.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanSimplifyDictionaryTryGetValueWithGetValueOrDefault.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanSimplifyIsAssignableFrom",
              "shortDescription": {
                "text": "Simplify 'IsInstanceOfType()' invocation"
              },
              "fullDescription": {
                "text": "IsInstanceOfType() invocation can be simplified with 'is' operator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanSimplifyIsAssignableFrom.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanSimplifyIsAssignableFrom.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanSimplifyIsInstanceOfType",
              "shortDescription": {
                "text": "Use 'is' operator"
              },
              "fullDescription": {
                "text": "IsAssignableFrom() invocation can be simplified using IsInstanceOfType() or 'is' operator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanSimplifyIsInstanceOfType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanSimplifyIsInstanceOfType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanSimplifySetAddingWithSingleCall",
              "shortDescription": {
                "text": "Can simplify 'Contains' before 'Add'"
              },
              "fullDescription": {
                "text": "Calling 'Contains' before 'Add' on a set is redundant and can be simplified with a single 'Add' call"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanSimplifySetAddingWithSingleCall.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanSimplifySetAddingWithSingleCall.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CanSimplifyStringEscapeSequence",
              "shortDescription": {
                "text": "Escape sequence can be simplified"
              },
              "fullDescription": {
                "text": "Escape sequence can be simplified"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CanSimplifyStringEscapeSequence.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CanSimplifyStringEscapeSequence.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CannotApplyEqualityOperatorToType",
              "shortDescription": {
                "text": "Values of types marked with 'CannotApplyEqualityOperatorAttribute' should be compared using 'Equals()'"
              },
              "fullDescription": {
                "text": "Type is marked by 'CannotApplyEqualityOperatorAttribute' attribute but it is compared using '==' or '!=' operators"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CannotApplyEqualityOperatorToType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CannotApplyEqualityOperatorToType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CapturedPrimaryConstructorParameterIsMutable",
              "shortDescription": {
                "text": "Captured primary constructor parameter is mutable"
              },
              "fullDescription": {
                "text": "Primary constructor parameter is captured and mutated by instance member(s), consider using explicit non-readonly field instead"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CapturedPrimaryConstructorParameterIsMutable.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CapturedPrimaryConstructorParameterIsMutable.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CenterTagIsObsolete",
              "shortDescription": {
                "text": "Obsolete tags and attributes: <center> is obsolete"
              },
              "fullDescription": {
                "text": "<([)center(]) $attrs$>$content$</center>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ChangeFieldTypeToSystemThreadingLock",
              "shortDescription": {
                "text": "Change lock field type to 'System.Threading.Lock'"
              },
              "fullDescription": {
                "text": "The type of the lock field can be changed to 'System.Threading.Lock' to express the field's intent"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ChangeFieldTypeToSystemThreadingLock.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ChangeFieldTypeToSystemThreadingLock.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CheckForReferenceEqualityInstead.1",
              "shortDescription": {
                "text": "Check for reference equality instead: Check for reference equality instead"
              },
              "fullDescription": {
                "text": "$type$.Equals($type2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CheckForReferenceEqualityInstead.2",
              "shortDescription": {
                "text": "Check for reference equality instead: Check for reference equality instead"
              },
              "fullDescription": {
                "text": "Equals($type$,$type2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CheckForReferenceEqualityInstead.3",
              "shortDescription": {
                "text": "Check for reference equality instead: Check for reference equality instead"
              },
              "fullDescription": {
                "text": "!$type$.Equals($type2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CheckForReferenceEqualityInstead.4",
              "shortDescription": {
                "text": "Check for reference equality instead: Check for reference equality instead"
              },
              "fullDescription": {
                "text": "!Equals($type$,$type2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CheckNamespace",
              "shortDescription": {
                "text": "Namespace does not correspond to file location"
              },
              "fullDescription": {
                "text": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CheckNamespace.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CheckNamespace.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClassCanBeSealed.Global",
              "shortDescription": {
                "text": "Class can be made sealed (non-inheritable): Non-private accessibility"
              },
              "fullDescription": {
                "text": "Class has no inheritors and can be marked sealed (non-inheritable)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClassCanBeSealed.Local",
              "shortDescription": {
                "text": "Class can be made sealed (non-inheritable): Private accessibility"
              },
              "fullDescription": {
                "text": "Class has no inheritors and can be marked sealed (non-inheritable)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClassCannotBeInstantiated",
              "shortDescription": {
                "text": "Class cannot be instantiated"
              },
              "fullDescription": {
                "text": "Remove 'sealed' modifier or make constructor public or internal"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClassNeverInstantiated.Global",
              "shortDescription": {
                "text": "Class is never instantiated: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Non-static class is never instantiated"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ClassNeverInstantiated.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ClassNeverInstantiated.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClassNeverInstantiated.Local",
              "shortDescription": {
                "text": "Class is never instantiated: Private accessibility"
              },
              "fullDescription": {
                "text": "Non-static class is never instantiated"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ClassNeverInstantiated.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ClassNeverInstantiated.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClassWithVirtualMembersNeverInherited.Global",
              "shortDescription": {
                "text": "Class with virtual (overridable) members never inherited: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Non-abstract class has virtual (overridable) members but has no inheritors"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ClassWithVirtualMembersNeverInherited.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ClassWithVirtualMembersNeverInherited.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClassWithVirtualMembersNeverInherited.Local",
              "shortDescription": {
                "text": "Class with virtual (overridable) members never inherited: Private accessibility"
              },
              "fullDescription": {
                "text": "Non-abstract class has virtual (overridable) members but has no inheritors"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ClassWithVirtualMembersNeverInherited.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ClassWithVirtualMembersNeverInherited.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClearAttributeIsObsolete",
              "shortDescription": {
                "text": "Obsolete tags and attributes: Attribute 'clear' is obsolete"
              },
              "fullDescription": {
                "text": "<$tag$ ([)clear=\"$val$\"(]) $a1$>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClearAttributeIsObsolete.All",
              "shortDescription": {
                "text": "Obsolete tags and attributes: Attribute 'clear' is obsolete"
              },
              "fullDescription": {
                "text": "<$tag$ ([)clear=all(]) $a1$>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CoVariantArrayConversion",
              "shortDescription": {
                "text": "Co-variant array conversion"
              },
              "fullDescription": {
                "text": "Co-variant conversion of array could cause run-time exceptions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CoVariantArrayConversion.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CoVariantArrayConversion.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CollectionNeverQueried.Global",
              "shortDescription": {
                "text": "Collection content is never queried: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Elements are only added to the collection but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CollectionNeverQueried.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CollectionNeverQueried.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CollectionNeverQueried.Local",
              "shortDescription": {
                "text": "Collection content is never queried: Private accessibility"
              },
              "fullDescription": {
                "text": "Elements are only added to the collection but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CollectionNeverQueried.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CollectionNeverQueried.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CollectionNeverUpdated.Global",
              "shortDescription": {
                "text": "Collection is never updated: Non-private accessibility"
              },
              "fullDescription": {
                "text": "New elements are never added to the collection"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CollectionNeverUpdated.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CollectionNeverUpdated.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CollectionNeverUpdated.Local",
              "shortDescription": {
                "text": "Collection is never updated: Private accessibility"
              },
              "fullDescription": {
                "text": "New elements are never added to the collection"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CollectionNeverUpdated.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CollectionNeverUpdated.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CompareNonConstrainedGenericWithNull",
              "shortDescription": {
                "text": "Possible comparison of value type with 'null'"
              },
              "fullDescription": {
                "text": "Generic type has no value or class constraint, the condition could be always 'false'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CompareNonConstrainedGenericWithNull.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CompareNonConstrainedGenericWithNull.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CompareOfFloatsByEqualityOperator",
              "shortDescription": {
                "text": "Equality comparison of floating point numbers"
              },
              "fullDescription": {
                "text": "Equality comparison of floating point numbers"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CompareOfFloatsByEqualityOperator.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CompareOfFloatsByEqualityOperator.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConditionIsAlwaysTrueOrFalse",
              "shortDescription": {
                "text": "Expression is always 'true' or always 'false'"
              },
              "fullDescription": {
                "text": "Value of a boolean expression is always the same at this point"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConditionIsAlwaysTrueOrFalse.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConditionIsAlwaysTrueOrFalse.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract",
              "shortDescription": {
                "text": "Expression is always 'true' or 'false' according to nullable reference types' annotations"
              },
              "fullDescription": {
                "text": "Expression is always 'true' or 'false' according to nullable reference types' annotations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConditionalAccessQualifierIsNonNullableAccordingToAPIContract",
              "shortDescription": {
                "text": "Conditional access qualifier expression is not null according to nullable reference types' annotations"
              },
              "fullDescription": {
                "text": "Conditional access qualifier expression is not null according to nullable reference types' annotations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConditionalTernaryEqualBranch",
              "shortDescription": {
                "text": "'?:' expression has identical true and false branches"
              },
              "fullDescription": {
                "text": "'?:' expression has identical true and false branches"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConditionalTernaryEqualBranch.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConditionalTernaryEqualBranch.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConfusingCharAsIntegerInConstructor",
              "shortDescription": {
                "text": "Char is possibly unintentionally used as integer"
              },
              "fullDescription": {
                "text": "Char is possibly unintentionally used as integer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConstantConditionalAccessQualifier",
              "shortDescription": {
                "text": "Conditional access qualifier expression is known to be null or not null"
              },
              "fullDescription": {
                "text": "Conditional access qualifier expression is known to be null or not null"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConstantNullCoalescingCondition",
              "shortDescription": {
                "text": "'??' condition is known to be null or not null"
              },
              "fullDescription": {
                "text": "Operand of '??' expression condition is known to be null or not null"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConstantNullCoalescingCondition.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConstantNullCoalescingCondition.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConstevalIfIsAlwaysConstant",
              "shortDescription": {
                "text": "consteval if is always constant"
              },
              "fullDescription": {
                "text": "consteval if is always constant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConstructorInitializerLoop",
              "shortDescription": {
                "text": "Possible cyclic constructor call"
              },
              "fullDescription": {
                "text": "Possible cyclic constructor call"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConstructorInitializerLoop.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConstructorInitializerLoop.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConstructorWithMustDisposeResourceAttributeBaseIsNotAnnotated",
              "shortDescription": {
                "text": "[MustDisposeResource] annotation is not inherited from the base constructor and should be placed explicitly"
              },
              "fullDescription": {
                "text": "[MustDisposeResource] annotation is not inherited from the base constructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConstructorWithMustDisposeResourceAttributeBaseIsNotAnnotated.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConstructorWithMustDisposeResourceAttributeBaseIsNotAnnotated.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ContainerAnnotationRedundancy",
              "shortDescription": {
                "text": "Container nullability attribute usage with declaration of non-container type"
              },
              "fullDescription": {
                "text": "Container nullability attribute usage with declaration of non-container type does not affect code analysis"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ContextValueIsProvided",
              "shortDescription": {
                "text": "Value of some context type is already provided"
              },
              "fullDescription": {
                "text": "Value of some context type is already provided by member annotated with [ProvidesContext] annotation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ContractAnnotationNotParsed",
              "shortDescription": {
                "text": "Problem in contract annotation definition"
              },
              "fullDescription": {
                "text": "Input string in ContractAnnotation attribute could not be parsed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ContractAnnotationNotParsed.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ContractAnnotationNotParsed.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertClosureToMethodGroup",
              "shortDescription": {
                "text": "Convert lambda expression into method group"
              },
              "fullDescription": {
                "text": "Convert lambda expression or anonymous method into method group"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertClosureToMethodGroup.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertClosureToMethodGroup.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertConditionalTernaryExpressionToSwitchExpression",
              "shortDescription": {
                "text": "Replace ternary expression with 'switch' expression"
              },
              "fullDescription": {
                "text": "Replace chain of ternary expressions with 'switch' expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertConstructorToMemberInitializers",
              "shortDescription": {
                "text": "Convert constructor into member initializers"
              },
              "fullDescription": {
                "text": "Replace constructor with members initialized inline"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertConstructorToMemberInitializers.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertConstructorToMemberInitializers.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertIfDoToWhile",
              "shortDescription": {
                "text": "Convert 'if do while' into 'while'"
              },
              "fullDescription": {
                "text": "Simplify statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertIfStatementToConditionalTernaryExpression",
              "shortDescription": {
                "text": "'if' statement can be rewritten as '?:' expression"
              },
              "fullDescription": {
                "text": "Convert the following code:\r\n<pre>\r\n  if (condition) x = expr1;\r\n  else x = expr2;\r\n</pre>\r\nTo:\r\n<pre>\r\n  x = condition ? expr1 : expr2;\r\n</pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertIfStatementToConditionalTernaryExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertIfStatementToConditionalTernaryExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertIfStatementToNullCoalescingAssignment",
              "shortDescription": {
                "text": "'if' statement can be rewritten as '??=' assignment"
              },
              "fullDescription": {
                "text": "Convert the following code:\r\n<pre>\r\n  if (x = null) x = expr;\r\n</pre>\r\nTo:\r\n<pre>\r\n   x ??= expr;\r\n</pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertIfStatementToNullCoalescingExpression",
              "shortDescription": {
                "text": "'if' statement can be rewritten as '??' expression"
              },
              "fullDescription": {
                "text": "Convert the following code:\r\n<pre>\r\n  var x = expr1;\r\n  if (x = null) x = expr2;\r\n</pre>\r\nTo:\r\n<pre>\r\n  var x = expr1 ?? expr2;\r\n</pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertIfStatementToNullCoalescingExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertIfStatementToNullCoalescingExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertIfStatementToReturnStatement",
              "shortDescription": {
                "text": "'if-return' statement can be rewritten as 'return' statement"
              },
              "fullDescription": {
                "text": "Convert the following code:\r\n<pre>\r\n  if (condition) return expr1;\r\n  return expr2;\r\n</pre>\r\nTo:\r\n<pre>\r\n  return condition ? expr1 : expr2;\r\n</pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertIfStatementToReturnStatement.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertIfStatementToReturnStatement.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertIfStatementToSwitchStatement",
              "shortDescription": {
                "text": "Convert 'if' statement into 'switch'"
              },
              "fullDescription": {
                "text": "Convert series of 'if' statements into single 'switch'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertIfStatementToSwitchStatement.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertIfStatementToSwitchStatement.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertIfToOrExpression",
              "shortDescription": {
                "text": "Convert 'if' into '||'"
              },
              "fullDescription": {
                "text": "Suggest to replace\r\n            bool result = x > 0;\r\n            if (y > 0) result = true;\r\n            To\r\n            bool result = x > 0 || y > 0;"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertIfToOrExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertIfToOrExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertNullableToShortForm",
              "shortDescription": {
                "text": "Convert 'Nullable<T>' into 'T?'"
              },
              "fullDescription": {
                "text": "Rewrite nullable type in short form"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertNullableToShortForm.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertNullableToShortForm.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertSwitchStatementToSwitchExpression",
              "shortDescription": {
                "text": "Replace 'switch' statement with 'switch' expression"
              },
              "fullDescription": {
                "text": "Replace 'switch' statement with 'switch' expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToAutoProperty",
              "shortDescription": {
                "text": "Convert property into auto-property"
              },
              "fullDescription": {
                "text": "Converts property declaration into C# auto-property syntax"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertToAutoProperty.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertToAutoProperty.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToAutoPropertyWhenPossible",
              "shortDescription": {
                "text": "Convert property into auto-property (when possible)"
              },
              "fullDescription": {
                "text": "Converts property declaration into C# auto-property syntax"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToAutoPropertyWithPrivateSetter",
              "shortDescription": {
                "text": "Convert property into auto-property with private setter"
              },
              "fullDescription": {
                "text": "Converts property declaration into C# auto-property syntax with private setter declared"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToCompoundAssignment",
              "shortDescription": {
                "text": "Use compound assignment"
              },
              "fullDescription": {
                "text": "Replace assignment with compound assignment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToConstant.Global",
              "shortDescription": {
                "text": "Convert local variable or field into constant: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Convert local variable or field into constant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToConstant.Local",
              "shortDescription": {
                "text": "Convert local variable or field into constant: Private accessibility"
              },
              "fullDescription": {
                "text": "Convert local variable or field into constant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToLambdaExpression",
              "shortDescription": {
                "text": "Convert into lambda expression"
              },
              "fullDescription": {
                "text": "Convert statement-bodied lambda into expression-bodied. Does not suggest the conversion when the expression contains nested closures or explicit side-effects."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertToLambdaExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertToLambdaExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToLocalFunction",
              "shortDescription": {
                "text": "Convert delegate variable into local function"
              },
              "fullDescription": {
                "text": "Replace delegate variable with local function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertToLocalFunction.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertToLocalFunction.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToNullCoalescingCompoundAssignment",
              "shortDescription": {
                "text": "Use compound assignment"
              },
              "fullDescription": {
                "text": "Replace null-coalescing expression with compound assignment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertToNullCoalescingCompoundAssignment.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertToNullCoalescingCompoundAssignment.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToPrimaryConstructor",
              "shortDescription": {
                "text": "Convert constructor into primary constructor"
              },
              "fullDescription": {
                "text": "Replace ordinary constructor with primary constructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertToPrimaryConstructor.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertToPrimaryConstructor.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToStaticClass",
              "shortDescription": {
                "text": "Convert into static class"
              },
              "fullDescription": {
                "text": "Make class static"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToUsingDeclaration",
              "shortDescription": {
                "text": "Convert into 'using' declaration"
              },
              "fullDescription": {
                "text": "Replace 'using' statement with 'using' declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToVbAutoProperty",
              "shortDescription": {
                "text": "Convert property to auto-property"
              },
              "fullDescription": {
                "text": "Converts property declaration to VB.NET auto-property syntax."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToVbAutoPropertyWhenPossible",
              "shortDescription": {
                "text": "Convert property to auto-property when possible"
              },
              "fullDescription": {
                "text": "Converts property declaration to VB.NET auto-property syntax."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertToVbAutoPropertyWithPrivateSetter",
              "shortDescription": {
                "text": "Convert property to auto-property with private setter"
              },
              "fullDescription": {
                "text": "Converts property declaration to VB.NET auto-property syntax with private setter declared."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertTypeCheckPatternToNullCheck",
              "shortDescription": {
                "text": "Use null check pattern instead of a type check succeeding on any not-null value"
              },
              "fullDescription": {
                "text": "The source expression is always of pattern's type, matches on all non-null values"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConvertTypeCheckToNullCheck",
              "shortDescription": {
                "text": "Use null check instead of a type check succeeding on any not-null value"
              },
              "fullDescription": {
                "text": "The expression of 'is' operator matches the provided type on any non-null value. Consider comparing with 'null' instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ConvertTypeCheckToNullCheck.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ConvertTypeCheckToNullCheck.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppAbstractClassWithoutSpecifier",
              "shortDescription": {
                "text": "Class is abstract but not explicitly declared as such"
              },
              "fullDescription": {
                "text": "The class is abstract but not explicitly declared as such"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppAbstractFinalClass",
              "shortDescription": {
                "text": "Abstract final class"
              },
              "fullDescription": {
                "text": "An abstract final class is marked as 'final' or 'sealed'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppAbstractVirtualFunctionCallInCtor",
              "shortDescription": {
                "text": "Call to a virtual function inside a constructor/destructor will result in a pure virtual function call"
              },
              "fullDescription": {
                "text": "Calls to pure virtual functions inside constructors and destructors will result in runtime errors"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppAccessSpecifierWithNoDeclarations",
              "shortDescription": {
                "text": "Access specifier does not affect any declaration"
              },
              "fullDescription": {
                "text": "An access specifier does not affect any declaration and is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppAssignedValueIsNeverUsed",
              "shortDescription": {
                "text": "Assigned value is never used"
              },
              "fullDescription": {
                "text": "Assigned value is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppAwaiterTypeIsNotClass",
              "shortDescription": {
                "text": "Awaiter type is not a class"
              },
              "fullDescription": {
                "text": "The awaiter type must be a a class according to the C++20 standard"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadAngleBracketsSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around angle brackets"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around angle brackets"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadBracesSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around braces"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadChildStatementIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around child statement"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around child statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadColonSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around colon"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around colon"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadCommaSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around comma"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around comma"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadControlBracesIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around statement braces"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around statement braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadControlBracesLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around statement braces"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around statement braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadDeclarationBracesIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around declaration braces"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around declaration braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadDeclarationBracesLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around declaration braces"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around declaration braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadEmptyBracesLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around empty braces"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around empty braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadExpressionBracesIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around expression braces"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around expression braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadExpressionBracesLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around expression braces"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around expression braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadIndent",
              "shortDescription": {
                "text": "Incorrect indent: Redundant indent/outdent elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect indent: Redundant indent/outdent elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadListLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around comma in lists"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around comma in lists"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadMemberAccessSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around member access symbols"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around member access symbols"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadNamespaceBracesIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around namespace braces"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around namespace braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadParensLineBreaks",
              "shortDescription": {
                "text": "Incorrect line breaks: Around parenthesis"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Around parenthesis"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadParensSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around parenthesis"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around parenthesis"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadSemicolonSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around semicolon"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around semicolon"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadSpacesAfterKeyword",
              "shortDescription": {
                "text": "Incorrect spacing: Between keyword and parenthesis"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Between keyword and parenthesis"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadSquareBracketsSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around square brackets within a statement"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around square brackets within a statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadSwitchBracesIndent",
              "shortDescription": {
                "text": "Incorrect indent: Around switch statement"
              },
              "fullDescription": {
                "text": "Incorrect indent: Around switch statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBadSymbolSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Around operator symbols"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Around operator symbols"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBooleanIncrementExpression",
              "shortDescription": {
                "text": "Incrementing expression of type bool"
              },
              "fullDescription": {
                "text": "Incrementing expression of type bool is deprecated in C++11 and removed in C++17"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBoostFormatBadCode",
              "shortDescription": {
                "text": "Incorrect format directive in boost::format"
              },
              "fullDescription": {
                "text": "A format string of boost::format contains an erroneous format directive"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBoostFormatLegacyCode",
              "shortDescription": {
                "text": "Outdated format directive in boost::format"
              },
              "fullDescription": {
                "text": "A format string of boost::format contains a legacy printf-like code; type specifier is not taken into account"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBoostFormatMixedArgs",
              "shortDescription": {
                "text": "Positional and non-positional arguments in the same boost::format call"
              },
              "fullDescription": {
                "text": "An argument of boost::format should contain either positional (%N%, %|N$...|) or serial (%|...|, %s) arguments, not both"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBoostFormatTooFewArgs",
              "shortDescription": {
                "text": "Not enough arguments in a call to boost::format"
              },
              "fullDescription": {
                "text": "Not enough arguments in a call to boost::format"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBoostFormatTooManyArgs",
              "shortDescription": {
                "text": "Too many arguments in a call to boost::format"
              },
              "fullDescription": {
                "text": "Too many arguments in a call to boost::format. Some of the arguments are not used."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppBoundToDelegateMethodIsNotMarkedAsUFunction",
              "shortDescription": {
                "text": "Method bound to delegate is not marked with UFUNCTION macro"
              },
              "fullDescription": {
                "text": "Method bound to delegate must be marked with UFUNCTION macro"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppCStyleCast",
              "shortDescription": {
                "text": "C-style cast is used instead of a C++ cast"
              },
              "fullDescription": {
                "text": "C-style cast is used instead of a C++ cast"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-casts-named",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-casts-named"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppCVQualifierCanNotBeAppliedToReference",
              "shortDescription": {
                "text": "Adding cv-qualifiers to references has no effect"
              },
              "fullDescription": {
                "text": "Adding cv-qualifiers to references has no effect"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilCleanupCtad",
              "shortDescription": {
                "text": "abseil: abseil-cleanup-ctad clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-cleanup-ctad clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/cleanup-ctad.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilDurationAddition",
              "shortDescription": {
                "text": "abseil: abseil-duration-addition clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-duration-addition clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-addition.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilDurationComparison",
              "shortDescription": {
                "text": "abseil: abseil-duration-comparison clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-duration-comparison clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-comparison.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilDurationConversionCast",
              "shortDescription": {
                "text": "abseil: abseil-duration-conversion-cast clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-duration-conversion-cast clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-conversion-cast.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilDurationDivision",
              "shortDescription": {
                "text": "abseil: abseil-duration-division clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-duration-division clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-division.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilDurationFactoryFloat",
              "shortDescription": {
                "text": "abseil: abseil-duration-factory-float clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-duration-factory-float clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-factory-float.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilDurationFactoryScale",
              "shortDescription": {
                "text": "abseil: abseil-duration-factory-scale clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-duration-factory-scale clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-factory-scale.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilDurationSubtraction",
              "shortDescription": {
                "text": "abseil: abseil-duration-subtraction clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-duration-subtraction clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-subtraction.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilDurationUnnecessaryConversion",
              "shortDescription": {
                "text": "abseil: abseil-duration-unnecessary-conversion clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-duration-unnecessary-conversion clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-unnecessary-conversion.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilFasterStrsplitDelimiter",
              "shortDescription": {
                "text": "abseil: abseil-faster-strsplit-delimiter clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-faster-strsplit-delimiter clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/faster-strsplit-delimiter.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilNoInternalDependencies",
              "shortDescription": {
                "text": "abseil: abseil-no-internal-dependencies clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-no-internal-dependencies clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/no-internal-dependencies.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilNoNamespace",
              "shortDescription": {
                "text": "abseil: abseil-no-namespace clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-no-namespace clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/no-namespace.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilRedundantStrcatCalls",
              "shortDescription": {
                "text": "abseil: abseil-redundant-strcat-calls clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-redundant-strcat-calls clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/redundant-strcat-calls.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilStrCatAppend",
              "shortDescription": {
                "text": "abseil: abseil-str-cat-append clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-str-cat-append clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/str-cat-append.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilStringFindStartswith",
              "shortDescription": {
                "text": "abseil: abseil-string-find-startswith clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-string-find-startswith clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/string-find-startswith.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilStringFindStrContains",
              "shortDescription": {
                "text": "abseil: abseil-string-find-str-contains clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-string-find-str-contains clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/string-find-str-contains.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilTimeComparison",
              "shortDescription": {
                "text": "abseil: abseil-time-comparison clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-time-comparison clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/time-comparison.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilTimeSubtraction",
              "shortDescription": {
                "text": "abseil: abseil-time-subtraction clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-time-subtraction clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/time-subtraction.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAbseilUpgradeDurationConversions",
              "shortDescription": {
                "text": "abseil: abseil-upgrade-duration-conversions clang-tidy check"
              },
              "fullDescription": {
                "text": "abseil-upgrade-duration-conversions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/upgrade-duration-conversions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAlteraIdDependentBackwardBranch",
              "shortDescription": {
                "text": "altera: altera-id-dependent-backward-branch clang-tidy check"
              },
              "fullDescription": {
                "text": "altera-id-dependent-backward-branch clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/id-dependent-backward-branch.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAlteraKernelNameRestriction",
              "shortDescription": {
                "text": "altera: altera-kernel-name-restriction clang-tidy check"
              },
              "fullDescription": {
                "text": "altera-kernel-name-restriction clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/kernel-name-restriction.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAlteraSingleWorkItemBarrier",
              "shortDescription": {
                "text": "altera: altera-single-work-item-barrier clang-tidy check"
              },
              "fullDescription": {
                "text": "altera-single-work-item-barrier clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/single-work-item-barrier.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAlteraStructPackAlign",
              "shortDescription": {
                "text": "altera: altera-struct-pack-align clang-tidy check"
              },
              "fullDescription": {
                "text": "altera-struct-pack-align clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/struct-pack-align.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAlteraUnrollLoops",
              "shortDescription": {
                "text": "altera: altera-unroll-loops clang-tidy check"
              },
              "fullDescription": {
                "text": "altera-unroll-loops clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/unroll-loops.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecAccept",
              "shortDescription": {
                "text": "android: android-cloexec-accept clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-accept clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-accept.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecAccept4",
              "shortDescription": {
                "text": "android: android-cloexec-accept4 clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-accept4 clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-accept4.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecCreat",
              "shortDescription": {
                "text": "android: android-cloexec-creat clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-creat clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-creat.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecDup",
              "shortDescription": {
                "text": "android: android-cloexec-dup clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-dup clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-dup.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecEpollCreate",
              "shortDescription": {
                "text": "android: android-cloexec-epoll-create clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-epoll-create clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-epoll-create.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecEpollCreate1",
              "shortDescription": {
                "text": "android: android-cloexec-epoll-create1 clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-epoll-create1 clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-epoll-create1.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecFopen",
              "shortDescription": {
                "text": "android: android-cloexec-fopen clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-fopen clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-fopen.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecInotifyInit",
              "shortDescription": {
                "text": "android: android-cloexec-inotify-init clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-inotify-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-inotify-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecInotifyInit1",
              "shortDescription": {
                "text": "android: android-cloexec-inotify-init1 clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-inotify-init1 clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-inotify-init1.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecMemfdCreate",
              "shortDescription": {
                "text": "android: android-cloexec-memfd-create clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-memfd-create clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-memfd-create.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecOpen",
              "shortDescription": {
                "text": "android: android-cloexec-open clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-open clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-open.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecPipe",
              "shortDescription": {
                "text": "android: android-cloexec-pipe clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-pipe clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-pipe.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecPipe2",
              "shortDescription": {
                "text": "android: android-cloexec-pipe2 clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-pipe2 clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-pipe2.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidCloexecSocket",
              "shortDescription": {
                "text": "android: android-cloexec-socket clang-tidy check"
              },
              "fullDescription": {
                "text": "android-cloexec-socket clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-socket.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyAndroidComparisonInTempFailureRetry",
              "shortDescription": {
                "text": "android: android-comparison-in-temp-failure-retry clang-tidy check"
              },
              "fullDescription": {
                "text": "android-comparison-in-temp-failure-retry clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/comparison-in-temp-failure-retry.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBoostUseRanges",
              "shortDescription": {
                "text": "boost: boost-use-ranges clang-tidy check"
              },
              "fullDescription": {
                "text": "boost-use-ranges clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/boost/use-ranges.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBoostUseToString",
              "shortDescription": {
                "text": "boost: boost-use-to-string clang-tidy check"
              },
              "fullDescription": {
                "text": "boost-use-to-string clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/boost/use-to-string.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneArgumentComment",
              "shortDescription": {
                "text": "bugprone: bugprone-argument-comment clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-argument-comment clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/argument-comment.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneAssertSideEffect",
              "shortDescription": {
                "text": "bugprone: bugprone-assert-side-effect clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-assert-side-effect clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/assert-side-effect.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneAssignmentInIfCondition",
              "shortDescription": {
                "text": "bugprone: bugprone-assignment-in-if-condition clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-assignment-in-if-condition clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/assignment-in-if-condition.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneBadSignalToKillThread",
              "shortDescription": {
                "text": "bugprone: bugprone-bad-signal-to-kill-thread clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-bad-signal-to-kill-thread clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/bad-signal-to-kill-thread.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneBitwisePointerCast",
              "shortDescription": {
                "text": "bugprone: bugprone-bitwise-pointer-cast clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-bitwise-pointer-cast clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/bitwise-pointer-cast.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneBoolPointerImplicitConversion",
              "shortDescription": {
                "text": "bugprone: bugprone-bool-pointer-implicit-conversion clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-bool-pointer-implicit-conversion clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/bool-pointer-implicit-conversion.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneBranchClone",
              "shortDescription": {
                "text": "bugprone: bugprone-branch-clone clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-branch-clone clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/branch-clone.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneCastingThroughVoid",
              "shortDescription": {
                "text": "bugprone: bugprone-casting-through-void clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-casting-through-void clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/casting-through-void.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneChainedComparison",
              "shortDescription": {
                "text": "bugprone: bugprone-chained-comparison clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-chained-comparison clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/chained-comparison.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneComparePointerToMemberVirtualFunction",
              "shortDescription": {
                "text": "bugprone: bugprone-compare-pointer-to-member-virtual-function clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-compare-pointer-to-member-virtual-function clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/compare-pointer-to-member-virtual-function.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneCopyConstructorInit",
              "shortDescription": {
                "text": "bugprone: bugprone-copy-constructor-init clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-copy-constructor-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/copy-constructor-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneCrtpConstructorAccessibility",
              "shortDescription": {
                "text": "bugprone: bugprone-crtp-constructor-accessibility clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-crtp-constructor-accessibility clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/crtp-constructor-accessibility.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneDanglingHandle",
              "shortDescription": {
                "text": "bugprone: bugprone-dangling-handle clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-dangling-handle clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/dangling-handle.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneDynamicStaticInitializers",
              "shortDescription": {
                "text": "bugprone: bugprone-dynamic-static-initializers clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-dynamic-static-initializers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/dynamic-static-initializers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneEasilySwappableParameters",
              "shortDescription": {
                "text": "bugprone: bugprone-easily-swappable-parameters clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-easily-swappable-parameters clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/easily-swappable-parameters.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneEmptyCatch",
              "shortDescription": {
                "text": "bugprone: bugprone-empty-catch clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-empty-catch clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/empty-catch.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneExceptionEscape",
              "shortDescription": {
                "text": "bugprone: bugprone-exception-escape clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-exception-escape clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/exception-escape.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneFoldInitType",
              "shortDescription": {
                "text": "bugprone: bugprone-fold-init-type clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-fold-init-type clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/fold-init-type.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneForwardDeclarationNamespace",
              "shortDescription": {
                "text": "bugprone: bugprone-forward-declaration-namespace clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-forward-declaration-namespace clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/forward-declaration-namespace.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneForwardingReferenceOverload",
              "shortDescription": {
                "text": "bugprone: bugprone-forwarding-reference-overload clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-forwarding-reference-overload clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/forwarding-reference-overload.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneImplicitWideningOfMultiplicationResult",
              "shortDescription": {
                "text": "bugprone: bugprone-implicit-widening-of-multiplication-result clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-implicit-widening-of-multiplication-result clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/implicit-widening-of-multiplication-result.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneInaccurateErase",
              "shortDescription": {
                "text": "bugprone: bugprone-inaccurate-erase clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-inaccurate-erase clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/inaccurate-erase.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneIncDecInConditions",
              "shortDescription": {
                "text": "bugprone: bugprone-inc-dec-in-conditions clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-inc-dec-in-conditions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/inc-dec-in-conditions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneIncorrectEnableIf",
              "shortDescription": {
                "text": "bugprone: bugprone-incorrect-enable-if clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-incorrect-enable-if clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/incorrect-enable-if.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneIncorrectEnableSharedFromThis",
              "shortDescription": {
                "text": "bugprone: bugprone-incorrect-enable-shared-from-this clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-incorrect-enable-shared-from-this clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/incorrect-enable-shared-from-this.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneIncorrectRoundings",
              "shortDescription": {
                "text": "bugprone: bugprone-incorrect-roundings clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-incorrect-roundings clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/incorrect-roundings.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneInfiniteLoop",
              "shortDescription": {
                "text": "bugprone: bugprone-infinite-loop clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-infinite-loop clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/infinite-loop.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneIntegerDivision",
              "shortDescription": {
                "text": "bugprone: bugprone-integer-division clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-integer-division clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/integer-division.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneLambdaFunctionName",
              "shortDescription": {
                "text": "bugprone: bugprone-lambda-function-name clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-lambda-function-name clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/lambda-function-name.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneMacroParentheses",
              "shortDescription": {
                "text": "bugprone: bugprone-macro-parentheses clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-macro-parentheses clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/macro-parentheses.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneMacroRepeatedSideEffects",
              "shortDescription": {
                "text": "bugprone: bugprone-macro-repeated-side-effects clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-macro-repeated-side-effects clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/macro-repeated-side-effects.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneMisplacedOperatorInStrlenInAlloc",
              "shortDescription": {
                "text": "bugprone: bugprone-misplaced-operator-in-strlen-in-alloc clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-misplaced-operator-in-strlen-in-alloc clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/misplaced-operator-in-strlen-in-alloc.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneMisplacedPointerArithmeticInAlloc",
              "shortDescription": {
                "text": "bugprone: bugprone-misplaced-pointer-arithmetic-in-alloc clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-misplaced-pointer-arithmetic-in-alloc clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/misplaced-pointer-arithmetic-in-alloc.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneMisplacedWideningCast",
              "shortDescription": {
                "text": "bugprone: bugprone-misplaced-widening-cast clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-misplaced-widening-cast clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/misplaced-widening-cast.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneMoveForwardingReference",
              "shortDescription": {
                "text": "bugprone: bugprone-move-forwarding-reference clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-move-forwarding-reference clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/move-forwarding-reference.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneMultiLevelImplicitPointerConversion",
              "shortDescription": {
                "text": "bugprone: bugprone-multi-level-implicit-pointer-conversion clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-multi-level-implicit-pointer-conversion clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/multi-level-implicit-pointer-conversion.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneMultipleNewInOneExpression",
              "shortDescription": {
                "text": "bugprone: bugprone-multiple-new-in-one-expression clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-multiple-new-in-one-expression clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/multiple-new-in-one-expression.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneMultipleStatementMacro",
              "shortDescription": {
                "text": "bugprone: bugprone-multiple-statement-macro clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-multiple-statement-macro clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/multiple-statement-macro.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneNarrowingConversions",
              "shortDescription": {
                "text": "bugprone: bugprone-narrowing-conversions clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-narrowing-conversions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/narrowing-conversions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneNoEscape",
              "shortDescription": {
                "text": "bugprone: bugprone-no-escape clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-no-escape clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/no-escape.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneNonZeroEnumToBoolConversion",
              "shortDescription": {
                "text": "bugprone: bugprone-non-zero-enum-to-bool-conversion clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-non-zero-enum-to-bool-conversion clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/non-zero-enum-to-bool-conversion.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneNondeterministicPointerIterationOrder",
              "shortDescription": {
                "text": "bugprone: bugprone-nondeterministic-pointer-iteration-order clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-nondeterministic-pointer-iteration-order clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/nondeterministic-pointer-iteration-order.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneNotNullTerminatedResult",
              "shortDescription": {
                "text": "bugprone: bugprone-not-null-terminated-result clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-not-null-terminated-result clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/not-null-terminated-result.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneOptionalValueConversion",
              "shortDescription": {
                "text": "bugprone: bugprone-optional-value-conversion clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-optional-value-conversion clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/optional-value-conversion.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneParentVirtualCall",
              "shortDescription": {
                "text": "bugprone: bugprone-parent-virtual-call clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-parent-virtual-call clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/parent-virtual-call.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugpronePointerArithmeticOnPolymorphicObject",
              "shortDescription": {
                "text": "bugprone: bugprone-pointer-arithmetic-on-polymorphic-object clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-pointer-arithmetic-on-polymorphic-object clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/pointer-arithmetic-on-polymorphic-object.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugpronePosixReturn",
              "shortDescription": {
                "text": "bugprone: bugprone-posix-return clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-posix-return clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/posix-return.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneRedundantBranchCondition",
              "shortDescription": {
                "text": "bugprone: bugprone-redundant-branch-condition clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-redundant-branch-condition clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/redundant-branch-condition.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneReservedIdentifier",
              "shortDescription": {
                "text": "bugprone: bugprone-reserved-identifier clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-reserved-identifier clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/reserved-identifier.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneReturnConstRefFromParameter",
              "shortDescription": {
                "text": "bugprone: bugprone-return-const-ref-from-parameter clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-return-const-ref-from-parameter clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/return-const-ref-from-parameter.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSharedPtrArrayMismatch",
              "shortDescription": {
                "text": "bugprone: bugprone-shared-ptr-array-mismatch clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-shared-ptr-array-mismatch clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/shared-ptr-array-mismatch.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSignalHandler",
              "shortDescription": {
                "text": "bugprone: bugprone-signal-handler clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-signal-handler clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/signal-handler.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSignedCharMisuse",
              "shortDescription": {
                "text": "bugprone: bugprone-signed-char-misuse clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-signed-char-misuse clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/signed-char-misuse.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSizeofContainer",
              "shortDescription": {
                "text": "bugprone: bugprone-sizeof-container clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-sizeof-container clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/sizeof-container.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSizeofExpression",
              "shortDescription": {
                "text": "bugprone: bugprone-sizeof-expression clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-sizeof-expression clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/sizeof-expression.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSpuriouslyWakeUpFunctions",
              "shortDescription": {
                "text": "bugprone: bugprone-spuriously-wake-up-functions clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-spuriously-wake-up-functions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/spuriously-wake-up-functions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneStandaloneEmpty",
              "shortDescription": {
                "text": "bugprone: bugprone-standalone-empty clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-standalone-empty clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/standalone-empty.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneStringConstructor",
              "shortDescription": {
                "text": "bugprone: bugprone-string-constructor clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-string-constructor clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/string-constructor.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneStringIntegerAssignment",
              "shortDescription": {
                "text": "bugprone: bugprone-string-integer-assignment clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-string-integer-assignment clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/string-integer-assignment.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneStringLiteralWithEmbeddedNul",
              "shortDescription": {
                "text": "bugprone: bugprone-string-literal-with-embedded-nul clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-string-literal-with-embedded-nul clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/string-literal-with-embedded-nul.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneStringviewNullptr",
              "shortDescription": {
                "text": "bugprone: bugprone-stringview-nullptr clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-stringview-nullptr clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/stringview-nullptr.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSuspiciousEnumUsage",
              "shortDescription": {
                "text": "bugprone: bugprone-suspicious-enum-usage clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-suspicious-enum-usage clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-enum-usage.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSuspiciousInclude",
              "shortDescription": {
                "text": "bugprone: bugprone-suspicious-include clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-suspicious-include clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-include.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSuspiciousMemoryComparison",
              "shortDescription": {
                "text": "bugprone: bugprone-suspicious-memory-comparison clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-suspicious-memory-comparison clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-memory-comparison.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSuspiciousMemsetUsage",
              "shortDescription": {
                "text": "bugprone: bugprone-suspicious-memset-usage clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-suspicious-memset-usage clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-memset-usage.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSuspiciousMissingComma",
              "shortDescription": {
                "text": "bugprone: bugprone-suspicious-missing-comma clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-suspicious-missing-comma clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-missing-comma.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSuspiciousReallocUsage",
              "shortDescription": {
                "text": "bugprone: bugprone-suspicious-realloc-usage clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-suspicious-realloc-usage clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-realloc-usage.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSuspiciousSemicolon",
              "shortDescription": {
                "text": "bugprone: bugprone-suspicious-semicolon clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-suspicious-semicolon clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-semicolon.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSuspiciousStringCompare",
              "shortDescription": {
                "text": "bugprone: bugprone-suspicious-string-compare clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-suspicious-string-compare clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-string-compare.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSuspiciousStringviewDataUsage",
              "shortDescription": {
                "text": "bugprone: bugprone-suspicious-stringview-data-usage clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-suspicious-stringview-data-usage clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-stringview-data-usage.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSwappedArguments",
              "shortDescription": {
                "text": "bugprone: bugprone-swapped-arguments clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-swapped-arguments clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/swapped-arguments.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneSwitchMissingDefaultCase",
              "shortDescription": {
                "text": "bugprone: bugprone-switch-missing-default-case clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-switch-missing-default-case clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/switch-missing-default-case.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneTaggedUnionMemberCount",
              "shortDescription": {
                "text": "bugprone: bugprone-tagged-union-member-count clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-tagged-union-member-count clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/tagged-union-member-count.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneTerminatingContinue",
              "shortDescription": {
                "text": "bugprone: bugprone-terminating-continue clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-terminating-continue clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/terminating-continue.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneThrowKeywordMissing",
              "shortDescription": {
                "text": "bugprone: bugprone-throw-keyword-missing clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-throw-keyword-missing clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/throw-keyword-missing.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneTooSmallLoopVariable",
              "shortDescription": {
                "text": "bugprone: bugprone-too-small-loop-variable clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-too-small-loop-variable clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/too-small-loop-variable.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUncheckedOptionalAccess",
              "shortDescription": {
                "text": "bugprone: bugprone-unchecked-optional-access clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-unchecked-optional-access clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unchecked-optional-access.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUndefinedMemoryManipulation",
              "shortDescription": {
                "text": "bugprone: bugprone-undefined-memory-manipulation clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-undefined-memory-manipulation clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/undefined-memory-manipulation.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUndelegatedConstructor",
              "shortDescription": {
                "text": "bugprone: bugprone-undelegated-constructor clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-undelegated-constructor clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/undelegated-constructor.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUnhandledExceptionAtNew",
              "shortDescription": {
                "text": "bugprone: bugprone-unhandled-exception-at-new clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-unhandled-exception-at-new clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unhandled-exception-at-new.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUnhandledSelfAssignment",
              "shortDescription": {
                "text": "bugprone: bugprone-unhandled-self-assignment clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-unhandled-self-assignment clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unhandled-self-assignment.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUniquePtrArrayMismatch",
              "shortDescription": {
                "text": "bugprone: bugprone-unique-ptr-array-mismatch clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-unique-ptr-array-mismatch clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unique-ptr-array-mismatch.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUnsafeFunctions",
              "shortDescription": {
                "text": "bugprone: bugprone-unsafe-functions clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-unsafe-functions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unsafe-functions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUnusedLocalNonTrivialVariable",
              "shortDescription": {
                "text": "bugprone: bugprone-unused-local-non-trivial-variable clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-unused-local-non-trivial-variable clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unused-local-non-trivial-variable.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUnusedRaii",
              "shortDescription": {
                "text": "bugprone: bugprone-unused-raii clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-unused-raii clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unused-raii.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUnusedReturnValue",
              "shortDescription": {
                "text": "bugprone: bugprone-unused-return-value clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-unused-return-value clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unused-return-value.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneUseAfterMove",
              "shortDescription": {
                "text": "bugprone: bugprone-use-after-move clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-use-after-move clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/use-after-move.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyBugproneVirtualNearMiss",
              "shortDescription": {
                "text": "bugprone: bugprone-virtual-near-miss clang-tidy check"
              },
              "fullDescription": {
                "text": "bugprone-virtual-near-miss clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/virtual-near-miss.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertArr39C",
              "shortDescription": {
                "text": "cert: cert-arr39-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-arr39-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/arr39-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertCon36C",
              "shortDescription": {
                "text": "cert: cert-con36-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-con36-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/con36-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertCon54Cpp",
              "shortDescription": {
                "text": "cert: cert-con54-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-con54-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/con54-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertCtr56Cpp",
              "shortDescription": {
                "text": "cert: cert-ctr56-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-ctr56-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/ctr56-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertDcl03C",
              "shortDescription": {
                "text": "cert: cert-dcl03-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-dcl03-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl03-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertDcl16C",
              "shortDescription": {
                "text": "cert: cert-dcl16-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-dcl16-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl16-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertDcl37C",
              "shortDescription": {
                "text": "cert: cert-dcl37-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-dcl37-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl37-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertDcl50Cpp",
              "shortDescription": {
                "text": "cert: cert-dcl50-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-dcl50-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl50-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertDcl51Cpp",
              "shortDescription": {
                "text": "cert: cert-dcl51-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-dcl51-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl51-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertDcl54Cpp",
              "shortDescription": {
                "text": "cert: cert-dcl54-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-dcl54-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl54-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertDcl58Cpp",
              "shortDescription": {
                "text": "cert: cert-dcl58-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-dcl58-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl58-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertDcl59Cpp",
              "shortDescription": {
                "text": "cert: cert-dcl59-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-dcl59-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl59-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertEnv33C",
              "shortDescription": {
                "text": "cert: cert-env33-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-env33-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/env33-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertErr09Cpp",
              "shortDescription": {
                "text": "cert: cert-err09-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-err09-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err09-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertErr33C",
              "shortDescription": {
                "text": "cert: cert-err33-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-err33-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err33-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertErr34C",
              "shortDescription": {
                "text": "cert: cert-err34-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-err34-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err34-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertErr52Cpp",
              "shortDescription": {
                "text": "cert: cert-err52-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-err52-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err52-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertErr58Cpp",
              "shortDescription": {
                "text": "cert: cert-err58-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-err58-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err58-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertErr60Cpp",
              "shortDescription": {
                "text": "cert: cert-err60-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-err60-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err60-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertErr61Cpp",
              "shortDescription": {
                "text": "cert: cert-err61-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-err61-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err61-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertExp42C",
              "shortDescription": {
                "text": "cert: cert-exp42-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-exp42-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/exp42-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertFio38C",
              "shortDescription": {
                "text": "cert: cert-fio38-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-fio38-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/fio38-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertFlp30C",
              "shortDescription": {
                "text": "cert: cert-flp30-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-flp30-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/flp30-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertFlp37C",
              "shortDescription": {
                "text": "cert: cert-flp37-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-flp37-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/flp37-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertInt09C",
              "shortDescription": {
                "text": "cert: cert-int09-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-int09-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/int09-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertMem57Cpp",
              "shortDescription": {
                "text": "cert: cert-mem57-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-mem57-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/mem57-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertMsc24C",
              "shortDescription": {
                "text": "cert: cert-msc24-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-msc24-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc24-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertMsc30C",
              "shortDescription": {
                "text": "cert: cert-msc30-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-msc30-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc30-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertMsc32C",
              "shortDescription": {
                "text": "cert: cert-msc32-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-msc32-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc32-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertMsc33C",
              "shortDescription": {
                "text": "cert: cert-msc33-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-msc33-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc33-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertMsc50Cpp",
              "shortDescription": {
                "text": "cert: cert-msc50-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-msc50-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc50-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertMsc51Cpp",
              "shortDescription": {
                "text": "cert: cert-msc51-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-msc51-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc51-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertMsc54Cpp",
              "shortDescription": {
                "text": "cert: cert-msc54-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-msc54-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc54-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertOop11Cpp",
              "shortDescription": {
                "text": "cert: cert-oop11-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-oop11-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop11-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertOop54Cpp",
              "shortDescription": {
                "text": "cert: cert-oop54-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-oop54-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop54-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertOop57Cpp",
              "shortDescription": {
                "text": "cert: cert-oop57-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-oop57-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop57-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertOop58Cpp",
              "shortDescription": {
                "text": "cert: cert-oop58-cpp clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-oop58-cpp clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop58-cpp.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertPos44C",
              "shortDescription": {
                "text": "cert: cert-pos44-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-pos44-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/pos44-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertPos47C",
              "shortDescription": {
                "text": "cert: cert-pos47-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-pos47-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/pos47-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertSig30C",
              "shortDescription": {
                "text": "cert: cert-sig30-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-sig30-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/sig30-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCertStr34C",
              "shortDescription": {
                "text": "cert: cert-str34-c clang-tidy check"
              },
              "fullDescription": {
                "text": "cert-str34-c clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/str34-c.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerApiModelingErrno",
              "shortDescription": {
                "text": "apiModeling: apiModeling.Errno clang static analyzer check"
              },
              "fullDescription": {
                "text": "apiModeling.Errno clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerApiModelingGoogleGTest",
              "shortDescription": {
                "text": "apiModeling: apiModeling.google.GTest clang static analyzer check"
              },
              "fullDescription": {
                "text": "apiModeling.google.GTest clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerApiModelingLlvmCastValue",
              "shortDescription": {
                "text": "apiModeling: apiModeling.llvm.CastValue clang static analyzer check"
              },
              "fullDescription": {
                "text": "apiModeling.llvm.CastValue clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerApiModelingLlvmReturnValue",
              "shortDescription": {
                "text": "apiModeling: apiModeling.llvm.ReturnValue clang static analyzer check"
              },
              "fullDescription": {
                "text": "apiModeling.llvm.ReturnValue clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerApiModelingTrustNonnull",
              "shortDescription": {
                "text": "apiModeling: apiModeling.TrustNonnull clang static analyzer check"
              },
              "fullDescription": {
                "text": "apiModeling.TrustNonnull clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerApiModelingTrustReturnsNonnull",
              "shortDescription": {
                "text": "apiModeling: apiModeling.TrustReturnsNonnull clang static analyzer check"
              },
              "fullDescription": {
                "text": "apiModeling.TrustReturnsNonnull clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreBitwiseShift",
              "shortDescription": {
                "text": "core: core.BitwiseShift clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.BitwiseShift clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreBuiltinBuiltinFunctions",
              "shortDescription": {
                "text": "core: core.builtin.BuiltinFunctions clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.builtin.BuiltinFunctions clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreBuiltinNoReturnFunctions",
              "shortDescription": {
                "text": "core: core.builtin.NoReturnFunctions clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.builtin.NoReturnFunctions clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreCallAndMessage",
              "shortDescription": {
                "text": "core: core.CallAndMessage clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.CallAndMessage clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreCallAndMessageModeling",
              "shortDescription": {
                "text": "core: core.CallAndMessageModeling clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.CallAndMessageModeling clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreDereferenceModeling",
              "shortDescription": {
                "text": "core: core.DereferenceModeling clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.DereferenceModeling clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreDivideZero",
              "shortDescription": {
                "text": "core: core.DivideZero clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.DivideZero clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreDynamicTypePropagation",
              "shortDescription": {
                "text": "core: core.DynamicTypePropagation clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.DynamicTypePropagation clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreNonNullParamChecker",
              "shortDescription": {
                "text": "core: core.NonNullParamChecker clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.NonNullParamChecker clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreNonnilStringConstants",
              "shortDescription": {
                "text": "core: core.NonnilStringConstants clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.NonnilStringConstants clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreNullDereference",
              "shortDescription": {
                "text": "core: core.NullDereference clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.NullDereference clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreStackAddrEscapeBase",
              "shortDescription": {
                "text": "core: core.StackAddrEscapeBase clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.StackAddrEscapeBase clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreStackAddressEscape",
              "shortDescription": {
                "text": "core: core.StackAddressEscape clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.StackAddressEscape clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreUndefinedBinaryOperatorResult",
              "shortDescription": {
                "text": "core: core.UndefinedBinaryOperatorResult clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.UndefinedBinaryOperatorResult clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreUninitializedArraySubscript",
              "shortDescription": {
                "text": "core: core.uninitialized.ArraySubscript clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.uninitialized.ArraySubscript clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreUninitializedAssign",
              "shortDescription": {
                "text": "core: core.uninitialized.Assign clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.uninitialized.Assign clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreUninitializedBranch",
              "shortDescription": {
                "text": "core: core.uninitialized.Branch clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.uninitialized.Branch clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreUninitializedCapturedBlockVariable",
              "shortDescription": {
                "text": "core: core.uninitialized.CapturedBlockVariable clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.uninitialized.CapturedBlockVariable clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreUninitializedNewArraySize",
              "shortDescription": {
                "text": "core: core.uninitialized.NewArraySize clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.uninitialized.NewArraySize clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreUninitializedUndefReturn",
              "shortDescription": {
                "text": "core: core.uninitialized.UndefReturn clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.uninitialized.UndefReturn clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCoreVLASize",
              "shortDescription": {
                "text": "core: core.VLASize clang static analyzer check"
              },
              "fullDescription": {
                "text": "core.VLASize clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusArrayDelete",
              "shortDescription": {
                "text": "cplusplus: cplusplus.ArrayDelete clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.ArrayDelete clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusInnerPointer",
              "shortDescription": {
                "text": "cplusplus: cplusplus.InnerPointer clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.InnerPointer clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusMove",
              "shortDescription": {
                "text": "cplusplus: cplusplus.Move clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.Move clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusNewDelete",
              "shortDescription": {
                "text": "cplusplus: cplusplus.NewDelete clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.NewDelete clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusNewDeleteLeaks",
              "shortDescription": {
                "text": "cplusplus: cplusplus.NewDeleteLeaks clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.NewDeleteLeaks clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusPlacementNew",
              "shortDescription": {
                "text": "cplusplus: cplusplus.PlacementNew clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.PlacementNew clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusPureVirtualCall",
              "shortDescription": {
                "text": "cplusplus: cplusplus.PureVirtualCall clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.PureVirtualCall clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusSelfAssignment",
              "shortDescription": {
                "text": "cplusplus: cplusplus.SelfAssignment clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.SelfAssignment clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusSmartPtrModeling",
              "shortDescription": {
                "text": "cplusplus: cplusplus.SmartPtrModeling clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.SmartPtrModeling clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusStringChecker",
              "shortDescription": {
                "text": "cplusplus: cplusplus.StringChecker clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.StringChecker clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerCplusplusVirtualCallModeling",
              "shortDescription": {
                "text": "cplusplus: cplusplus.VirtualCallModeling clang static analyzer check"
              },
              "fullDescription": {
                "text": "cplusplus.VirtualCallModeling clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerDeadcodeDeadStores",
              "shortDescription": {
                "text": "deadcode: deadcode.DeadStores clang static analyzer check"
              },
              "fullDescription": {
                "text": "deadcode.DeadStores clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerFuchsiaHandleChecker",
              "shortDescription": {
                "text": "fuchsia: fuchsia.HandleChecker clang static analyzer check"
              },
              "fullDescription": {
                "text": "fuchsia.HandleChecker clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerNullabilityNullPassedToNonnull",
              "shortDescription": {
                "text": "nullability: nullability.NullPassedToNonnull clang static analyzer check"
              },
              "fullDescription": {
                "text": "nullability.NullPassedToNonnull clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerNullabilityNullReturnedFromNonnull",
              "shortDescription": {
                "text": "nullability: nullability.NullReturnedFromNonnull clang static analyzer check"
              },
              "fullDescription": {
                "text": "nullability.NullReturnedFromNonnull clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerNullabilityNullabilityBase",
              "shortDescription": {
                "text": "nullability: nullability.NullabilityBase clang static analyzer check"
              },
              "fullDescription": {
                "text": "nullability.NullabilityBase clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerNullabilityNullableDereferenced",
              "shortDescription": {
                "text": "nullability: nullability.NullableDereferenced clang static analyzer check"
              },
              "fullDescription": {
                "text": "nullability.NullableDereferenced clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerNullabilityNullablePassedToNonnull",
              "shortDescription": {
                "text": "nullability: nullability.NullablePassedToNonnull clang static analyzer check"
              },
              "fullDescription": {
                "text": "nullability.NullablePassedToNonnull clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerNullabilityNullableReturnedFromNonnull",
              "shortDescription": {
                "text": "nullability: nullability.NullableReturnedFromNonnull clang static analyzer check"
              },
              "fullDescription": {
                "text": "nullability.NullableReturnedFromNonnull clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinCoreEnumCastOutOfRange",
              "shortDescription": {
                "text": "optin: optin.core.EnumCastOutOfRange clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.core.EnumCastOutOfRange clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinCplusplusUninitializedObject",
              "shortDescription": {
                "text": "optin: optin.cplusplus.UninitializedObject clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.cplusplus.UninitializedObject clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinCplusplusVirtualCall",
              "shortDescription": {
                "text": "optin: optin.cplusplus.VirtualCall clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.cplusplus.VirtualCall clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinMpiMPIChecker",
              "shortDescription": {
                "text": "optin: optin.mpi.MPI-Checker clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.mpi.MPI-Checker clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityEmptyLocalizationContextChecker",
              "shortDescription": {
                "text": "optin: optin.osx.cocoa.localizability.EmptyLocalizationContextChecker clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityNonLocalizedStringChecker",
              "shortDescription": {
                "text": "optin: optin.osx.cocoa.localizability.NonLocalizedStringChecker clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.osx.cocoa.localizability.NonLocalizedStringChecker clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinOsxOSObjectCStyleCast",
              "shortDescription": {
                "text": "optin: optin.osx.OSObjectCStyleCast clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.osx.OSObjectCStyleCast clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinPerformanceGCDAntipattern",
              "shortDescription": {
                "text": "optin: optin.performance.GCDAntipattern clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.performance.GCDAntipattern clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinPerformancePadding",
              "shortDescription": {
                "text": "optin: optin.performance.Padding clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.performance.Padding clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinPortabilityUnixAPI",
              "shortDescription": {
                "text": "optin: optin.portability.UnixAPI clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.portability.UnixAPI clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinTaintGenericTaint",
              "shortDescription": {
                "text": "optin: optin.taint.GenericTaint clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.taint.GenericTaint clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinTaintTaintPropagation",
              "shortDescription": {
                "text": "optin: optin.taint.TaintPropagation clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.taint.TaintPropagation clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinTaintTaintedAlloc",
              "shortDescription": {
                "text": "optin: optin.taint.TaintedAlloc clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.taint.TaintedAlloc clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOptinTaintTaintedDiv",
              "shortDescription": {
                "text": "optin: optin.taint.TaintedDiv clang static analyzer check"
              },
              "fullDescription": {
                "text": "optin.taint.TaintedDiv clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxAPI",
              "shortDescription": {
                "text": "osx: osx.API clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.API clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaAtSync",
              "shortDescription": {
                "text": "osx: osx.cocoa.AtSync clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.AtSync clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaAutoreleaseWrite",
              "shortDescription": {
                "text": "osx: osx.cocoa.AutoreleaseWrite clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.AutoreleaseWrite clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaClassRelease",
              "shortDescription": {
                "text": "osx: osx.cocoa.ClassRelease clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.ClassRelease clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaDealloc",
              "shortDescription": {
                "text": "osx: osx.cocoa.Dealloc clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.Dealloc clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaIncompatibleMethodTypes",
              "shortDescription": {
                "text": "osx: osx.cocoa.IncompatibleMethodTypes clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.IncompatibleMethodTypes clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaLoops",
              "shortDescription": {
                "text": "osx: osx.cocoa.Loops clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.Loops clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaMissingSuperCall",
              "shortDescription": {
                "text": "osx: osx.cocoa.MissingSuperCall clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.MissingSuperCall clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaNSAutoreleasePool",
              "shortDescription": {
                "text": "osx: osx.cocoa.NSAutoreleasePool clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.NSAutoreleasePool clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaNSError",
              "shortDescription": {
                "text": "osx: osx.cocoa.NSError clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.NSError clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaNilArg",
              "shortDescription": {
                "text": "osx: osx.cocoa.NilArg clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.NilArg clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaNonNilReturnValue",
              "shortDescription": {
                "text": "osx: osx.cocoa.NonNilReturnValue clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.NonNilReturnValue clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaObjCGenerics",
              "shortDescription": {
                "text": "osx: osx.cocoa.ObjCGenerics clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.ObjCGenerics clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaRetainCount",
              "shortDescription": {
                "text": "osx: osx.cocoa.RetainCount clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.RetainCount clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaRetainCountBase",
              "shortDescription": {
                "text": "osx: osx.cocoa.RetainCountBase clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.RetainCountBase clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaRunLoopAutoreleaseLeak",
              "shortDescription": {
                "text": "osx: osx.cocoa.RunLoopAutoreleaseLeak clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.RunLoopAutoreleaseLeak clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaSelfInit",
              "shortDescription": {
                "text": "osx: osx.cocoa.SelfInit clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.SelfInit clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaSuperDealloc",
              "shortDescription": {
                "text": "osx: osx.cocoa.SuperDealloc clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.SuperDealloc clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaUnusedIvars",
              "shortDescription": {
                "text": "osx: osx.cocoa.UnusedIvars clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.UnusedIvars clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCocoaVariadicMethodTypes",
              "shortDescription": {
                "text": "osx: osx.cocoa.VariadicMethodTypes clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.cocoa.VariadicMethodTypes clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCoreFoundationCFError",
              "shortDescription": {
                "text": "osx: osx.coreFoundation.CFError clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.coreFoundation.CFError clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCoreFoundationCFNumber",
              "shortDescription": {
                "text": "osx: osx.coreFoundation.CFNumber clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.coreFoundation.CFNumber clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCoreFoundationCFRetainRelease",
              "shortDescription": {
                "text": "osx: osx.coreFoundation.CFRetainRelease clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.coreFoundation.CFRetainRelease clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersOutOfBounds",
              "shortDescription": {
                "text": "osx: osx.coreFoundation.containers.OutOfBounds clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.coreFoundation.containers.OutOfBounds clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersPointerSizedValues",
              "shortDescription": {
                "text": "osx: osx.coreFoundation.containers.PointerSizedValues clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.coreFoundation.containers.PointerSizedValues clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxMIG",
              "shortDescription": {
                "text": "osx: osx.MIG clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.MIG clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxNSOrCFErrorDerefChecker",
              "shortDescription": {
                "text": "osx: osx.NSOrCFErrorDerefChecker clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.NSOrCFErrorDerefChecker clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxNumberObjectConversion",
              "shortDescription": {
                "text": "osx: osx.NumberObjectConversion clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.NumberObjectConversion clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxOSObjectRetainCount",
              "shortDescription": {
                "text": "osx: osx.OSObjectRetainCount clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.OSObjectRetainCount clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxObjCProperty",
              "shortDescription": {
                "text": "osx: osx.ObjCProperty clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.ObjCProperty clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerOsxSecKeychainAPI",
              "shortDescription": {
                "text": "osx: osx.SecKeychainAPI clang static analyzer check"
              },
              "fullDescription": {
                "text": "osx.SecKeychainAPI clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityCertEnvInvalidPtr",
              "shortDescription": {
                "text": "security: security.cert.env.InvalidPtr clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.cert.env.InvalidPtr clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityFloatLoopCounter",
              "shortDescription": {
                "text": "security: security.FloatLoopCounter clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.FloatLoopCounter clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcmp",
              "shortDescription": {
                "text": "security: security.insecureAPI.bcmp clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.bcmp clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcopy",
              "shortDescription": {
                "text": "security: security.insecureAPI.bcopy clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.bcopy clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIBzero",
              "shortDescription": {
                "text": "security: security.insecureAPI.bzero clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.bzero clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIDecodeValueOfObjCType",
              "shortDescription": {
                "text": "security: security.insecureAPI.decodeValueOfObjCType clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.decodeValueOfObjCType clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIDeprecatedOrUnsafeBufferHandling",
              "shortDescription": {
                "text": "security: security.insecureAPI.DeprecatedOrUnsafeBufferHandling clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.DeprecatedOrUnsafeBufferHandling clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIGetpw",
              "shortDescription": {
                "text": "security: security.insecureAPI.getpw clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.getpw clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIGets",
              "shortDescription": {
                "text": "security: security.insecureAPI.gets clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.gets clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIMkstemp",
              "shortDescription": {
                "text": "security: security.insecureAPI.mkstemp clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.mkstemp clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIMktemp",
              "shortDescription": {
                "text": "security: security.insecureAPI.mktemp clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.mktemp clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIRand",
              "shortDescription": {
                "text": "security: security.insecureAPI.rand clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.rand clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPISecuritySyntaxChecker",
              "shortDescription": {
                "text": "security: security.insecureAPI.SecuritySyntaxChecker clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.SecuritySyntaxChecker clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIStrcpy",
              "shortDescription": {
                "text": "security: security.insecureAPI.strcpy clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.strcpy clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIUncheckedReturn",
              "shortDescription": {
                "text": "security: security.insecureAPI.UncheckedReturn clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.UncheckedReturn clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIVfork",
              "shortDescription": {
                "text": "security: security.insecureAPI.vfork clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.insecureAPI.vfork clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityMmapWriteExec",
              "shortDescription": {
                "text": "security: security.MmapWriteExec clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.MmapWriteExec clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityPointerSub",
              "shortDescription": {
                "text": "security: security.PointerSub clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.PointerSub clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecurityPutenvStackArray",
              "shortDescription": {
                "text": "security: security.PutenvStackArray clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.PutenvStackArray clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerSecuritySetgidSetuidOrder",
              "shortDescription": {
                "text": "security: security.SetgidSetuidOrder clang static analyzer check"
              },
              "fullDescription": {
                "text": "security.SetgidSetuidOrder clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixAPI",
              "shortDescription": {
                "text": "unix: unix.API clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.API clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixBlockInCriticalSection",
              "shortDescription": {
                "text": "unix: unix.BlockInCriticalSection clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.BlockInCriticalSection clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixChroot",
              "shortDescription": {
                "text": "unix: unix.Chroot clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.Chroot clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixCstringBadSizeArg",
              "shortDescription": {
                "text": "unix: unix.cstring.BadSizeArg clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.cstring.BadSizeArg clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixCstringCStringModeling",
              "shortDescription": {
                "text": "unix: unix.cstring.CStringModeling clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.cstring.CStringModeling clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixCstringNotNullTerminated",
              "shortDescription": {
                "text": "unix: unix.cstring.NotNullTerminated clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.cstring.NotNullTerminated clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixCstringNullArg",
              "shortDescription": {
                "text": "unix: unix.cstring.NullArg clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.cstring.NullArg clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixDynamicMemoryModeling",
              "shortDescription": {
                "text": "unix: unix.DynamicMemoryModeling clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.DynamicMemoryModeling clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixErrno",
              "shortDescription": {
                "text": "unix: unix.Errno clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.Errno clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixMalloc",
              "shortDescription": {
                "text": "unix: unix.Malloc clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.Malloc clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixMallocSizeof",
              "shortDescription": {
                "text": "unix: unix.MallocSizeof clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.MallocSizeof clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixMismatchedDeallocator",
              "shortDescription": {
                "text": "unix: unix.MismatchedDeallocator clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.MismatchedDeallocator clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixStdCLibraryFunctions",
              "shortDescription": {
                "text": "unix: unix.StdCLibraryFunctions clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.StdCLibraryFunctions clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixStream",
              "shortDescription": {
                "text": "unix: unix.Stream clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.Stream clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerUnixVfork",
              "shortDescription": {
                "text": "unix: unix.Vfork clang static analyzer check"
              },
              "fullDescription": {
                "text": "unix.Vfork clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerValistCopyToSelf",
              "shortDescription": {
                "text": "valist: valist.CopyToSelf clang static analyzer check"
              },
              "fullDescription": {
                "text": "valist.CopyToSelf clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerValistUninitialized",
              "shortDescription": {
                "text": "valist: valist.Uninitialized clang static analyzer check"
              },
              "fullDescription": {
                "text": "valist.Uninitialized clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerValistUnterminated",
              "shortDescription": {
                "text": "valist: valist.Unterminated clang static analyzer check"
              },
              "fullDescription": {
                "text": "valist.Unterminated clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerValistValistBase",
              "shortDescription": {
                "text": "valist: valist.ValistBase clang static analyzer check"
              },
              "fullDescription": {
                "text": "valist.ValistBase clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerWebkitNoUncountedMemberChecker",
              "shortDescription": {
                "text": "webkit: webkit.NoUncountedMemberChecker clang static analyzer check"
              },
              "fullDescription": {
                "text": "webkit.NoUncountedMemberChecker clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerWebkitRefCntblBaseVirtualDtor",
              "shortDescription": {
                "text": "webkit: webkit.RefCntblBaseVirtualDtor clang static analyzer check"
              },
              "fullDescription": {
                "text": "webkit.RefCntblBaseVirtualDtor clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangAnalyzerWebkitUncountedLambdaCapturesChecker",
              "shortDescription": {
                "text": "webkit: webkit.UncountedLambdaCapturesChecker clang static analyzer check"
              },
              "fullDescription": {
                "text": "webkit.UncountedLambdaCapturesChecker clang static analyzer check · <a href=\"https://clang-analyzer.llvm.org/available_checks.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangStaticAnalyzer"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAarch64SmeAttributes",
              "shortDescription": {
                "text": "aarch64-sme-attributes clang diagnostic"
              },
              "fullDescription": {
                "text": "-Waarch64-sme-attributes clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#waarch64-sme-attributes\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAbsoluteValue",
              "shortDescription": {
                "text": "absolute-value clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wabsolute-value clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wabsolute-value\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAbstractFinalClass",
              "shortDescription": {
                "text": "abstract-final-class clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wabstract-final-class clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wabstract-final-class\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAbstractVbaseInit",
              "shortDescription": {
                "text": "abstract-vbase-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wabstract-vbase-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wabstract-vbase-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAddressOfPackedMember",
              "shortDescription": {
                "text": "address-of-packed-member clang diagnostic"
              },
              "fullDescription": {
                "text": "-Waddress-of-packed-member clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#waddress-of-packed-member\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAddressOfTemporary",
              "shortDescription": {
                "text": "address-of-temporary clang diagnostic"
              },
              "fullDescription": {
                "text": "-Waddress-of-temporary clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#waddress-of-temporary\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAixCompat",
              "shortDescription": {
                "text": "aix-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Waix-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#waix-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAliasTemplateInDeclarationName",
              "shortDescription": {
                "text": "alias-template-in-declaration-name clang diagnostic"
              },
              "fullDescription": {
                "text": "-Walias-template-in-declaration-name clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#walias-template-in-declaration-name\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAlignMismatch",
              "shortDescription": {
                "text": "align-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Walign-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#walign-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAlloca",
              "shortDescription": {
                "text": "alloca clang diagnostic"
              },
              "fullDescription": {
                "text": "-Walloca clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#walloca\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAllocaWithAlignAlignof",
              "shortDescription": {
                "text": "alloca-with-align-alignof clang diagnostic"
              },
              "fullDescription": {
                "text": "-Walloca-with-align-alignof clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#walloca-with-align-alignof\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAlwaysInlineCoroutine",
              "shortDescription": {
                "text": "always-inline-coroutine clang diagnostic"
              },
              "fullDescription": {
                "text": "-Walways-inline-coroutine clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#walways-inline-coroutine\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAmbiguousDelete",
              "shortDescription": {
                "text": "ambiguous-delete clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wambiguous-delete clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-delete\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAmbiguousEllipsis",
              "shortDescription": {
                "text": "ambiguous-ellipsis clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wambiguous-ellipsis clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-ellipsis\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAmbiguousMacro",
              "shortDescription": {
                "text": "ambiguous-macro clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wambiguous-macro clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-macro\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAmbiguousMemberTemplate",
              "shortDescription": {
                "text": "ambiguous-member-template clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wambiguous-member-template clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-member-template\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAmbiguousReversedOperator",
              "shortDescription": {
                "text": "ambiguous-reversed-operator clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wambiguous-reversed-operator clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-reversed-operator\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAnalyzerIncompatiblePlugin",
              "shortDescription": {
                "text": "analyzer-incompatible-plugin clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wanalyzer-incompatible-plugin clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wanalyzer-incompatible-plugin\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAndroidUnversionedFallback",
              "shortDescription": {
                "text": "android-unversioned-fallback clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wandroid-unversioned-fallback clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wandroid-unversioned-fallback\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAnonEnumEnumConversion",
              "shortDescription": {
                "text": "anon-enum-enum-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wanon-enum-enum-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wanon-enum-enum-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAnonymousPackParens",
              "shortDescription": {
                "text": "anonymous-pack-parens clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wanonymous-pack-parens clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wanonymous-pack-parens\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArcBridgeCastsDisallowedInNonarc",
              "shortDescription": {
                "text": "arc-bridge-casts-disallowed-in-nonarc clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warc-bridge-casts-disallowed-in-nonarc clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warc-bridge-casts-disallowed-in-nonarc\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArcMaybeRepeatedUseOfWeak",
              "shortDescription": {
                "text": "arc-maybe-repeated-use-of-weak clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warc-maybe-repeated-use-of-weak clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warc-maybe-repeated-use-of-weak\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArcNonPodMemaccess",
              "shortDescription": {
                "text": "arc-non-pod-memaccess clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warc-non-pod-memaccess clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warc-non-pod-memaccess\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArcPerformSelectorLeaks",
              "shortDescription": {
                "text": "arc-performSelector-leaks clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warc-performSelector-leaks clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warc-performSelector-leaks\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArcRepeatedUseOfWeak",
              "shortDescription": {
                "text": "arc-repeated-use-of-weak clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warc-repeated-use-of-weak clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warc-repeated-use-of-weak\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArcRetainCycles",
              "shortDescription": {
                "text": "arc-retain-cycles clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warc-retain-cycles clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warc-retain-cycles\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArcUnsafeRetainedAssign",
              "shortDescription": {
                "text": "arc-unsafe-retained-assign clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warc-unsafe-retained-assign clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warc-unsafe-retained-assign\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArgumentOutsideRange",
              "shortDescription": {
                "text": "argument-outside-range clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wargument-outside-range clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wargument-outside-range\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArgumentUndefinedBehaviour",
              "shortDescription": {
                "text": "argument-undefined-behaviour clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wargument-undefined-behaviour clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wargument-undefined-behaviour\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArmInterruptVfpClobber",
              "shortDescription": {
                "text": "arm-interrupt-vfp-clobber clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warm-interrupt-vfp-clobber clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warm-interrupt-vfp-clobber\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArrayBounds",
              "shortDescription": {
                "text": "array-bounds clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warray-bounds clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warray-bounds\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArrayBoundsPointerArithmetic",
              "shortDescription": {
                "text": "array-bounds-pointer-arithmetic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warray-bounds-pointer-arithmetic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warray-bounds-pointer-arithmetic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArrayCompare",
              "shortDescription": {
                "text": "array-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warray-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warray-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticArrayParameter",
              "shortDescription": {
                "text": "array-parameter clang diagnostic"
              },
              "fullDescription": {
                "text": "-Warray-parameter clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#warray-parameter\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAsmOperandWidths",
              "shortDescription": {
                "text": "asm-operand-widths clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wasm-operand-widths clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wasm-operand-widths\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAssignEnum",
              "shortDescription": {
                "text": "assign-enum clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wassign-enum clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wassign-enum\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAssume",
              "shortDescription": {
                "text": "assume clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wassume clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wassume\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAtProtocol",
              "shortDescription": {
                "text": "at-protocol clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wat-protocol clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wat-protocol\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAtimportInFrameworkHeader",
              "shortDescription": {
                "text": "atimport-in-framework-header clang diagnostic"
              },
              "fullDescription": {
                "text": "-Watimport-in-framework-header clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#watimport-in-framework-header\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAtomicAccess",
              "shortDescription": {
                "text": "atomic-access clang diagnostic"
              },
              "fullDescription": {
                "text": "-Watomic-access clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#watomic-access\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAtomicAlignment",
              "shortDescription": {
                "text": "atomic-alignment clang diagnostic"
              },
              "fullDescription": {
                "text": "-Watomic-alignment clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#watomic-alignment\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAtomicImplicitSeqCst",
              "shortDescription": {
                "text": "atomic-implicit-seq-cst clang diagnostic"
              },
              "fullDescription": {
                "text": "-Watomic-implicit-seq-cst clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#watomic-implicit-seq-cst\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAtomicMemoryOrdering",
              "shortDescription": {
                "text": "atomic-memory-ordering clang diagnostic"
              },
              "fullDescription": {
                "text": "-Watomic-memory-ordering clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#watomic-memory-ordering\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAtomicPropertyWithUserDefinedAccessor",
              "shortDescription": {
                "text": "atomic-property-with-user-defined-accessor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Watomic-property-with-user-defined-accessor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#watomic-property-with-user-defined-accessor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAttributePackedForBitfield",
              "shortDescription": {
                "text": "attribute-packed-for-bitfield clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wattribute-packed-for-bitfield clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wattribute-packed-for-bitfield\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAttributeWarning",
              "shortDescription": {
                "text": "attribute-warning clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wattribute-warning clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wattribute-warning\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAutoDeclExtensions",
              "shortDescription": {
                "text": "auto-decl-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wauto-decl-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wauto-decl-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAutoDisableVptrSanitizer",
              "shortDescription": {
                "text": "auto-disable-vptr-sanitizer clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wauto-disable-vptr-sanitizer clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wauto-disable-vptr-sanitizer\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAutoImport",
              "shortDescription": {
                "text": "auto-import clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wauto-import clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wauto-import\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAutoStorageClass",
              "shortDescription": {
                "text": "auto-storage-class clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wauto-storage-class clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wauto-storage-class\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAutoVarId",
              "shortDescription": {
                "text": "auto-var-id clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wauto-var-id clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wauto-var-id\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAvailability",
              "shortDescription": {
                "text": "availability clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wavailability clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wavailability\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticAvrRtlibLinkingQuirks",
              "shortDescription": {
                "text": "avr-rtlib-linking-quirks clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wavr-rtlib-linking-quirks clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wavr-rtlib-linking-quirks\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBackslashNewlineEscape",
              "shortDescription": {
                "text": "backslash-newline-escape clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbackslash-newline-escape clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbackslash-newline-escape\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBadFunctionCast",
              "shortDescription": {
                "text": "bad-function-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbad-function-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbad-function-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBindToTemporaryCopy",
              "shortDescription": {
                "text": "bind-to-temporary-copy clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbind-to-temporary-copy clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbind-to-temporary-copy\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBindingInCondition",
              "shortDescription": {
                "text": "binding-in-condition clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbinding-in-condition clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbinding-in-condition\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBitIntExtension",
              "shortDescription": {
                "text": "bit-int-extension clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbit-int-extension clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbit-int-extension\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBitfieldConstantConversion",
              "shortDescription": {
                "text": "bitfield-constant-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbitfield-constant-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-constant-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBitfieldEnumConversion",
              "shortDescription": {
                "text": "bitfield-enum-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbitfield-enum-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-enum-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBitfieldWidth",
              "shortDescription": {
                "text": "bitfield-width clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbitfield-width clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-width\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBitwiseConditionalParentheses",
              "shortDescription": {
                "text": "bitwise-conditional-parentheses clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbitwise-conditional-parentheses clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-conditional-parentheses\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBitwiseInsteadOfLogical",
              "shortDescription": {
                "text": "bitwise-instead-of-logical clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbitwise-instead-of-logical clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-instead-of-logical\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBitwiseOpParentheses",
              "shortDescription": {
                "text": "bitwise-op-parentheses clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbitwise-op-parentheses clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-op-parentheses\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBlockCaptureAutoreleasing",
              "shortDescription": {
                "text": "block-capture-autoreleasing clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wblock-capture-autoreleasing clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wblock-capture-autoreleasing\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBoolConversion",
              "shortDescription": {
                "text": "bool-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbool-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbool-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBoolOperation",
              "shortDescription": {
                "text": "bool-operation clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbool-operation clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbool-operation\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBoundsSafetyCountedByEltTypeUnknownSize",
              "shortDescription": {
                "text": "bounds-safety-counted-by-elt-type-unknown-size clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbounds-safety-counted-by-elt-type-unknown-size clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbounds-safety-counted-by-elt-type-unknown-size\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBracedScalarInit",
              "shortDescription": {
                "text": "braced-scalar-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbraced-scalar-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbraced-scalar-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBranchProtection",
              "shortDescription": {
                "text": "branch-protection clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbranch-protection clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbranch-protection\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBridgeCast",
              "shortDescription": {
                "text": "bridge-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbridge-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbridge-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBuiltinAssumeAlignedAlignment",
              "shortDescription": {
                "text": "builtin-assume-aligned-alignment clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbuiltin-assume-aligned-alignment clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-assume-aligned-alignment\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBuiltinMacroRedefined",
              "shortDescription": {
                "text": "builtin-macro-redefined clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbuiltin-macro-redefined clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-macro-redefined\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBuiltinMemcpyChkSize",
              "shortDescription": {
                "text": "builtin-memcpy-chk-size clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbuiltin-memcpy-chk-size clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-memcpy-chk-size\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticBuiltinRequiresHeader",
              "shortDescription": {
                "text": "builtin-requires-header clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wbuiltin-requires-header clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-requires-header\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticC11Extensions",
              "shortDescription": {
                "text": "c11-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc11-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc11-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticC23Compat",
              "shortDescription": {
                "text": "c23-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc23-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc23-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticC23Extensions",
              "shortDescription": {
                "text": "c23-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc23-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc23-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticC2xCompat",
              "shortDescription": {
                "text": "c2x-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc2x-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc2x-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticC2xExtensions",
              "shortDescription": {
                "text": "c2x-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc2x-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc2x-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticC2yExtensions",
              "shortDescription": {
                "text": "c2y-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc2y-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc2y-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticC99Compat",
              "shortDescription": {
                "text": "c99-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc99-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc99-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticC99Designator",
              "shortDescription": {
                "text": "c99-designator clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc99-designator clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc99-designator\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticC99Extensions",
              "shortDescription": {
                "text": "c99-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc99-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc99-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCFStringLiteral",
              "shortDescription": {
                "text": "CFString-literal clang diagnostic"
              },
              "fullDescription": {
                "text": "-WCFString-literal clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wCFString-literal\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCallToPureVirtualFromCtorDtor",
              "shortDescription": {
                "text": "call-to-pure-virtual-from-ctor-dtor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcall-to-pure-virtual-from-ctor-dtor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcall-to-pure-virtual-from-ctor-dtor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCalledOnceParameter",
              "shortDescription": {
                "text": "called-once-parameter clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcalled-once-parameter clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcalled-once-parameter\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCastAlign",
              "shortDescription": {
                "text": "cast-align clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcast-align clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcast-align\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCastCallingConvention",
              "shortDescription": {
                "text": "cast-calling-convention clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcast-calling-convention clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcast-calling-convention\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCastFunctionType",
              "shortDescription": {
                "text": "cast-function-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcast-function-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcast-function-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCastFunctionTypeMismatch",
              "shortDescription": {
                "text": "cast-function-type-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcast-function-type-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcast-function-type-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCastFunctionTypeStrict",
              "shortDescription": {
                "text": "cast-function-type-strict clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcast-function-type-strict clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcast-function-type-strict\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCastOfSelType",
              "shortDescription": {
                "text": "cast-of-sel-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcast-of-sel-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcast-of-sel-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCastQual",
              "shortDescription": {
                "text": "cast-qual clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcast-qual clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcast-qual\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCastQualUnrelated",
              "shortDescription": {
                "text": "cast-qual-unrelated clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcast-qual-unrelated clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcast-qual-unrelated\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCharSubscripts",
              "shortDescription": {
                "text": "char-subscripts clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wchar-subscripts clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wchar-subscripts\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticClangClPch",
              "shortDescription": {
                "text": "clang-cl-pch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wclang-cl-pch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wclang-cl-pch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticClassConversion",
              "shortDescription": {
                "text": "class-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wclass-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wclass-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticClassVarargs",
              "shortDescription": {
                "text": "class-varargs clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wclass-varargs clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wclass-varargs\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCmseUnionLeak",
              "shortDescription": {
                "text": "cmse-union-leak clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcmse-union-leak clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcmse-union-leak\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticComma",
              "shortDescription": {
                "text": "comma clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcomma clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcomma\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticComment",
              "shortDescription": {
                "text": "comment clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcomment clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcomment\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCompareDistinctPointerTypes",
              "shortDescription": {
                "text": "compare-distinct-pointer-types clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcompare-distinct-pointer-types clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcompare-distinct-pointer-types\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCompletionHandler",
              "shortDescription": {
                "text": "completion-handler clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcompletion-handler clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcompletion-handler\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticComplexComponentInit",
              "shortDescription": {
                "text": "complex-component-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcomplex-component-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcomplex-component-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCompoundTokenSplit",
              "shortDescription": {
                "text": "compound-token-split clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcompound-token-split clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCompoundTokenSplitByMacro",
              "shortDescription": {
                "text": "compound-token-split-by-macro clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcompound-token-split-by-macro clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split-by-macro\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCompoundTokenSplitBySpace",
              "shortDescription": {
                "text": "compound-token-split-by-space clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcompound-token-split-by-space clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split-by-space\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticConditionalTypeMismatch",
              "shortDescription": {
                "text": "conditional-type-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wconditional-type-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wconditional-type-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticConditionalUninitialized",
              "shortDescription": {
                "text": "conditional-uninitialized clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wconditional-uninitialized clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wconditional-uninitialized\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticConfigMacros",
              "shortDescription": {
                "text": "config-macros clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wconfig-macros clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wconfig-macros\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticConstantConversion",
              "shortDescription": {
                "text": "constant-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wconstant-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wconstant-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticConstantEvaluated",
              "shortDescription": {
                "text": "constant-evaluated clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wconstant-evaluated clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wconstant-evaluated\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticConstantLogicalOperand",
              "shortDescription": {
                "text": "constant-logical-operand clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wconstant-logical-operand clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wconstant-logical-operand\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticConstexprNotConst",
              "shortDescription": {
                "text": "constexpr-not-const clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wconstexpr-not-const clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wconstexpr-not-const\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticConsumed",
              "shortDescription": {
                "text": "consumed clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wconsumed clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wconsumed\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticConversion",
              "shortDescription": {
                "text": "conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wconversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wconversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCoroNonAlignedAllocationFunction",
              "shortDescription": {
                "text": "coro-non-aligned-allocation-function clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcoro-non-aligned-allocation-function clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcoro-non-aligned-allocation-function\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCoroutineMissingUnhandledException",
              "shortDescription": {
                "text": "coroutine-missing-unhandled-exception clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcoroutine-missing-unhandled-exception clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcoroutine-missing-unhandled-exception\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCoveredSwitchDefault",
              "shortDescription": {
                "text": "covered-switch-default clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcovered-switch-default clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcovered-switch-default\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp11Compat",
              "shortDescription": {
                "text": "c++11-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++11-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp11CompatDeprecatedWritableStrings",
              "shortDescription": {
                "text": "c++11-compat-deprecated-writable-strings clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++11-compat-deprecated-writable-strings clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-deprecated-writable-strings\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp11CompatPedantic",
              "shortDescription": {
                "text": "c++11-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++11-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp11CompatReservedUserDefinedLiteral",
              "shortDescription": {
                "text": "c++11-compat-reserved-user-defined-literal clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++11-compat-reserved-user-defined-literal clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-reserved-user-defined-literal\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp11Extensions",
              "shortDescription": {
                "text": "c++11-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++11-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-11-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp11ExtraSemi",
              "shortDescription": {
                "text": "c++11-extra-semi clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++11-extra-semi clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-11-extra-semi\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp11InlineNamespace",
              "shortDescription": {
                "text": "c++11-inline-namespace clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++11-inline-namespace clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-11-inline-namespace\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp11LongLong",
              "shortDescription": {
                "text": "c++11-long-long clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++11-long-long clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-11-long-long\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp11Narrowing",
              "shortDescription": {
                "text": "c++11-narrowing clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++11-narrowing clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-11-narrowing\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp11NarrowingConstReference",
              "shortDescription": {
                "text": "c++11-narrowing-const-reference clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++11-narrowing-const-reference clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-11-narrowing-const-reference\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp14AttributeExtensions",
              "shortDescription": {
                "text": "c++14-attribute-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++14-attribute-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-14-attribute-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp14BinaryLiteral",
              "shortDescription": {
                "text": "c++14-binary-literal clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++14-binary-literal clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-14-binary-literal\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp14Compat",
              "shortDescription": {
                "text": "c++14-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++14-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-14-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp14CompatPedantic",
              "shortDescription": {
                "text": "c++14-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++14-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-14-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp14Extensions",
              "shortDescription": {
                "text": "c++14-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++14-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-14-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp17AttributeExtensions",
              "shortDescription": {
                "text": "c++17-attribute-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++17-attribute-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-17-attribute-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp17Compat",
              "shortDescription": {
                "text": "c++17-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++17-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-17-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp17CompatMangling",
              "shortDescription": {
                "text": "c++17-compat-mangling clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++17-compat-mangling clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-17-compat-mangling\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp17CompatPedantic",
              "shortDescription": {
                "text": "c++17-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++17-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-17-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp17Extensions",
              "shortDescription": {
                "text": "c++17-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++17-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-17-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp20AttributeExtensions",
              "shortDescription": {
                "text": "c++20-attribute-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++20-attribute-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-20-attribute-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp20Compat",
              "shortDescription": {
                "text": "c++20-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++20-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-20-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp20CompatPedantic",
              "shortDescription": {
                "text": "c++20-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++20-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-20-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp20Designator",
              "shortDescription": {
                "text": "c++20-designator clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++20-designator clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-20-designator\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp20Extensions",
              "shortDescription": {
                "text": "c++20-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++20-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-20-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp23AttributeExtensions",
              "shortDescription": {
                "text": "c++23-attribute-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++23-attribute-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-23-attribute-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp23Compat",
              "shortDescription": {
                "text": "c++23-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++23-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-23-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp23Extensions",
              "shortDescription": {
                "text": "c++23-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++23-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-23-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp23LambdaAttributes",
              "shortDescription": {
                "text": "c++23-lambda-attributes clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++23-lambda-attributes clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-23-lambda-attributes\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp26Extensions",
              "shortDescription": {
                "text": "c++26-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++26-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-26-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp2aCompatPedantic",
              "shortDescription": {
                "text": "c++2a-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++2a-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-2a-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp2aExtensions",
              "shortDescription": {
                "text": "c++2a-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++2a-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-2a-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp2bExtensions",
              "shortDescription": {
                "text": "c++2b-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++2b-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-2b-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp2cCompat",
              "shortDescription": {
                "text": "c++2c-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++2c-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-2c-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp2cExtensions",
              "shortDescription": {
                "text": "c++2c-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++2c-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-2c-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98Compat",
              "shortDescription": {
                "text": "c++98-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98CompatBindToTemporaryCopy",
              "shortDescription": {
                "text": "c++98-compat-bind-to-temporary-copy clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-compat-bind-to-temporary-copy clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-bind-to-temporary-copy\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98CompatExtraSemi",
              "shortDescription": {
                "text": "c++98-compat-extra-semi clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-compat-extra-semi clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-extra-semi\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98CompatLocalTypeTemplateArgs",
              "shortDescription": {
                "text": "c++98-compat-local-type-template-args clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-compat-local-type-template-args clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-local-type-template-args\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98CompatPedantic",
              "shortDescription": {
                "text": "c++98-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98CompatUnnamedTypeTemplateArgs",
              "shortDescription": {
                "text": "c++98-compat-unnamed-type-template-args clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-compat-unnamed-type-template-args clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-unnamed-type-template-args\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98Cpp11Compat",
              "shortDescription": {
                "text": "c++98-c++11-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-c++11-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98Cpp11CompatBinaryLiteral",
              "shortDescription": {
                "text": "c++98-c++11-compat-binary-literal clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-c++11-compat-binary-literal clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-compat-binary-literal\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98Cpp11CompatPedantic",
              "shortDescription": {
                "text": "c++98-c++11-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-c++11-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Compat",
              "shortDescription": {
                "text": "c++98-c++11-c++14-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-c++11-c++14-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14CompatPedantic",
              "shortDescription": {
                "text": "c++98-c++11-c++14-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-c++11-c++14-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17Compat",
              "shortDescription": {
                "text": "c++98-c++11-c++14-c++17-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-c++11-c++14-c++17-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-c-17-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17CompatPedantic",
              "shortDescription": {
                "text": "c++98-c++11-c++14-c++17-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++98-c++11-c++14-c++17-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-c-17-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCppCompat",
              "shortDescription": {
                "text": "c++-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wc++-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wc--compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCstringFormatDirective",
              "shortDescription": {
                "text": "cstring-format-directive clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcstring-format-directive clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcstring-format-directive\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCtadMaybeUnsupported",
              "shortDescription": {
                "text": "ctad-maybe-unsupported clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wctad-maybe-unsupported clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wctad-maybe-unsupported\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCtu",
              "shortDescription": {
                "text": "ctu clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wctu clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wctu\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCudaCompat",
              "shortDescription": {
                "text": "cuda-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcuda-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcuda-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCustomAtomicProperties",
              "shortDescription": {
                "text": "custom-atomic-properties clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcustom-atomic-properties clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcustom-atomic-properties\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticCxxAttributeExtension",
              "shortDescription": {
                "text": "cxx-attribute-extension clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wcxx-attribute-extension clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wcxx-attribute-extension\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDangling",
              "shortDescription": {
                "text": "dangling clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdangling clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdangling\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDanglingAssignment",
              "shortDescription": {
                "text": "dangling-assignment clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdangling-assignment clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdangling-assignment\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDanglingAssignmentGsl",
              "shortDescription": {
                "text": "dangling-assignment-gsl clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdangling-assignment-gsl clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdangling-assignment-gsl\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDanglingCapture",
              "shortDescription": {
                "text": "dangling-capture clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdangling-capture clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdangling-capture\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDanglingElse",
              "shortDescription": {
                "text": "dangling-else clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdangling-else clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdangling-else\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDanglingField",
              "shortDescription": {
                "text": "dangling-field clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdangling-field clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdangling-field\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDanglingGsl",
              "shortDescription": {
                "text": "dangling-gsl clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdangling-gsl clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdangling-gsl\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDanglingInitializerList",
              "shortDescription": {
                "text": "dangling-initializer-list clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdangling-initializer-list clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdangling-initializer-list\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDarwinSdkSettings",
              "shortDescription": {
                "text": "darwin-sdk-settings clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdarwin-sdk-settings clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdarwin-sdk-settings\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDateTime",
              "shortDescription": {
                "text": "date-time clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdate-time clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdate-time\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeallocInCategory",
              "shortDescription": {
                "text": "dealloc-in-category clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdealloc-in-category clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdealloc-in-category\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDebugCompressionUnavailable",
              "shortDescription": {
                "text": "debug-compression-unavailable clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdebug-compression-unavailable clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdebug-compression-unavailable\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeclarationAfterStatement",
              "shortDescription": {
                "text": "declaration-after-statement clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeclaration-after-statement clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeclaration-after-statement\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeclsInMultipleModules",
              "shortDescription": {
                "text": "decls-in-multiple-modules clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdecls-in-multiple-modules clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdecls-in-multiple-modules\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDefaultedFunctionDeleted",
              "shortDescription": {
                "text": "defaulted-function-deleted clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdefaulted-function-deleted clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdefaulted-function-deleted\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDelegatingCtorCycles",
              "shortDescription": {
                "text": "delegating-ctor-cycles clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdelegating-ctor-cycles clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdelegating-ctor-cycles\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeleteAbstractNonVirtualDtor",
              "shortDescription": {
                "text": "delete-abstract-non-virtual-dtor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdelete-abstract-non-virtual-dtor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdelete-abstract-non-virtual-dtor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeleteIncomplete",
              "shortDescription": {
                "text": "delete-incomplete clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdelete-incomplete clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdelete-incomplete\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeleteNonAbstractNonVirtualDtor",
              "shortDescription": {
                "text": "delete-non-abstract-non-virtual-dtor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdelete-non-abstract-non-virtual-dtor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdelete-non-abstract-non-virtual-dtor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeleteNonVirtualDtor",
              "shortDescription": {
                "text": "delete-non-virtual-dtor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdelete-non-virtual-dtor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdelete-non-virtual-dtor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDelimitedEscapeSequenceExtension",
              "shortDescription": {
                "text": "delimited-escape-sequence-extension clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdelimited-escape-sequence-extension clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdelimited-escape-sequence-extension\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecateLaxVecConvAll",
              "shortDescription": {
                "text": "deprecate-lax-vec-conv-all clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecate-lax-vec-conv-all clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecate-lax-vec-conv-all\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecated",
              "shortDescription": {
                "text": "deprecated clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedAltivecSrcCompat",
              "shortDescription": {
                "text": "deprecated-altivec-src-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-altivec-src-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-altivec-src-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedAnonEnumEnumConversion",
              "shortDescription": {
                "text": "deprecated-anon-enum-enum-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-anon-enum-enum-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-anon-enum-enum-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedArrayCompare",
              "shortDescription": {
                "text": "deprecated-array-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-array-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-array-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedAttributes",
              "shortDescription": {
                "text": "deprecated-attributes clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-attributes clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-attributes\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedBuiltins",
              "shortDescription": {
                "text": "deprecated-builtins clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-builtins clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-builtins\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedCommaSubscript",
              "shortDescription": {
                "text": "deprecated-comma-subscript clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-comma-subscript clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-comma-subscript\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedCopy",
              "shortDescription": {
                "text": "deprecated-copy clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-copy clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedCopyWithDtor",
              "shortDescription": {
                "text": "deprecated-copy-with-dtor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-copy-with-dtor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-dtor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedCopy",
              "shortDescription": {
                "text": "deprecated-copy-with-user-provided-copy clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-copy-with-user-provided-copy clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-user-provided-copy\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedDtor",
              "shortDescription": {
                "text": "deprecated-copy-with-user-provided-dtor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-copy-with-user-provided-dtor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-user-provided-dtor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedCoroutine",
              "shortDescription": {
                "text": "deprecated-coroutine clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-coroutine clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-coroutine\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedDeclarations",
              "shortDescription": {
                "text": "deprecated-declarations clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-declarations clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-declarations\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedDynamicExceptionSpec",
              "shortDescription": {
                "text": "deprecated-dynamic-exception-spec clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-dynamic-exception-spec clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-dynamic-exception-spec\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedEnumCompare",
              "shortDescription": {
                "text": "deprecated-enum-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-enum-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedEnumCompareConditional",
              "shortDescription": {
                "text": "deprecated-enum-compare-conditional clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-enum-compare-conditional clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-compare-conditional\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedEnumEnumConversion",
              "shortDescription": {
                "text": "deprecated-enum-enum-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-enum-enum-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-enum-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedEnumFloatConversion",
              "shortDescription": {
                "text": "deprecated-enum-float-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-enum-float-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-float-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedImplementations",
              "shortDescription": {
                "text": "deprecated-implementations clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-implementations clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-implementations\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedIncrementBool",
              "shortDescription": {
                "text": "deprecated-increment-bool clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-increment-bool clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-increment-bool\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedLiteralOperator",
              "shortDescription": {
                "text": "deprecated-literal-operator clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-literal-operator clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-literal-operator\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedMissingCommaVariadicParameter",
              "shortDescription": {
                "text": "deprecated-missing-comma-variadic-parameter clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-missing-comma-variadic-parameter clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-missing-comma-variadic-parameter\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedNoRelaxedTemplateTemplateArgs",
              "shortDescription": {
                "text": "deprecated-no-relaxed-template-template-args clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-no-relaxed-template-template-args clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-no-relaxed-template-template-args\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedNonPrototype",
              "shortDescription": {
                "text": "deprecated-non-prototype clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-non-prototype clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-non-prototype\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedObjcIsaUsage",
              "shortDescription": {
                "text": "deprecated-objc-isa-usage clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-objc-isa-usage clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-objc-isa-usage\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospection",
              "shortDescription": {
                "text": "deprecated-objc-pointer-introspection clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-objc-pointer-introspection clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-objc-pointer-introspection\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospectionPerformSelector",
              "shortDescription": {
                "text": "deprecated-objc-pointer-introspection-performSelector clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-objc-pointer-introspection-performSelector clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-objc-pointer-introspection-performSelector\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedOfast",
              "shortDescription": {
                "text": "deprecated-ofast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-ofast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-ofast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedPragma",
              "shortDescription": {
                "text": "deprecated-pragma clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-pragma clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-pragma\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedRedundantConstexprStaticDef",
              "shortDescription": {
                "text": "deprecated-redundant-constexpr-static-def clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-redundant-constexpr-static-def clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-redundant-constexpr-static-def\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedRegister",
              "shortDescription": {
                "text": "deprecated-register clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-register clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-register\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedThisCapture",
              "shortDescription": {
                "text": "deprecated-this-capture clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-this-capture clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-this-capture\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedType",
              "shortDescription": {
                "text": "deprecated-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDeprecatedVolatile",
              "shortDescription": {
                "text": "deprecated-volatile clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdeprecated-volatile clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-volatile\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDirectIvarAccess",
              "shortDescription": {
                "text": "direct-ivar-access clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdirect-ivar-access clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdirect-ivar-access\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDisabledMacroExpansion",
              "shortDescription": {
                "text": "disabled-macro-expansion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdisabled-macro-expansion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdisabled-macro-expansion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDistributedObjectModifiers",
              "shortDescription": {
                "text": "distributed-object-modifiers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdistributed-object-modifiers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdistributed-object-modifiers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDivisionByZero",
              "shortDescription": {
                "text": "division-by-zero clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdivision-by-zero clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdivision-by-zero\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDllAttributeOnRedeclaration",
              "shortDescription": {
                "text": "dll-attribute-on-redeclaration clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdll-attribute-on-redeclaration clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdll-attribute-on-redeclaration\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDllexportExplicitInstantiationDecl",
              "shortDescription": {
                "text": "dllexport-explicit-instantiation-decl clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdllexport-explicit-instantiation-decl clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdllexport-explicit-instantiation-decl\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDllimportStaticFieldDef",
              "shortDescription": {
                "text": "dllimport-static-field-def clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdllimport-static-field-def clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdllimport-static-field-def\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDocumentation",
              "shortDescription": {
                "text": "documentation clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdocumentation clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDocumentationDeprecatedSync",
              "shortDescription": {
                "text": "documentation-deprecated-sync clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdocumentation-deprecated-sync clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-deprecated-sync\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDocumentationHtml",
              "shortDescription": {
                "text": "documentation-html clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdocumentation-html clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDocumentationPedantic",
              "shortDescription": {
                "text": "documentation-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdocumentation-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDocumentationUnknownCommand",
              "shortDescription": {
                "text": "documentation-unknown-command clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdocumentation-unknown-command clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-unknown-command\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDollarInIdentifierExtension",
              "shortDescription": {
                "text": "dollar-in-identifier-extension clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdollar-in-identifier-extension clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdollar-in-identifier-extension\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDoublePromotion",
              "shortDescription": {
                "text": "double-promotion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdouble-promotion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdouble-promotion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDtorName",
              "shortDescription": {
                "text": "dtor-name clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdtor-name clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdtor-name\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDtorTypedef",
              "shortDescription": {
                "text": "dtor-typedef clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdtor-typedef clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdtor-typedef\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDuplicateDeclSpecifier",
              "shortDescription": {
                "text": "duplicate-decl-specifier clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wduplicate-decl-specifier clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-decl-specifier\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDuplicateEnum",
              "shortDescription": {
                "text": "duplicate-enum clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wduplicate-enum clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-enum\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDuplicateMethodArg",
              "shortDescription": {
                "text": "duplicate-method-arg clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wduplicate-method-arg clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-method-arg\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDuplicateMethodMatch",
              "shortDescription": {
                "text": "duplicate-method-match clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wduplicate-method-match clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-method-match\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDuplicateProtocol",
              "shortDescription": {
                "text": "duplicate-protocol clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wduplicate-protocol clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-protocol\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDxilValidation",
              "shortDescription": {
                "text": "dxil-validation clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdxil-validation clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdxil-validation\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDynamicClassMemaccess",
              "shortDescription": {
                "text": "dynamic-class-memaccess clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdynamic-class-memaccess clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdynamic-class-memaccess\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticDynamicExceptionSpec",
              "shortDescription": {
                "text": "dynamic-exception-spec clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wdynamic-exception-spec clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wdynamic-exception-spec\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEagerLoadCxxNamedModules",
              "shortDescription": {
                "text": "eager-load-cxx-named-modules clang diagnostic"
              },
              "fullDescription": {
                "text": "-Weager-load-cxx-named-modules clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#weager-load-cxx-named-modules\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEmbeddedDirective",
              "shortDescription": {
                "text": "embedded-directive clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wembedded-directive clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wembedded-directive\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEmptyBody",
              "shortDescription": {
                "text": "empty-body clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wempty-body clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wempty-body\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEmptyDecomposition",
              "shortDescription": {
                "text": "empty-decomposition clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wempty-decomposition clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wempty-decomposition\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEmptyInitStmt",
              "shortDescription": {
                "text": "empty-init-stmt clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wempty-init-stmt clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wempty-init-stmt\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEmptyTranslationUnit",
              "shortDescription": {
                "text": "empty-translation-unit clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wempty-translation-unit clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wempty-translation-unit\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEncodeType",
              "shortDescription": {
                "text": "encode-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wencode-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wencode-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEnumCompare",
              "shortDescription": {
                "text": "enum-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wenum-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEnumCompareConditional",
              "shortDescription": {
                "text": "enum-compare-conditional clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wenum-compare-conditional clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare-conditional\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEnumCompareSwitch",
              "shortDescription": {
                "text": "enum-compare-switch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wenum-compare-switch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare-switch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEnumConversion",
              "shortDescription": {
                "text": "enum-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wenum-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wenum-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEnumEnumConversion",
              "shortDescription": {
                "text": "enum-enum-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wenum-enum-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wenum-enum-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEnumFloatConversion",
              "shortDescription": {
                "text": "enum-float-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wenum-float-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wenum-float-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticEnumTooLarge",
              "shortDescription": {
                "text": "enum-too-large clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wenum-too-large clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wenum-too-large\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticError",
              "shortDescription": {
                "text": "Clang compiler error"
              },
              "fullDescription": {
                "text": "Clang compiler error"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExceptions",
              "shortDescription": {
                "text": "exceptions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexceptions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexceptions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExcessInitializers",
              "shortDescription": {
                "text": "excess-initializers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexcess-initializers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexcess-initializers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExcessiveRegsave",
              "shortDescription": {
                "text": "excessive-regsave clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexcessive-regsave clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexcessive-regsave\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExitTimeDestructors",
              "shortDescription": {
                "text": "exit-time-destructors clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexit-time-destructors clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexit-time-destructors\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExpansionToDefined",
              "shortDescription": {
                "text": "expansion-to-defined clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexpansion-to-defined clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexpansion-to-defined\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExperimentalHeaderUnits",
              "shortDescription": {
                "text": "experimental-header-units clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexperimental-header-units clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexperimental-header-units\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExperimentalOption",
              "shortDescription": {
                "text": "experimental-option clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexperimental-option clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexperimental-option\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExplicitInitializeCall",
              "shortDescription": {
                "text": "explicit-initialize-call clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexplicit-initialize-call clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexplicit-initialize-call\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExplicitOwnershipType",
              "shortDescription": {
                "text": "explicit-ownership-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexplicit-ownership-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexplicit-ownership-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExplicitSpecializationStorageClass",
              "shortDescription": {
                "text": "explicit-specialization-storage-class clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexplicit-specialization-storage-class clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexplicit-specialization-storage-class\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExportUnnamed",
              "shortDescription": {
                "text": "export-unnamed clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wexport-unnamed clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wexport-unnamed\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExternCCompat",
              "shortDescription": {
                "text": "extern-c-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wextern-c-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wextern-c-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExternInitializer",
              "shortDescription": {
                "text": "extern-initializer clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wextern-initializer clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wextern-initializer\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExtraQualification",
              "shortDescription": {
                "text": "extra-qualification clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wextra-qualification clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wextra-qualification\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExtraSemi",
              "shortDescription": {
                "text": "extra-semi clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wextra-semi clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wextra-semi\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExtraSemiStmt",
              "shortDescription": {
                "text": "extra-semi-stmt clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wextra-semi-stmt clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wextra-semi-stmt\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExtraTokens",
              "shortDescription": {
                "text": "extra-tokens clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wextra-tokens clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wextra-tokens\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticExtractapiMisuse",
              "shortDescription": {
                "text": "extractapi-misuse clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wextractapi-misuse clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wextractapi-misuse\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFinalDtorNonFinalClass",
              "shortDescription": {
                "text": "final-dtor-non-final-class clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfinal-dtor-non-final-class clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfinal-dtor-non-final-class\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFinalMacro",
              "shortDescription": {
                "text": "final-macro clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfinal-macro clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfinal-macro\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFixedPointOverflow",
              "shortDescription": {
                "text": "fixed-point-overflow clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfixed-point-overflow clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfixed-point-overflow\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFlagEnum",
              "shortDescription": {
                "text": "flag-enum clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wflag-enum clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wflag-enum\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFlexibleArrayExtensions",
              "shortDescription": {
                "text": "flexible-array-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wflexible-array-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wflexible-array-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFloatConversion",
              "shortDescription": {
                "text": "float-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfloat-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfloat-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFloatEqual",
              "shortDescription": {
                "text": "float-equal clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfloat-equal clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfloat-equal\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFloatOverflowConversion",
              "shortDescription": {
                "text": "float-overflow-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfloat-overflow-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfloat-overflow-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFloatZeroConversion",
              "shortDescription": {
                "text": "float-zero-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfloat-zero-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfloat-zero-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticForLoopAnalysis",
              "shortDescription": {
                "text": "for-loop-analysis clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfor-loop-analysis clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfor-loop-analysis\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormat",
              "shortDescription": {
                "text": "format clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatExtraArgs",
              "shortDescription": {
                "text": "format-extra-args clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-extra-args clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-extra-args\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatInsufficientArgs",
              "shortDescription": {
                "text": "format-insufficient-args clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-insufficient-args clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-insufficient-args\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatInvalidSpecifier",
              "shortDescription": {
                "text": "format-invalid-specifier clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-invalid-specifier clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-invalid-specifier\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatNonIso",
              "shortDescription": {
                "text": "format-non-iso clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-non-iso clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-non-iso\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatNonliteral",
              "shortDescription": {
                "text": "format-nonliteral clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-nonliteral clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-nonliteral\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatOverflow",
              "shortDescription": {
                "text": "format-overflow clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-overflow clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-overflow\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatOverflowNonKprintf",
              "shortDescription": {
                "text": "format-overflow-non-kprintf clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-overflow-non-kprintf clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-overflow-non-kprintf\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatPedantic",
              "shortDescription": {
                "text": "format-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatSecurity",
              "shortDescription": {
                "text": "format-security clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-security clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-security\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatSignedness",
              "shortDescription": {
                "text": "format-signedness clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-signedness clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-signedness\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatTruncation",
              "shortDescription": {
                "text": "format-truncation clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-truncation clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-truncation\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatTruncationNonKprintf",
              "shortDescription": {
                "text": "format-truncation-non-kprintf clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-truncation-non-kprintf clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-truncation-non-kprintf\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatTypeConfusion",
              "shortDescription": {
                "text": "format-type-confusion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-type-confusion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-type-confusion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFormatZeroLength",
              "shortDescription": {
                "text": "format-zero-length clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wformat-zero-length clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wformat-zero-length\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFortifySource",
              "shortDescription": {
                "text": "fortify-source clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfortify-source clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfortify-source\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFourCharConstants",
              "shortDescription": {
                "text": "four-char-constants clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfour-char-constants clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfour-char-constants\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFrameAddress",
              "shortDescription": {
                "text": "frame-address clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wframe-address clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wframe-address\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFrameLargerThan",
              "shortDescription": {
                "text": "frame-larger-than clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wframe-larger-than clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wframe-larger-than\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFrameworkIncludePrivateFromPublic",
              "shortDescription": {
                "text": "framework-include-private-from-public clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wframework-include-private-from-public clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wframework-include-private-from-public\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFreeNonheapObject",
              "shortDescription": {
                "text": "free-nonheap-object clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfree-nonheap-object clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfree-nonheap-object\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFriendEnum",
              "shortDescription": {
                "text": "friend-enum clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfriend-enum clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfriend-enum\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFunctionDefInObjcContainer",
              "shortDescription": {
                "text": "function-def-in-objc-container clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfunction-def-in-objc-container clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfunction-def-in-objc-container\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFunctionEffects",
              "shortDescription": {
                "text": "function-effects clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfunction-effects clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfunction-effects\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFunctionMultiversion",
              "shortDescription": {
                "text": "function-multiversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfunction-multiversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfunction-multiversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticFutureAttributeExtensions",
              "shortDescription": {
                "text": "future-attribute-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wfuture-attribute-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wfuture-attribute-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGccCompat",
              "shortDescription": {
                "text": "gcc-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgcc-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgcc-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGlobalConstructors",
              "shortDescription": {
                "text": "global-constructors clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wglobal-constructors clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wglobal-constructors\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGlobalIsel",
              "shortDescription": {
                "text": "global-isel clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wglobal-isel clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wglobal-isel\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuAlignofExpression",
              "shortDescription": {
                "text": "gnu-alignof-expression clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-alignof-expression clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-alignof-expression\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuAnonymousStruct",
              "shortDescription": {
                "text": "gnu-anonymous-struct clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-anonymous-struct clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-anonymous-struct\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuArrayMemberParenInit",
              "shortDescription": {
                "text": "gnu-array-member-paren-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-array-member-paren-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-array-member-paren-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuAutoType",
              "shortDescription": {
                "text": "gnu-auto-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-auto-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-auto-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuBinaryLiteral",
              "shortDescription": {
                "text": "gnu-binary-literal clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-binary-literal clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-binary-literal\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuCaseRange",
              "shortDescription": {
                "text": "gnu-case-range clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-case-range clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-case-range\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuComplexInteger",
              "shortDescription": {
                "text": "gnu-complex-integer clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-complex-integer clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-complex-integer\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuCompoundLiteralInitializer",
              "shortDescription": {
                "text": "gnu-compound-literal-initializer clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-compound-literal-initializer clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-compound-literal-initializer\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuConditionalOmittedOperand",
              "shortDescription": {
                "text": "gnu-conditional-omitted-operand clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-conditional-omitted-operand clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-conditional-omitted-operand\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuDesignator",
              "shortDescription": {
                "text": "gnu-designator clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-designator clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-designator\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuEmptyInitializer",
              "shortDescription": {
                "text": "gnu-empty-initializer clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-empty-initializer clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-empty-initializer\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuEmptyStruct",
              "shortDescription": {
                "text": "gnu-empty-struct clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-empty-struct clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-empty-struct\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuFlexibleArrayInitializer",
              "shortDescription": {
                "text": "gnu-flexible-array-initializer clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-flexible-array-initializer clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-flexible-array-initializer\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuFlexibleArrayUnionMember",
              "shortDescription": {
                "text": "gnu-flexible-array-union-member clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-flexible-array-union-member clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-flexible-array-union-member\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuFoldingConstant",
              "shortDescription": {
                "text": "gnu-folding-constant clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-folding-constant clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-folding-constant\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuImaginaryConstant",
              "shortDescription": {
                "text": "gnu-imaginary-constant clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-imaginary-constant clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-imaginary-constant\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuIncludeNext",
              "shortDescription": {
                "text": "gnu-include-next clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-include-next clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-include-next\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuInlineCppWithoutExtern",
              "shortDescription": {
                "text": "gnu-inline-cpp-without-extern clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-inline-cpp-without-extern clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-inline-cpp-without-extern\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuLabelAsValue",
              "shortDescription": {
                "text": "gnu-label-as-value clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-label-as-value clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-label-as-value\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuLineMarker",
              "shortDescription": {
                "text": "gnu-line-marker clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-line-marker clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-line-marker\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuNullPointerArithmetic",
              "shortDescription": {
                "text": "gnu-null-pointer-arithmetic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-null-pointer-arithmetic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-null-pointer-arithmetic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuOffsetofExtensions",
              "shortDescription": {
                "text": "gnu-offsetof-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-offsetof-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-offsetof-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuPointerArith",
              "shortDescription": {
                "text": "gnu-pointer-arith clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-pointer-arith clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-pointer-arith\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuRedeclaredEnum",
              "shortDescription": {
                "text": "gnu-redeclared-enum clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-redeclared-enum clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-redeclared-enum\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuStatementExpression",
              "shortDescription": {
                "text": "gnu-statement-expression clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-statement-expression clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-statement-expression\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuStatementExpressionFromMacroExpansion",
              "shortDescription": {
                "text": "gnu-statement-expression-from-macro-expansion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-statement-expression-from-macro-expansion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-statement-expression-from-macro-expansion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuStaticFloatInit",
              "shortDescription": {
                "text": "gnu-static-float-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-static-float-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-static-float-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuStringLiteralOperatorTemplate",
              "shortDescription": {
                "text": "gnu-string-literal-operator-template clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-string-literal-operator-template clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-string-literal-operator-template\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuUnionCast",
              "shortDescription": {
                "text": "gnu-union-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-union-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-union-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuVariableSizedTypeNotAtEnd",
              "shortDescription": {
                "text": "gnu-variable-sized-type-not-at-end clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-variable-sized-type-not-at-end clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-variable-sized-type-not-at-end\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGnuZeroVariadicMacroArguments",
              "shortDescription": {
                "text": "gnu-zero-variadic-macro-arguments clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgnu-zero-variadic-macro-arguments clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgnu-zero-variadic-macro-arguments\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticGpuMaybeWrongSide",
              "shortDescription": {
                "text": "gpu-maybe-wrong-side clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wgpu-maybe-wrong-side clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wgpu-maybe-wrong-side\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticHeaderGuard",
              "shortDescription": {
                "text": "header-guard clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wheader-guard clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wheader-guard\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticHeaderHygiene",
              "shortDescription": {
                "text": "header-hygiene clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wheader-hygiene clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wheader-hygiene\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticHigherPrecisionForComplexDivision",
              "shortDescription": {
                "text": "higher-precision-for-complex-division clang diagnostic"
              },
              "fullDescription": {
                "text": "-Whigher-precision-for-complex-division clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#whigher-precision-for-complex-division\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticHipOmpTargetDirectives",
              "shortDescription": {
                "text": "hip-omp-target-directives clang diagnostic"
              },
              "fullDescription": {
                "text": "-Whip-omp-target-directives clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#whip-omp-target-directives\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticHipOnly",
              "shortDescription": {
                "text": "hip-only clang diagnostic"
              },
              "fullDescription": {
                "text": "-Whip-only clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#whip-only\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticHlsl202yExtensions",
              "shortDescription": {
                "text": "hlsl-202y-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Whlsl-202y-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#whlsl-202y-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticHlslAvailability",
              "shortDescription": {
                "text": "hlsl-availability clang diagnostic"
              },
              "fullDescription": {
                "text": "-Whlsl-availability clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#whlsl-availability\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticHlslDxcCompatability",
              "shortDescription": {
                "text": "hlsl-dxc-compatability clang diagnostic"
              },
              "fullDescription": {
                "text": "-Whlsl-dxc-compatability clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#whlsl-dxc-compatability\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticHlslExtensions",
              "shortDescription": {
                "text": "hlsl-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Whlsl-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#whlsl-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIdiomaticParentheses",
              "shortDescription": {
                "text": "idiomatic-parentheses clang diagnostic"
              },
              "fullDescription": {
                "text": "-Widiomatic-parentheses clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#widiomatic-parentheses\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIgnoredAttributes",
              "shortDescription": {
                "text": "ignored-attributes clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wignored-attributes clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wignored-attributes\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIgnoredAvailabilityWithoutSdkSettings",
              "shortDescription": {
                "text": "ignored-availability-without-sdk-settings clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wignored-availability-without-sdk-settings clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wignored-availability-without-sdk-settings\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIgnoredOptimizationArgument",
              "shortDescription": {
                "text": "ignored-optimization-argument clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wignored-optimization-argument clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wignored-optimization-argument\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIgnoredPragmaIntrinsic",
              "shortDescription": {
                "text": "ignored-pragma-intrinsic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wignored-pragma-intrinsic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragma-intrinsic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIgnoredPragmaOptimize",
              "shortDescription": {
                "text": "ignored-pragma-optimize clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wignored-pragma-optimize clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragma-optimize\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIgnoredPragmas",
              "shortDescription": {
                "text": "ignored-pragmas clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wignored-pragmas clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragmas\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIgnoredQualifiers",
              "shortDescription": {
                "text": "ignored-qualifiers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wignored-qualifiers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wignored-qualifiers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIgnoredReferenceQualifiers",
              "shortDescription": {
                "text": "ignored-reference-qualifiers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wignored-reference-qualifiers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wignored-reference-qualifiers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitAtomicProperties",
              "shortDescription": {
                "text": "implicit-atomic-properties clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-atomic-properties clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-atomic-properties\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitConstIntFloatConversion",
              "shortDescription": {
                "text": "implicit-const-int-float-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-const-int-float-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-const-int-float-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitConversionFloatingPointToBool",
              "shortDescription": {
                "text": "implicit-conversion-floating-point-to-bool clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-conversion-floating-point-to-bool clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-conversion-floating-point-to-bool\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitExceptionSpecMismatch",
              "shortDescription": {
                "text": "implicit-exception-spec-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-exception-spec-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-exception-spec-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitFallthrough",
              "shortDescription": {
                "text": "implicit-fallthrough clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-fallthrough clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fallthrough\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitFallthroughPerFunction",
              "shortDescription": {
                "text": "implicit-fallthrough-per-function clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-fallthrough-per-function clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fallthrough-per-function\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitFixedPointConversion",
              "shortDescription": {
                "text": "implicit-fixed-point-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-fixed-point-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fixed-point-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitFloatConversion",
              "shortDescription": {
                "text": "implicit-float-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-float-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-float-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitFunctionDeclaration",
              "shortDescription": {
                "text": "implicit-function-declaration clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-function-declaration clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-function-declaration\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitInt",
              "shortDescription": {
                "text": "implicit-int clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-int clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitIntConversion",
              "shortDescription": {
                "text": "implicit-int-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-int-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitIntFloatConversion",
              "shortDescription": {
                "text": "implicit-int-float-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-int-float-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int-float-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitRetainSelf",
              "shortDescription": {
                "text": "implicit-retain-self clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicit-retain-self clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-retain-self\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImplicitlyUnsignedLiteral",
              "shortDescription": {
                "text": "implicitly-unsigned-literal clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimplicitly-unsigned-literal clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimplicitly-unsigned-literal\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImportImplementationPartitionUnitInInterfaceUnit",
              "shortDescription": {
                "text": "import-implementation-partition-unit-in-interface-unit clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimport-implementation-partition-unit-in-interface-unit clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimport-implementation-partition-unit-in-interface-unit\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticImportPreprocessorDirectivePedantic",
              "shortDescription": {
                "text": "import-preprocessor-directive-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wimport-preprocessor-directive-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wimport-preprocessor-directive-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInaccessibleBase",
              "shortDescription": {
                "text": "inaccessible-base clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winaccessible-base clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winaccessible-base\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncludeAngledInModulePurview",
              "shortDescription": {
                "text": "include-angled-in-module-purview clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winclude-angled-in-module-purview clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winclude-angled-in-module-purview\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncludeNextAbsolutePath",
              "shortDescription": {
                "text": "include-next-absolute-path clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winclude-next-absolute-path clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winclude-next-absolute-path\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncludeNextOutsideHeader",
              "shortDescription": {
                "text": "include-next-outside-header clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winclude-next-outside-header clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winclude-next-outside-header\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompatibleExceptionSpec",
              "shortDescription": {
                "text": "incompatible-exception-spec clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincompatible-exception-spec clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-exception-spec\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompatibleFunctionPointerTypes",
              "shortDescription": {
                "text": "incompatible-function-pointer-types clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincompatible-function-pointer-types clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-function-pointer-types\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompatibleFunctionPointerTypesStrict",
              "shortDescription": {
                "text": "incompatible-function-pointer-types-strict clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincompatible-function-pointer-types-strict clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-function-pointer-types-strict\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompatibleLibraryRedeclaration",
              "shortDescription": {
                "text": "incompatible-library-redeclaration clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincompatible-library-redeclaration clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-library-redeclaration\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompatibleMsPragmaSection",
              "shortDescription": {
                "text": "incompatible-ms-pragma-section clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincompatible-ms-pragma-section clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-ms-pragma-section\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompatibleMsStruct",
              "shortDescription": {
                "text": "incompatible-ms-struct clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincompatible-ms-struct clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-ms-struct\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompatiblePointerTypes",
              "shortDescription": {
                "text": "incompatible-pointer-types clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincompatible-pointer-types clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-pointer-types\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompatiblePointerTypesDiscardsQualifiers",
              "shortDescription": {
                "text": "incompatible-pointer-types-discards-qualifiers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincompatible-pointer-types-discards-qualifiers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-pointer-types-discards-qualifiers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompatiblePropertyType",
              "shortDescription": {
                "text": "incompatible-property-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincompatible-property-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-property-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompatibleSysroot",
              "shortDescription": {
                "text": "incompatible-sysroot clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincompatible-sysroot clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-sysroot\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompleteFrameworkModuleDeclaration",
              "shortDescription": {
                "text": "incomplete-framework-module-declaration clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincomplete-framework-module-declaration clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-framework-module-declaration\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompleteImplementation",
              "shortDescription": {
                "text": "incomplete-implementation clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincomplete-implementation clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-implementation\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompleteModule",
              "shortDescription": {
                "text": "incomplete-module clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincomplete-module clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-module\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompleteSetjmpDeclaration",
              "shortDescription": {
                "text": "incomplete-setjmp-declaration clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincomplete-setjmp-declaration clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-setjmp-declaration\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncompleteUmbrella",
              "shortDescription": {
                "text": "incomplete-umbrella clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincomplete-umbrella clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-umbrella\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInconsistentDllimport",
              "shortDescription": {
                "text": "inconsistent-dllimport clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winconsistent-dllimport clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-dllimport\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInconsistentMissingDestructorOverride",
              "shortDescription": {
                "text": "inconsistent-missing-destructor-override clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winconsistent-missing-destructor-override clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-missing-destructor-override\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInconsistentMissingOverride",
              "shortDescription": {
                "text": "inconsistent-missing-override clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winconsistent-missing-override clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-missing-override\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIncrementBool",
              "shortDescription": {
                "text": "increment-bool clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wincrement-bool clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wincrement-bool\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIndependentClassAttribute",
              "shortDescription": {
                "text": "IndependentClass-attribute clang diagnostic"
              },
              "fullDescription": {
                "text": "-WIndependentClass-attribute clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wIndependentClass-attribute\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInfiniteRecursion",
              "shortDescription": {
                "text": "infinite-recursion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winfinite-recursion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winfinite-recursion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInitializerOverrides",
              "shortDescription": {
                "text": "initializer-overrides clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winitializer-overrides clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winitializer-overrides\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInjectedClassName",
              "shortDescription": {
                "text": "injected-class-name clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winjected-class-name clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winjected-class-name\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInlineAsm",
              "shortDescription": {
                "text": "inline-asm clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winline-asm clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winline-asm\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInlineNamespaceReopenedNoninline",
              "shortDescription": {
                "text": "inline-namespace-reopened-noninline clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winline-namespace-reopened-noninline clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winline-namespace-reopened-noninline\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInlineNewDelete",
              "shortDescription": {
                "text": "inline-new-delete clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winline-new-delete clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winline-new-delete\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInstallapiViolation",
              "shortDescription": {
                "text": "installapi-violation clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winstallapi-violation clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winstallapi-violation\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInstantiationAfterSpecialization",
              "shortDescription": {
                "text": "instantiation-after-specialization clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winstantiation-after-specialization clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winstantiation-after-specialization\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIntConversion",
              "shortDescription": {
                "text": "int-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wint-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wint-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIntInBoolContext",
              "shortDescription": {
                "text": "int-in-bool-context clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wint-in-bool-context clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wint-in-bool-context\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIntToPointerCast",
              "shortDescription": {
                "text": "int-to-pointer-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wint-to-pointer-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wint-to-pointer-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIntToVoidPointerCast",
              "shortDescription": {
                "text": "int-to-void-pointer-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wint-to-void-pointer-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wint-to-void-pointer-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticIntegerOverflow",
              "shortDescription": {
                "text": "integer-overflow clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winteger-overflow clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winteger-overflow\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidConstexpr",
              "shortDescription": {
                "text": "invalid-constexpr clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-constexpr clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-constexpr\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidGnuAsmCast",
              "shortDescription": {
                "text": "invalid-gnu-asm-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-gnu-asm-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-gnu-asm-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidIboutlet",
              "shortDescription": {
                "text": "invalid-iboutlet clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-iboutlet clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-iboutlet\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidInitializerFromSystemHeader",
              "shortDescription": {
                "text": "invalid-initializer-from-system-header clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-initializer-from-system-header clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-initializer-from-system-header\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidIosDeploymentTarget",
              "shortDescription": {
                "text": "invalid-ios-deployment-target clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-ios-deployment-target clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-ios-deployment-target\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidNoBuiltinNames",
              "shortDescription": {
                "text": "invalid-no-builtin-names clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-no-builtin-names clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-no-builtin-names\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidNoreturn",
              "shortDescription": {
                "text": "invalid-noreturn clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-noreturn clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-noreturn\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidOffsetof",
              "shortDescription": {
                "text": "invalid-offsetof clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-offsetof clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-offsetof\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidOrNonexistentDirectory",
              "shortDescription": {
                "text": "invalid-or-nonexistent-directory clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-or-nonexistent-directory clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-or-nonexistent-directory\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidPartialSpecialization",
              "shortDescription": {
                "text": "invalid-partial-specialization clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-partial-specialization clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-partial-specialization\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidPpToken",
              "shortDescription": {
                "text": "invalid-pp-token clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-pp-token clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-pp-token\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidSourceEncoding",
              "shortDescription": {
                "text": "invalid-source-encoding clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-source-encoding clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-source-encoding\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidStaticAssertMessage",
              "shortDescription": {
                "text": "invalid-static-assert-message clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-static-assert-message clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-static-assert-message\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidTokenPaste",
              "shortDescription": {
                "text": "invalid-token-paste clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-token-paste clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-token-paste\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidUnevaluatedString",
              "shortDescription": {
                "text": "invalid-unevaluated-string clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-unevaluated-string clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-unevaluated-string\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticInvalidUtf8",
              "shortDescription": {
                "text": "invalid-utf8 clang diagnostic"
              },
              "fullDescription": {
                "text": "-Winvalid-utf8 clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#winvalid-utf8\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticJumpSehFinally",
              "shortDescription": {
                "text": "jump-seh-finally clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wjump-seh-finally clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wjump-seh-finally\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticKeywordCompat",
              "shortDescription": {
                "text": "keyword-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wkeyword-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wkeyword-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticKeywordMacro",
              "shortDescription": {
                "text": "keyword-macro clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wkeyword-macro clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wkeyword-macro\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticKnrPromotedParameter",
              "shortDescription": {
                "text": "knr-promoted-parameter clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wknr-promoted-parameter clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wknr-promoted-parameter\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticLanguageExtensionToken",
              "shortDescription": {
                "text": "language-extension-token clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wlanguage-extension-token clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wlanguage-extension-token\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticLargeByValueCopy",
              "shortDescription": {
                "text": "large-by-value-copy clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wlarge-by-value-copy clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wlarge-by-value-copy\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticLegacyConstantRegisterBinding",
              "shortDescription": {
                "text": "legacy-constant-register-binding clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wlegacy-constant-register-binding clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wlegacy-constant-register-binding\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticLinkerWarnings",
              "shortDescription": {
                "text": "linker-warnings clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wlinker-warnings clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wlinker-warnings\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticLiteralConversion",
              "shortDescription": {
                "text": "literal-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wliteral-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wliteral-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticLiteralRange",
              "shortDescription": {
                "text": "literal-range clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wliteral-range clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wliteral-range\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticLocalTypeTemplateArgs",
              "shortDescription": {
                "text": "local-type-template-args clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wlocal-type-template-args clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wlocal-type-template-args\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticLogicalNotParentheses",
              "shortDescription": {
                "text": "logical-not-parentheses clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wlogical-not-parentheses clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wlogical-not-parentheses\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticLogicalOpParentheses",
              "shortDescription": {
                "text": "logical-op-parentheses clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wlogical-op-parentheses clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wlogical-op-parentheses\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticLongLong",
              "shortDescription": {
                "text": "long-long clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wlong-long clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wlong-long\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMacroRedefined",
              "shortDescription": {
                "text": "macro-redefined clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmacro-redefined clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmacro-redefined\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMain",
              "shortDescription": {
                "text": "main clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmain clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmain\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMainReturnType",
              "shortDescription": {
                "text": "main-return-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmain-return-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmain-return-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMalformedWarningCheck",
              "shortDescription": {
                "text": "malformed-warning-check clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmalformed-warning-check clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmalformed-warning-check\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticManyBracesAroundScalarInit",
              "shortDescription": {
                "text": "many-braces-around-scalar-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmany-braces-around-scalar-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmany-braces-around-scalar-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMathErrnoEnabledWithVeclib",
              "shortDescription": {
                "text": "math-errno-enabled-with-veclib clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmath-errno-enabled-with-veclib clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmath-errno-enabled-with-veclib\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMathematicalNotationIdentifierExtension",
              "shortDescription": {
                "text": "mathematical-notation-identifier-extension clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmathematical-notation-identifier-extension clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmathematical-notation-identifier-extension\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMaxTokens",
              "shortDescription": {
                "text": "max-tokens clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmax-tokens clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmax-tokens\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMaxUnsignedZero",
              "shortDescription": {
                "text": "max-unsigned-zero clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmax-unsigned-zero clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmax-unsigned-zero\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMemsetTransposedArgs",
              "shortDescription": {
                "text": "memset-transposed-args clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmemset-transposed-args clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmemset-transposed-args\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMemsizeComparison",
              "shortDescription": {
                "text": "memsize-comparison clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmemsize-comparison clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmemsize-comparison\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMethodSignatures",
              "shortDescription": {
                "text": "method-signatures clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmethod-signatures clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmethod-signatures\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftAbstract",
              "shortDescription": {
                "text": "microsoft-abstract clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-abstract clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-abstract\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftAnonTag",
              "shortDescription": {
                "text": "microsoft-anon-tag clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-anon-tag clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-anon-tag\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftCast",
              "shortDescription": {
                "text": "microsoft-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftCharize",
              "shortDescription": {
                "text": "microsoft-charize clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-charize clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-charize\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftCommentPaste",
              "shortDescription": {
                "text": "microsoft-comment-paste clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-comment-paste clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-comment-paste\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftConstInit",
              "shortDescription": {
                "text": "microsoft-const-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-const-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-const-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftCppMacro",
              "shortDescription": {
                "text": "microsoft-cpp-macro clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-cpp-macro clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-cpp-macro\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftDefaultArgRedefinition",
              "shortDescription": {
                "text": "microsoft-default-arg-redefinition clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-default-arg-redefinition clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-default-arg-redefinition\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftDrectveSection",
              "shortDescription": {
                "text": "microsoft-drectve-section clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-drectve-section clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-drectve-section\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftEndOfFile",
              "shortDescription": {
                "text": "microsoft-end-of-file clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-end-of-file clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-end-of-file\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftEnumForwardReference",
              "shortDescription": {
                "text": "microsoft-enum-forward-reference clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-enum-forward-reference clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-enum-forward-reference\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftEnumValue",
              "shortDescription": {
                "text": "microsoft-enum-value clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-enum-value clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-enum-value\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftExceptionSpec",
              "shortDescription": {
                "text": "microsoft-exception-spec clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-exception-spec clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-exception-spec\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftExists",
              "shortDescription": {
                "text": "microsoft-exists clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-exists clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-exists\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftExplicitConstructorCall",
              "shortDescription": {
                "text": "microsoft-explicit-constructor-call clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-explicit-constructor-call clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-explicit-constructor-call\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftExtraQualification",
              "shortDescription": {
                "text": "microsoft-extra-qualification clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-extra-qualification clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-extra-qualification\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftFixedEnum",
              "shortDescription": {
                "text": "microsoft-fixed-enum clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-fixed-enum clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-fixed-enum\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftFlexibleArray",
              "shortDescription": {
                "text": "microsoft-flexible-array clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-flexible-array clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-flexible-array\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftGoto",
              "shortDescription": {
                "text": "microsoft-goto clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-goto clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-goto\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftInaccessibleBase",
              "shortDescription": {
                "text": "microsoft-inaccessible-base clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-inaccessible-base clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-inaccessible-base\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftInclude",
              "shortDescription": {
                "text": "microsoft-include clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-include clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-include\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftInitFromPredefined",
              "shortDescription": {
                "text": "microsoft-init-from-predefined clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-init-from-predefined clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-init-from-predefined\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftInlineOnNonFunction",
              "shortDescription": {
                "text": "microsoft-inline-on-non-function clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-inline-on-non-function clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-inline-on-non-function\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftMutableReference",
              "shortDescription": {
                "text": "microsoft-mutable-reference clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-mutable-reference clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-mutable-reference\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftPureDefinition",
              "shortDescription": {
                "text": "microsoft-pure-definition clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-pure-definition clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-pure-definition\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftRedeclareStatic",
              "shortDescription": {
                "text": "microsoft-redeclare-static clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-redeclare-static clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-redeclare-static\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftSealed",
              "shortDescription": {
                "text": "microsoft-sealed clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-sealed clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-sealed\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftStaticAssert",
              "shortDescription": {
                "text": "microsoft-static-assert clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-static-assert clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-static-assert\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftStringLiteralFromPredefined",
              "shortDescription": {
                "text": "microsoft-string-literal-from-predefined clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-string-literal-from-predefined clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-string-literal-from-predefined\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftTemplate",
              "shortDescription": {
                "text": "microsoft-template clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-template clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-template\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftTemplateShadow",
              "shortDescription": {
                "text": "microsoft-template-shadow clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-template-shadow clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-template-shadow\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftUnionMemberReference",
              "shortDescription": {
                "text": "microsoft-union-member-reference clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-union-member-reference clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-union-member-reference\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftUnqualifiedFriend",
              "shortDescription": {
                "text": "microsoft-unqualified-friend clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-unqualified-friend clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-unqualified-friend\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftUsingDecl",
              "shortDescription": {
                "text": "microsoft-using-decl clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-using-decl clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-using-decl\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMicrosoftVoidPseudoDtor",
              "shortDescription": {
                "text": "microsoft-void-pseudo-dtor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmicrosoft-void-pseudo-dtor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-void-pseudo-dtor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMisexpect",
              "shortDescription": {
                "text": "misexpect clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmisexpect clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmisexpect\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMisleadingIndentation",
              "shortDescription": {
                "text": "misleading-indentation clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmisleading-indentation clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmisleading-indentation\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMismatchedNewDelete",
              "shortDescription": {
                "text": "mismatched-new-delete clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmismatched-new-delete clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-new-delete\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMismatchedParameterTypes",
              "shortDescription": {
                "text": "mismatched-parameter-types clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmismatched-parameter-types clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-parameter-types\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMismatchedReturnTypes",
              "shortDescription": {
                "text": "mismatched-return-types clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmismatched-return-types clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-return-types\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMismatchedTags",
              "shortDescription": {
                "text": "mismatched-tags clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmismatched-tags clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-tags\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingBraces",
              "shortDescription": {
                "text": "missing-braces clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-braces clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-braces\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingConstinit",
              "shortDescription": {
                "text": "missing-constinit clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-constinit clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-constinit\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingDeclarations",
              "shortDescription": {
                "text": "missing-declarations clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-declarations clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-declarations\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingDesignatedFieldInitializers",
              "shortDescription": {
                "text": "missing-designated-field-initializers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-designated-field-initializers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-designated-field-initializers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingExceptionSpec",
              "shortDescription": {
                "text": "missing-exception-spec clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-exception-spec clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-exception-spec\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingFieldInitializers",
              "shortDescription": {
                "text": "missing-field-initializers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-field-initializers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-field-initializers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingMethodReturnType",
              "shortDescription": {
                "text": "missing-method-return-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-method-return-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-method-return-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingMultilib",
              "shortDescription": {
                "text": "missing-multilib clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-multilib clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-multilib\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingNoescape",
              "shortDescription": {
                "text": "missing-noescape clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-noescape clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-noescape\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingNoreturn",
              "shortDescription": {
                "text": "missing-noreturn clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-noreturn clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-noreturn\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingPrototypeForCc",
              "shortDescription": {
                "text": "missing-prototype-for-cc clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-prototype-for-cc clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-prototype-for-cc\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingPrototypes",
              "shortDescription": {
                "text": "missing-prototypes clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-prototypes clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-prototypes\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingSelectorName",
              "shortDescription": {
                "text": "missing-selector-name clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-selector-name clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-selector-name\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingSysroot",
              "shortDescription": {
                "text": "missing-sysroot clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-sysroot clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-sysroot\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingTemplateArgListAfterTemplateKw",
              "shortDescription": {
                "text": "missing-template-arg-list-after-template-kw clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-template-arg-list-after-template-kw clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-template-arg-list-after-template-kw\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMissingVariableDeclarations",
              "shortDescription": {
                "text": "missing-variable-declarations clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmissing-variable-declarations clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmissing-variable-declarations\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMisspelledAssumption",
              "shortDescription": {
                "text": "misspelled-assumption clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmisspelled-assumption clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmisspelled-assumption\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMixPackoffset",
              "shortDescription": {
                "text": "mix-packoffset clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmix-packoffset clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmix-packoffset\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticModuleConflict",
              "shortDescription": {
                "text": "module-conflict clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmodule-conflict clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmodule-conflict\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticModuleFileConfigMismatch",
              "shortDescription": {
                "text": "module-file-config-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmodule-file-config-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmodule-file-config-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticModuleFileExtension",
              "shortDescription": {
                "text": "module-file-extension clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmodule-file-extension clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmodule-file-extension\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticModuleImportInExternC",
              "shortDescription": {
                "text": "module-import-in-extern-c clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmodule-import-in-extern-c clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmodule-import-in-extern-c\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticModulesAmbiguousInternalLinkage",
              "shortDescription": {
                "text": "modules-ambiguous-internal-linkage clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmodules-ambiguous-internal-linkage clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmodules-ambiguous-internal-linkage\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticModulesImportNestedRedundant",
              "shortDescription": {
                "text": "modules-import-nested-redundant clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmodules-import-nested-redundant clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmodules-import-nested-redundant\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMsvcNotFound",
              "shortDescription": {
                "text": "msvc-not-found clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmsvc-not-found clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmsvc-not-found\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMultiGpu",
              "shortDescription": {
                "text": "multi-gpu clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmulti-gpu clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmulti-gpu\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMultichar",
              "shortDescription": {
                "text": "multichar clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmultichar clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmultichar\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticMultipleMoveVbase",
              "shortDescription": {
                "text": "multiple-move-vbase clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wmultiple-move-vbase clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wmultiple-move-vbase\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNSObjectAttribute",
              "shortDescription": {
                "text": "NSObject-attribute clang diagnostic"
              },
              "fullDescription": {
                "text": "-WNSObject-attribute clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wNSObject-attribute\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNanInfinityDisabled",
              "shortDescription": {
                "text": "nan-infinity-disabled clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnan-infinity-disabled clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnan-infinity-disabled\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNestedAnonTypes",
              "shortDescription": {
                "text": "nested-anon-types clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnested-anon-types clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnested-anon-types\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNewReturnsNull",
              "shortDescription": {
                "text": "new-returns-null clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnew-returns-null clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnew-returns-null\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNewlineEof",
              "shortDescription": {
                "text": "newline-eof clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnewline-eof clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnewline-eof\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNoderef",
              "shortDescription": {
                "text": "noderef clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnoderef clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnoderef\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonCTypedefForLinkage",
              "shortDescription": {
                "text": "non-c-typedef-for-linkage clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnon-c-typedef-for-linkage clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnon-c-typedef-for-linkage\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonLiteralNullConversion",
              "shortDescription": {
                "text": "non-literal-null-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnon-literal-null-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnon-literal-null-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonModularIncludeInFrameworkModule",
              "shortDescription": {
                "text": "non-modular-include-in-framework-module clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnon-modular-include-in-framework-module clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnon-modular-include-in-framework-module\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonModularIncludeInModule",
              "shortDescription": {
                "text": "non-modular-include-in-module clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnon-modular-include-in-module clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnon-modular-include-in-module\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonPodVarargs",
              "shortDescription": {
                "text": "non-pod-varargs clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnon-pod-varargs clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnon-pod-varargs\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonPowerOfTwoAlignment",
              "shortDescription": {
                "text": "non-power-of-two-alignment clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnon-power-of-two-alignment clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnon-power-of-two-alignment\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonVirtualDtor",
              "shortDescription": {
                "text": "non-virtual-dtor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnon-virtual-dtor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnon-virtual-dtor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonnull",
              "shortDescription": {
                "text": "nonnull clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnonnull clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnonnull\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonportableIncludePath",
              "shortDescription": {
                "text": "nonportable-include-path clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnonportable-include-path clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-include-path\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonportableSystemIncludePath",
              "shortDescription": {
                "text": "nonportable-system-include-path clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnonportable-system-include-path clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-system-include-path\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNonportableVectorInitialization",
              "shortDescription": {
                "text": "nonportable-vector-initialization clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnonportable-vector-initialization clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-vector-initialization\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNontrivialMemaccess",
              "shortDescription": {
                "text": "nontrivial-memaccess clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnontrivial-memaccess clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnontrivial-memaccess\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNontrivialMemcall",
              "shortDescription": {
                "text": "nontrivial-memcall clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnontrivial-memcall clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnontrivial-memcall\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNsconsumedMismatch",
              "shortDescription": {
                "text": "nsconsumed-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnsconsumed-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnsconsumed-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNsreturnsMismatch",
              "shortDescription": {
                "text": "nsreturns-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnsreturns-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnsreturns-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullArithmetic",
              "shortDescription": {
                "text": "null-arithmetic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnull-arithmetic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnull-arithmetic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullCharacter",
              "shortDescription": {
                "text": "null-character clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnull-character clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnull-character\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullConversion",
              "shortDescription": {
                "text": "null-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnull-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnull-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullDereference",
              "shortDescription": {
                "text": "null-dereference clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnull-dereference clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnull-dereference\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullPointerArithmetic",
              "shortDescription": {
                "text": "null-pointer-arithmetic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnull-pointer-arithmetic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnull-pointer-arithmetic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullPointerSubtraction",
              "shortDescription": {
                "text": "null-pointer-subtraction clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnull-pointer-subtraction clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnull-pointer-subtraction\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullability",
              "shortDescription": {
                "text": "nullability clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnullability clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnullability\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullabilityCompleteness",
              "shortDescription": {
                "text": "nullability-completeness clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnullability-completeness clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnullability-completeness\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullabilityCompletenessOnArrays",
              "shortDescription": {
                "text": "nullability-completeness-on-arrays clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnullability-completeness-on-arrays clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnullability-completeness-on-arrays\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullabilityDeclspec",
              "shortDescription": {
                "text": "nullability-declspec clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnullability-declspec clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnullability-declspec\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullabilityExtension",
              "shortDescription": {
                "text": "nullability-extension clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnullability-extension clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnullability-extension\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullabilityInferredOnNestedType",
              "shortDescription": {
                "text": "nullability-inferred-on-nested-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnullability-inferred-on-nested-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnullability-inferred-on-nested-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNullableToNonnullConversion",
              "shortDescription": {
                "text": "nullable-to-nonnull-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnullable-to-nonnull-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnullable-to-nonnull-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticNvccCompat",
              "shortDescription": {
                "text": "nvcc-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wnvcc-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wnvcc-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOdr",
              "shortDescription": {
                "text": "odr clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wodr clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wodr\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOldStyleCast",
              "shortDescription": {
                "text": "old-style-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wold-style-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wold-style-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOpenaccDeprecatedClauseAlias",
              "shortDescription": {
                "text": "openacc-deprecated-clause-alias clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wopenacc-deprecated-clause-alias clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wopenacc-deprecated-clause-alias\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOpenaccSelfIfPotentialConflict",
              "shortDescription": {
                "text": "openacc-self-if-potential-conflict clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wopenacc-self-if-potential-conflict clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wopenacc-self-if-potential-conflict\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOpenclUnsupportedRgba",
              "shortDescription": {
                "text": "opencl-unsupported-rgba clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wopencl-unsupported-rgba clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wopencl-unsupported-rgba\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOpenmp51Extensions",
              "shortDescription": {
                "text": "openmp-51-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wopenmp-51-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-51-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOpenmpClauses",
              "shortDescription": {
                "text": "openmp-clauses clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wopenmp-clauses clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-clauses\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOpenmpExtensions",
              "shortDescription": {
                "text": "openmp-extensions clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wopenmp-extensions clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-extensions\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOpenmpLoopForm",
              "shortDescription": {
                "text": "openmp-loop-form clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wopenmp-loop-form clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-loop-form\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOpenmpMapping",
              "shortDescription": {
                "text": "openmp-mapping clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wopenmp-mapping clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-mapping\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOpenmpTarget",
              "shortDescription": {
                "text": "openmp-target clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wopenmp-target clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-target\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOpenmpTargetException",
              "shortDescription": {
                "text": "openmp-target-exception clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wopenmp-target-exception clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-target-exception\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOptionIgnored",
              "shortDescription": {
                "text": "option-ignored clang diagnostic"
              },
              "fullDescription": {
                "text": "-Woption-ignored clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#woption-ignored\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOrderedCompareFunctionPointers",
              "shortDescription": {
                "text": "ordered-compare-function-pointers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wordered-compare-function-pointers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wordered-compare-function-pointers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOutOfLineDeclaration",
              "shortDescription": {
                "text": "out-of-line-declaration clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wout-of-line-declaration clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wout-of-line-declaration\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOutOfScopeFunction",
              "shortDescription": {
                "text": "out-of-scope-function clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wout-of-scope-function clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wout-of-scope-function\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOverAligned",
              "shortDescription": {
                "text": "over-aligned clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wover-aligned clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wover-aligned\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOverlengthStrings",
              "shortDescription": {
                "text": "overlength-strings clang diagnostic"
              },
              "fullDescription": {
                "text": "-Woverlength-strings clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#woverlength-strings\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOverloadedShiftOpParentheses",
              "shortDescription": {
                "text": "overloaded-shift-op-parentheses clang diagnostic"
              },
              "fullDescription": {
                "text": "-Woverloaded-shift-op-parentheses clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#woverloaded-shift-op-parentheses\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOverloadedVirtual",
              "shortDescription": {
                "text": "overloaded-virtual clang diagnostic"
              },
              "fullDescription": {
                "text": "-Woverloaded-virtual clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#woverloaded-virtual\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOverrideInit",
              "shortDescription": {
                "text": "override-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Woverride-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#woverride-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOverrideModule",
              "shortDescription": {
                "text": "override-module clang diagnostic"
              },
              "fullDescription": {
                "text": "-Woverride-module clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#woverride-module\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOverridingMethodMismatch",
              "shortDescription": {
                "text": "overriding-method-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Woverriding-method-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#woverriding-method-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticOverridingOption",
              "shortDescription": {
                "text": "overriding-option clang diagnostic"
              },
              "fullDescription": {
                "text": "-Woverriding-option clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#woverriding-option\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPacked",
              "shortDescription": {
                "text": "packed clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpacked clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpacked\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPackedNonPod",
              "shortDescription": {
                "text": "packed-non-pod clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpacked-non-pod clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpacked-non-pod\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPadded",
              "shortDescription": {
                "text": "padded clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpadded clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpadded\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPaddedBitfield",
              "shortDescription": {
                "text": "padded-bitfield clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpadded-bitfield clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpadded-bitfield\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticParentheses",
              "shortDescription": {
                "text": "parentheses clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wparentheses clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wparentheses\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticParenthesesEquality",
              "shortDescription": {
                "text": "parentheses-equality clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wparentheses-equality clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wparentheses-equality\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPassFailed",
              "shortDescription": {
                "text": "pass-failed clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpass-failed clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpass-failed\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPchDateTime",
              "shortDescription": {
                "text": "pch-date-time clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpch-date-time clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpch-date-time\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPedantic",
              "shortDescription": {
                "text": "pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPedanticCoreFeatures",
              "shortDescription": {
                "text": "pedantic-core-features clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpedantic-core-features clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpedantic-core-features\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPedanticMacros",
              "shortDescription": {
                "text": "pedantic-macros clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpedantic-macros clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpedantic-macros\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPerfConstraintImpliesNoexcept",
              "shortDescription": {
                "text": "perf-constraint-implies-noexcept clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wperf-constraint-implies-noexcept clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wperf-constraint-implies-noexcept\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPessimizingMove",
              "shortDescription": {
                "text": "pessimizing-move clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpessimizing-move clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpessimizing-move\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPointerArith",
              "shortDescription": {
                "text": "pointer-arith clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpointer-arith clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpointer-arith\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPointerBoolConversion",
              "shortDescription": {
                "text": "pointer-bool-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpointer-bool-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpointer-bool-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPointerCompare",
              "shortDescription": {
                "text": "pointer-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpointer-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpointer-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPointerIntegerCompare",
              "shortDescription": {
                "text": "pointer-integer-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpointer-integer-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpointer-integer-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPointerSign",
              "shortDescription": {
                "text": "pointer-sign clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpointer-sign clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpointer-sign\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPointerToEnumCast",
              "shortDescription": {
                "text": "pointer-to-enum-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpointer-to-enum-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpointer-to-enum-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPointerToIntCast",
              "shortDescription": {
                "text": "pointer-to-int-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpointer-to-int-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpointer-to-int-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPointerTypeMismatch",
              "shortDescription": {
                "text": "pointer-type-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpointer-type-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpointer-type-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPoisonSystemDirectories",
              "shortDescription": {
                "text": "poison-system-directories clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpoison-system-directories clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpoison-system-directories\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPotentiallyEvaluatedExpression",
              "shortDescription": {
                "text": "potentially-evaluated-expression clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpotentially-evaluated-expression clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpotentially-evaluated-expression\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPragmaClangAttribute",
              "shortDescription": {
                "text": "pragma-clang-attribute clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpragma-clang-attribute clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpragma-clang-attribute\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPragmaMessages",
              "shortDescription": {
                "text": "#pragma-messages clang diagnostic"
              },
              "fullDescription": {
                "text": "-W#pragma-messages clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#w-pragma-messages\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPragmaOnceOutsideHeader",
              "shortDescription": {
                "text": "pragma-once-outside-header clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpragma-once-outside-header clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpragma-once-outside-header\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPragmaPack",
              "shortDescription": {
                "text": "pragma-pack clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpragma-pack clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpragma-pack\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPragmaPackSuspiciousInclude",
              "shortDescription": {
                "text": "pragma-pack-suspicious-include clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpragma-pack-suspicious-include clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpragma-pack-suspicious-include\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPragmaSystemHeaderOutsideHeader",
              "shortDescription": {
                "text": "pragma-system-header-outside-header clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpragma-system-header-outside-header clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpragma-system-header-outside-header\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPragmas",
              "shortDescription": {
                "text": "pragmas clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpragmas clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpragmas\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreC11Compat",
              "shortDescription": {
                "text": "pre-c11-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c11-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c11-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreC11CompatPedantic",
              "shortDescription": {
                "text": "pre-c11-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c11-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c11-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreC23Compat",
              "shortDescription": {
                "text": "pre-c23-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c23-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c23-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreC23CompatPedantic",
              "shortDescription": {
                "text": "pre-c23-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c23-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c23-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreC2xCompat",
              "shortDescription": {
                "text": "pre-c2x-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c2x-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c2x-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreC2xCompatPedantic",
              "shortDescription": {
                "text": "pre-c2x-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c2x-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c2x-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreC2yCompat",
              "shortDescription": {
                "text": "pre-c2y-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c2y-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c2y-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreC2yCompatPedantic",
              "shortDescription": {
                "text": "pre-c2y-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c2y-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c2y-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp14Compat",
              "shortDescription": {
                "text": "pre-c++14-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++14-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-14-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp14CompatPedantic",
              "shortDescription": {
                "text": "pre-c++14-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++14-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-14-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp17Compat",
              "shortDescription": {
                "text": "pre-c++17-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++17-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-17-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp17CompatPedantic",
              "shortDescription": {
                "text": "pre-c++17-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++17-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-17-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp20Compat",
              "shortDescription": {
                "text": "pre-c++20-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++20-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-20-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp20CompatPedantic",
              "shortDescription": {
                "text": "pre-c++20-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++20-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-20-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp23Compat",
              "shortDescription": {
                "text": "pre-c++23-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++23-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-23-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp23CompatPedantic",
              "shortDescription": {
                "text": "pre-c++23-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++23-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-23-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp26Compat",
              "shortDescription": {
                "text": "pre-c++26-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++26-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-26-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp26CompatPedantic",
              "shortDescription": {
                "text": "pre-c++26-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++26-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-26-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp2cCompat",
              "shortDescription": {
                "text": "pre-c++2c-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++2c-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-2c-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreCpp2cCompatPedantic",
              "shortDescription": {
                "text": "pre-c++2c-compat-pedantic clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-c++2c-compat-pedantic clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-2c-compat-pedantic\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPreOpenmp51Compat",
              "shortDescription": {
                "text": "pre-openmp-51-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpre-openmp-51-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpre-openmp-51-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPredefinedIdentifierOutsideFunction",
              "shortDescription": {
                "text": "predefined-identifier-outside-function clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpredefined-identifier-outside-function clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpredefined-identifier-outside-function\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPrivateExtern",
              "shortDescription": {
                "text": "private-extern clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wprivate-extern clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wprivate-extern\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPrivateHeader",
              "shortDescription": {
                "text": "private-header clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wprivate-header clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wprivate-header\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPrivateModule",
              "shortDescription": {
                "text": "private-module clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wprivate-module clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wprivate-module\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticProfileInstrMissing",
              "shortDescription": {
                "text": "profile-instr-missing clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wprofile-instr-missing clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-missing\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticProfileInstrOutOfDate",
              "shortDescription": {
                "text": "profile-instr-out-of-date clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wprofile-instr-out-of-date clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-out-of-date\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticProfileInstrUnprofiled",
              "shortDescription": {
                "text": "profile-instr-unprofiled clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wprofile-instr-unprofiled clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-unprofiled\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPropertyAccessDotSyntax",
              "shortDescription": {
                "text": "property-access-dot-syntax clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wproperty-access-dot-syntax clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wproperty-access-dot-syntax\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPropertyAttributeMismatch",
              "shortDescription": {
                "text": "property-attribute-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wproperty-attribute-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wproperty-attribute-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticProtocol",
              "shortDescription": {
                "text": "protocol clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wprotocol clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wprotocol\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticProtocolPropertySynthesisAmbiguity",
              "shortDescription": {
                "text": "protocol-property-synthesis-ambiguity clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wprotocol-property-synthesis-ambiguity clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wprotocol-property-synthesis-ambiguity\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPsabi",
              "shortDescription": {
                "text": "psabi clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wpsabi clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wpsabi\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticPtrauthNullPointers",
              "shortDescription": {
                "text": "ptrauth-null-pointers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wptrauth-null-pointers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wptrauth-null-pointers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticQualifiedVoidReturnType",
              "shortDescription": {
                "text": "qualified-void-return-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wqualified-void-return-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wqualified-void-return-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticQuotedIncludeInFrameworkHeader",
              "shortDescription": {
                "text": "quoted-include-in-framework-header clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wquoted-include-in-framework-header clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wquoted-include-in-framework-header\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRangeLoopAnalysis",
              "shortDescription": {
                "text": "range-loop-analysis clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wrange-loop-analysis clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-analysis\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRangeLoopBindReference",
              "shortDescription": {
                "text": "range-loop-bind-reference clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wrange-loop-bind-reference clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-bind-reference\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRangeLoopConstruct",
              "shortDescription": {
                "text": "range-loop-construct clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wrange-loop-construct clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-construct\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReadOnlyTypes",
              "shortDescription": {
                "text": "read-only-types clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wread-only-types clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wread-only-types\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReadonlyIboutletProperty",
              "shortDescription": {
                "text": "readonly-iboutlet-property clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreadonly-iboutlet-property clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreadonly-iboutlet-property\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReceiverExpr",
              "shortDescription": {
                "text": "receiver-expr clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreceiver-expr clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreceiver-expr\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReceiverForwardClass",
              "shortDescription": {
                "text": "receiver-forward-class clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreceiver-forward-class clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreceiver-forward-class\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRedeclaredClassMember",
              "shortDescription": {
                "text": "redeclared-class-member clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wredeclared-class-member clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wredeclared-class-member\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRedundantAttribute",
              "shortDescription": {
                "text": "redundant-attribute clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wredundant-attribute clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wredundant-attribute\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRedundantConstevalIf",
              "shortDescription": {
                "text": "redundant-consteval-if clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wredundant-consteval-if clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wredundant-consteval-if\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRedundantMove",
              "shortDescription": {
                "text": "redundant-move clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wredundant-move clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wredundant-move\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRedundantParens",
              "shortDescription": {
                "text": "redundant-parens clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wredundant-parens clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wredundant-parens\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRegister",
              "shortDescription": {
                "text": "register clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wregister clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wregister\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReinterpretBaseClass",
              "shortDescription": {
                "text": "reinterpret-base-class clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreinterpret-base-class clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreinterpret-base-class\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReorder",
              "shortDescription": {
                "text": "reorder clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreorder clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreorder\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReorderCtor",
              "shortDescription": {
                "text": "reorder-ctor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreorder-ctor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreorder-ctor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReorderInitList",
              "shortDescription": {
                "text": "reorder-init-list clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreorder-init-list clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreorder-init-list\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRequiresSuperAttribute",
              "shortDescription": {
                "text": "requires-super-attribute clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wrequires-super-attribute clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wrequires-super-attribute\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReservedAttributeIdentifier",
              "shortDescription": {
                "text": "reserved-attribute-identifier clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreserved-attribute-identifier clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreserved-attribute-identifier\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReservedIdMacro",
              "shortDescription": {
                "text": "reserved-id-macro clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreserved-id-macro clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreserved-id-macro\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReservedIdentifier",
              "shortDescription": {
                "text": "reserved-identifier clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreserved-identifier clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreserved-identifier\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReservedMacroIdentifier",
              "shortDescription": {
                "text": "reserved-macro-identifier clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreserved-macro-identifier clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreserved-macro-identifier\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReservedModuleIdentifier",
              "shortDescription": {
                "text": "reserved-module-identifier clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreserved-module-identifier clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreserved-module-identifier\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReservedUserDefinedLiteral",
              "shortDescription": {
                "text": "reserved-user-defined-literal clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreserved-user-defined-literal clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreserved-user-defined-literal\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRestrictExpansion",
              "shortDescription": {
                "text": "restrict-expansion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wrestrict-expansion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wrestrict-expansion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRetainedLanguageLinkage",
              "shortDescription": {
                "text": "retained-language-linkage clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wretained-language-linkage clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wretained-language-linkage\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReturnLocalAddr",
              "shortDescription": {
                "text": "return-local-addr clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreturn-local-addr clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreturn-local-addr\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReturnMismatch",
              "shortDescription": {
                "text": "return-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreturn-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreturn-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReturnStackAddress",
              "shortDescription": {
                "text": "return-stack-address clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreturn-stack-address clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreturn-stack-address\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReturnStdMove",
              "shortDescription": {
                "text": "return-std-move clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreturn-std-move clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreturn-std-move\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReturnType",
              "shortDescription": {
                "text": "return-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreturn-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreturn-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticReturnTypeCLinkage",
              "shortDescription": {
                "text": "return-type-c-linkage clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wreturn-type-c-linkage clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wreturn-type-c-linkage\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticRewriteNotBool",
              "shortDescription": {
                "text": "rewrite-not-bool clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wrewrite-not-bool clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wrewrite-not-bool\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSarifFormatUnstable",
              "shortDescription": {
                "text": "sarif-format-unstable clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsarif-format-unstable clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsarif-format-unstable\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSection",
              "shortDescription": {
                "text": "section clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsection clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsection\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSelector",
              "shortDescription": {
                "text": "selector clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wselector clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wselector\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSelectorTypeMismatch",
              "shortDescription": {
                "text": "selector-type-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wselector-type-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wselector-type-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSelfAssign",
              "shortDescription": {
                "text": "self-assign clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wself-assign clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wself-assign\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSelfAssignField",
              "shortDescription": {
                "text": "self-assign-field clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wself-assign-field clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wself-assign-field\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSelfAssignOverloaded",
              "shortDescription": {
                "text": "self-assign-overloaded clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wself-assign-overloaded clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wself-assign-overloaded\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSelfMove",
              "shortDescription": {
                "text": "self-move clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wself-move clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wself-move\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSemicolonBeforeMethodBody",
              "shortDescription": {
                "text": "semicolon-before-method-body clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsemicolon-before-method-body clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsemicolon-before-method-body\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSentinel",
              "shortDescription": {
                "text": "sentinel clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsentinel clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsentinel\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSerializedDiagnostics",
              "shortDescription": {
                "text": "serialized-diagnostics clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wserialized-diagnostics clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wserialized-diagnostics\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShadow",
              "shortDescription": {
                "text": "shadow clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshadow clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshadow\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShadowField",
              "shortDescription": {
                "text": "shadow-field clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshadow-field clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShadowFieldInConstructor",
              "shortDescription": {
                "text": "shadow-field-in-constructor clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshadow-field-in-constructor clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field-in-constructor\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShadowFieldInConstructorModified",
              "shortDescription": {
                "text": "shadow-field-in-constructor-modified clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshadow-field-in-constructor-modified clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field-in-constructor-modified\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShadowIvar",
              "shortDescription": {
                "text": "shadow-ivar clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshadow-ivar clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshadow-ivar\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShadowUncapturedLocal",
              "shortDescription": {
                "text": "shadow-uncaptured-local clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshadow-uncaptured-local clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshadow-uncaptured-local\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShiftCountNegative",
              "shortDescription": {
                "text": "shift-count-negative clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshift-count-negative clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshift-count-negative\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShiftCountOverflow",
              "shortDescription": {
                "text": "shift-count-overflow clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshift-count-overflow clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshift-count-overflow\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShiftNegativeValue",
              "shortDescription": {
                "text": "shift-negative-value clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshift-negative-value clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshift-negative-value\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShiftOpParentheses",
              "shortDescription": {
                "text": "shift-op-parentheses clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshift-op-parentheses clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshift-op-parentheses\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShiftOverflow",
              "shortDescription": {
                "text": "shift-overflow clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshift-overflow clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshift-overflow\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShiftSignOverflow",
              "shortDescription": {
                "text": "shift-sign-overflow clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshift-sign-overflow clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshift-sign-overflow\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticShorten64To32",
              "shortDescription": {
                "text": "shorten-64-to-32 clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wshorten-64-to-32 clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wshorten-64-to-32\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSignCompare",
              "shortDescription": {
                "text": "sign-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsign-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsign-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSignConversion",
              "shortDescription": {
                "text": "sign-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsign-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsign-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSignedEnumBitfield",
              "shortDescription": {
                "text": "signed-enum-bitfield clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsigned-enum-bitfield clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsigned-enum-bitfield\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSignedUnsignedWchar",
              "shortDescription": {
                "text": "signed-unsigned-wchar clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsigned-unsigned-wchar clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsigned-unsigned-wchar\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSingleBitBitfieldConstantConversion",
              "shortDescription": {
                "text": "single-bit-bitfield-constant-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsingle-bit-bitfield-constant-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsingle-bit-bitfield-constant-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSizeofArrayArgument",
              "shortDescription": {
                "text": "sizeof-array-argument clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsizeof-array-argument clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-argument\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSizeofArrayDecay",
              "shortDescription": {
                "text": "sizeof-array-decay clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsizeof-array-decay clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-decay\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSizeofArrayDiv",
              "shortDescription": {
                "text": "sizeof-array-div clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsizeof-array-div clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-div\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSizeofPointerDiv",
              "shortDescription": {
                "text": "sizeof-pointer-div clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsizeof-pointer-div clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-pointer-div\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSizeofPointerMemaccess",
              "shortDescription": {
                "text": "sizeof-pointer-memaccess clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsizeof-pointer-memaccess clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-pointer-memaccess\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSlashUFilename",
              "shortDescription": {
                "text": "slash-u-filename clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wslash-u-filename clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wslash-u-filename\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSlhAsmGoto",
              "shortDescription": {
                "text": "slh-asm-goto clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wslh-asm-goto clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wslh-asm-goto\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSometimesUninitialized",
              "shortDescription": {
                "text": "sometimes-uninitialized clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsometimes-uninitialized clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsometimes-uninitialized\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSourceUsesOpenacc",
              "shortDescription": {
                "text": "source-uses-openacc clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsource-uses-openacc clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsource-uses-openacc\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSourceUsesOpenmp",
              "shortDescription": {
                "text": "source-uses-openmp clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsource-uses-openmp clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsource-uses-openmp\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSpirCompat",
              "shortDescription": {
                "text": "spir-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wspir-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wspir-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSpirvCompat",
              "shortDescription": {
                "text": "spirv-compat clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wspirv-compat clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wspirv-compat\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStaticFloatInit",
              "shortDescription": {
                "text": "static-float-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstatic-float-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstatic-float-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStaticInInline",
              "shortDescription": {
                "text": "static-in-inline clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstatic-in-inline clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstatic-in-inline\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStaticInlineExplicitInstantiation",
              "shortDescription": {
                "text": "static-inline-explicit-instantiation clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstatic-inline-explicit-instantiation clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstatic-inline-explicit-instantiation\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStaticLocalInInline",
              "shortDescription": {
                "text": "static-local-in-inline clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstatic-local-in-inline clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstatic-local-in-inline\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStaticSelfInit",
              "shortDescription": {
                "text": "static-self-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstatic-self-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstatic-self-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStdlibcxxNotFound",
              "shortDescription": {
                "text": "stdlibcxx-not-found clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstdlibcxx-not-found clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstdlibcxx-not-found\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStrictPrimaryTemplateShadow",
              "shortDescription": {
                "text": "strict-primary-template-shadow clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstrict-primary-template-shadow clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstrict-primary-template-shadow\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStrictPrototypes",
              "shortDescription": {
                "text": "strict-prototypes clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstrict-prototypes clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstrict-prototypes\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStrictSelectorMatch",
              "shortDescription": {
                "text": "strict-selector-match clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstrict-selector-match clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstrict-selector-match\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStringCompare",
              "shortDescription": {
                "text": "string-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstring-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstring-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStringConcatenation",
              "shortDescription": {
                "text": "string-concatenation clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstring-concatenation clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstring-concatenation\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStringConversion",
              "shortDescription": {
                "text": "string-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstring-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstring-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStringPlusChar",
              "shortDescription": {
                "text": "string-plus-char clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstring-plus-char clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstring-plus-char\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStringPlusInt",
              "shortDescription": {
                "text": "string-plus-int clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstring-plus-int clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstring-plus-int\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStrlcpyStrlcatSize",
              "shortDescription": {
                "text": "strlcpy-strlcat-size clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstrlcpy-strlcat-size clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstrlcpy-strlcat-size\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticStrncatSize",
              "shortDescription": {
                "text": "strncat-size clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wstrncat-size clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wstrncat-size\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSuggestDestructorOverride",
              "shortDescription": {
                "text": "suggest-destructor-override clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsuggest-destructor-override clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsuggest-destructor-override\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSuggestOverride",
              "shortDescription": {
                "text": "suggest-override clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsuggest-override clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsuggest-override\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSuperClassMethodMismatch",
              "shortDescription": {
                "text": "super-class-method-mismatch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsuper-class-method-mismatch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsuper-class-method-mismatch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSuspiciousBzero",
              "shortDescription": {
                "text": "suspicious-bzero clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsuspicious-bzero clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsuspicious-bzero\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSwitch",
              "shortDescription": {
                "text": "switch clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wswitch clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wswitch\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSwitchBool",
              "shortDescription": {
                "text": "switch-bool clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wswitch-bool clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wswitch-bool\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSwitchDefault",
              "shortDescription": {
                "text": "switch-default clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wswitch-default clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wswitch-default\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSwitchEnum",
              "shortDescription": {
                "text": "switch-enum clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wswitch-enum clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wswitch-enum\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSyncAlignment",
              "shortDescription": {
                "text": "sync-alignment clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsync-alignment clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsync-alignment\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticSyncFetchAndNandSemanticsChanged",
              "shortDescription": {
                "text": "sync-fetch-and-nand-semantics-changed clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wsync-fetch-and-nand-semantics-changed clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wsync-fetch-and-nand-semantics-changed\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTargetClonesMixedSpecifiers",
              "shortDescription": {
                "text": "target-clones-mixed-specifiers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtarget-clones-mixed-specifiers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtarget-clones-mixed-specifiers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalBitwiseCompare",
              "shortDescription": {
                "text": "tautological-bitwise-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-bitwise-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-bitwise-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalCompare",
              "shortDescription": {
                "text": "tautological-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalConstantCompare",
              "shortDescription": {
                "text": "tautological-constant-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-constant-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalConstantInRangeCompare",
              "shortDescription": {
                "text": "tautological-constant-in-range-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-constant-in-range-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-in-range-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalConstantOutOfRangeCompare",
              "shortDescription": {
                "text": "tautological-constant-out-of-range-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-constant-out-of-range-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-out-of-range-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalNegationCompare",
              "shortDescription": {
                "text": "tautological-negation-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-negation-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-negation-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalObjcBoolCompare",
              "shortDescription": {
                "text": "tautological-objc-bool-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-objc-bool-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-objc-bool-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalOverlapCompare",
              "shortDescription": {
                "text": "tautological-overlap-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-overlap-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-overlap-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalPointerCompare",
              "shortDescription": {
                "text": "tautological-pointer-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-pointer-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-pointer-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalTypeLimitCompare",
              "shortDescription": {
                "text": "tautological-type-limit-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-type-limit-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-type-limit-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalUndefinedCompare",
              "shortDescription": {
                "text": "tautological-undefined-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-undefined-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-undefined-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalUnsignedCharZeroCompare",
              "shortDescription": {
                "text": "tautological-unsigned-char-zero-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-unsigned-char-zero-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-char-zero-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalUnsignedEnumZeroCompare",
              "shortDescription": {
                "text": "tautological-unsigned-enum-zero-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-unsigned-enum-zero-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-enum-zero-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalUnsignedZeroCompare",
              "shortDescription": {
                "text": "tautological-unsigned-zero-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-unsigned-zero-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-zero-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTautologicalValueRangeCompare",
              "shortDescription": {
                "text": "tautological-value-range-compare clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtautological-value-range-compare clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtautological-value-range-compare\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTemplateInDeclarationName",
              "shortDescription": {
                "text": "template-in-declaration-name clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtemplate-in-declaration-name clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtemplate-in-declaration-name\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTentativeDefinitionArray",
              "shortDescription": {
                "text": "tentative-definition-array clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtentative-definition-array clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtentative-definition-array\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTentativeDefinitionIncompleteType",
              "shortDescription": {
                "text": "tentative-definition-incomplete-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtentative-definition-incomplete-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtentative-definition-incomplete-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticThreadSafetyAnalysis",
              "shortDescription": {
                "text": "thread-safety-analysis clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wthread-safety-analysis clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-analysis\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticThreadSafetyAttributes",
              "shortDescription": {
                "text": "thread-safety-attributes clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wthread-safety-attributes clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-attributes\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticThreadSafetyBeta",
              "shortDescription": {
                "text": "thread-safety-beta clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wthread-safety-beta clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-beta\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticThreadSafetyNegative",
              "shortDescription": {
                "text": "thread-safety-negative clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wthread-safety-negative clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-negative\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticThreadSafetyPrecise",
              "shortDescription": {
                "text": "thread-safety-precise clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wthread-safety-precise clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-precise\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticThreadSafetyReference",
              "shortDescription": {
                "text": "thread-safety-reference clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wthread-safety-reference clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-reference\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticThreadSafetyReferenceReturn",
              "shortDescription": {
                "text": "thread-safety-reference-return clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wthread-safety-reference-return clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-reference-return\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticThreadSafetyVerbose",
              "shortDescription": {
                "text": "thread-safety-verbose clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wthread-safety-verbose clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-verbose\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTrigraphs",
              "shortDescription": {
                "text": "trigraphs clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtrigraphs clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtrigraphs\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTypeSafety",
              "shortDescription": {
                "text": "type-safety clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtype-safety clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtype-safety\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTypedefRedefinition",
              "shortDescription": {
                "text": "typedef-redefinition clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtypedef-redefinition clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtypedef-redefinition\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticTypenameMissing",
              "shortDescription": {
                "text": "typename-missing clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wtypename-missing clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wtypename-missing\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnableToOpenStatsFile",
              "shortDescription": {
                "text": "unable-to-open-stats-file clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunable-to-open-stats-file clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunable-to-open-stats-file\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnalignedAccess",
              "shortDescription": {
                "text": "unaligned-access clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunaligned-access clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunaligned-access\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnalignedQualifierImplicitCast",
              "shortDescription": {
                "text": "unaligned-qualifier-implicit-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunaligned-qualifier-implicit-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunaligned-qualifier-implicit-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnavailableDeclarations",
              "shortDescription": {
                "text": "unavailable-declarations clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunavailable-declarations clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunavailable-declarations\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndeclaredSelector",
              "shortDescription": {
                "text": "undeclared-selector clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundeclared-selector clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundeclared-selector\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndef",
              "shortDescription": {
                "text": "undef clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundef clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundef\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndefPrefix",
              "shortDescription": {
                "text": "undef-prefix clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundef-prefix clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundef-prefix\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndefinedArmZa",
              "shortDescription": {
                "text": "undefined-arm-za clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundefined-arm-za clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundefined-arm-za\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndefinedArmZt0",
              "shortDescription": {
                "text": "undefined-arm-zt0 clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundefined-arm-zt0 clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundefined-arm-zt0\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndefinedBoolConversion",
              "shortDescription": {
                "text": "undefined-bool-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundefined-bool-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundefined-bool-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndefinedFuncTemplate",
              "shortDescription": {
                "text": "undefined-func-template clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundefined-func-template clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundefined-func-template\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndefinedInline",
              "shortDescription": {
                "text": "undefined-inline clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundefined-inline clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundefined-inline\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndefinedInternal",
              "shortDescription": {
                "text": "undefined-internal clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundefined-internal clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundefined-internal\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndefinedInternalType",
              "shortDescription": {
                "text": "undefined-internal-type clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundefined-internal-type clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundefined-internal-type\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndefinedReinterpretCast",
              "shortDescription": {
                "text": "undefined-reinterpret-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundefined-reinterpret-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundefined-reinterpret-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUndefinedVarTemplate",
              "shortDescription": {
                "text": "undefined-var-template clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wundefined-var-template clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wundefined-var-template\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnderalignedExceptionObject",
              "shortDescription": {
                "text": "underaligned-exception-object clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunderaligned-exception-object clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunderaligned-exception-object\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnevaluatedExpression",
              "shortDescription": {
                "text": "unevaluated-expression clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunevaluated-expression clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunevaluated-expression\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnguardedAvailability",
              "shortDescription": {
                "text": "unguarded-availability clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunguarded-availability clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunguarded-availability\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnguardedAvailabilityNew",
              "shortDescription": {
                "text": "unguarded-availability-new clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunguarded-availability-new clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunguarded-availability-new\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnicode",
              "shortDescription": {
                "text": "unicode clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunicode clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunicode\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnicodeHomoglyph",
              "shortDescription": {
                "text": "unicode-homoglyph clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunicode-homoglyph clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunicode-homoglyph\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnicodeWhitespace",
              "shortDescription": {
                "text": "unicode-whitespace clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunicode-whitespace clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunicode-whitespace\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnicodeZeroWidth",
              "shortDescription": {
                "text": "unicode-zero-width clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunicode-zero-width clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunicode-zero-width\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUninitialized",
              "shortDescription": {
                "text": "uninitialized clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wuninitialized clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wuninitialized\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUninitializedConstReference",
              "shortDescription": {
                "text": "uninitialized-const-reference clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wuninitialized-const-reference clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wuninitialized-const-reference\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUninitializedExplicitInit",
              "shortDescription": {
                "text": "uninitialized-explicit-init clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wuninitialized-explicit-init clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wuninitialized-explicit-init\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnknownArgument",
              "shortDescription": {
                "text": "unknown-argument clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunknown-argument clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunknown-argument\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnknownAttributes",
              "shortDescription": {
                "text": "unknown-attributes clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunknown-attributes clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunknown-attributes\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnknownCudaVersion",
              "shortDescription": {
                "text": "unknown-cuda-version clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunknown-cuda-version clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunknown-cuda-version\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnknownDirectives",
              "shortDescription": {
                "text": "unknown-directives clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunknown-directives clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunknown-directives\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnknownEscapeSequence",
              "shortDescription": {
                "text": "unknown-escape-sequence clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunknown-escape-sequence clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunknown-escape-sequence\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnknownPragmas",
              "shortDescription": {
                "text": "unknown-pragmas clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunknown-pragmas clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunknown-pragmas\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnknownSanitizers",
              "shortDescription": {
                "text": "unknown-sanitizers clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunknown-sanitizers clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunknown-sanitizers\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnknownWarningOption",
              "shortDescription": {
                "text": "unknown-warning-option clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunknown-warning-option clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunknown-warning-option\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnnamedTypeTemplateArgs",
              "shortDescription": {
                "text": "unnamed-type-template-args clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunnamed-type-template-args clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunnamed-type-template-args\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnneededInternalDeclaration",
              "shortDescription": {
                "text": "unneeded-internal-declaration clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunneeded-internal-declaration clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunneeded-internal-declaration\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnneededMemberFunction",
              "shortDescription": {
                "text": "unneeded-member-function clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunneeded-member-function clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunneeded-member-function\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnqualifiedStdCastCall",
              "shortDescription": {
                "text": "unqualified-std-cast-call clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunqualified-std-cast-call clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunqualified-std-cast-call\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnreachableCode",
              "shortDescription": {
                "text": "unreachable-code clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunreachable-code clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnreachableCodeBreak",
              "shortDescription": {
                "text": "unreachable-code-break clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunreachable-code-break clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-break\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnreachableCodeFallthrough",
              "shortDescription": {
                "text": "unreachable-code-fallthrough clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunreachable-code-fallthrough clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-fallthrough\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnreachableCodeGenericAssoc",
              "shortDescription": {
                "text": "unreachable-code-generic-assoc clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunreachable-code-generic-assoc clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-generic-assoc\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnreachableCodeLoopIncrement",
              "shortDescription": {
                "text": "unreachable-code-loop-increment clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunreachable-code-loop-increment clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-loop-increment\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnreachableCodeReturn",
              "shortDescription": {
                "text": "unreachable-code-return clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunreachable-code-return clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-return\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsafeBufferUsage",
              "shortDescription": {
                "text": "unsafe-buffer-usage clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsafe-buffer-usage clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsafe-buffer-usage\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsafeBufferUsageInContainer",
              "shortDescription": {
                "text": "unsafe-buffer-usage-in-container clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsafe-buffer-usage-in-container clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsafe-buffer-usage-in-container\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsafeBufferUsageInLibcCall",
              "shortDescription": {
                "text": "unsafe-buffer-usage-in-libc-call clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsafe-buffer-usage-in-libc-call clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsafe-buffer-usage-in-libc-call\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsequenced",
              "shortDescription": {
                "text": "unsequenced clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsequenced clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsequenced\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsupportedAbi",
              "shortDescription": {
                "text": "unsupported-abi clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsupported-abi clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-abi\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsupportedAbs",
              "shortDescription": {
                "text": "unsupported-abs clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsupported-abs clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-abs\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsupportedAvailabilityGuard",
              "shortDescription": {
                "text": "unsupported-availability-guard clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsupported-availability-guard clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-availability-guard\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsupportedCb",
              "shortDescription": {
                "text": "unsupported-cb clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsupported-cb clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-cb\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsupportedDllBaseClassTemplate",
              "shortDescription": {
                "text": "unsupported-dll-base-class-template clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsupported-dll-base-class-template clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-dll-base-class-template\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsupportedFriend",
              "shortDescription": {
                "text": "unsupported-friend clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsupported-friend clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-friend\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsupportedGpopt",
              "shortDescription": {
                "text": "unsupported-gpopt clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsupported-gpopt clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-gpopt\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsupportedNan",
              "shortDescription": {
                "text": "unsupported-nan clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsupported-nan clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-nan\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsupportedTargetOpt",
              "shortDescription": {
                "text": "unsupported-target-opt clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsupported-target-opt clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-target-opt\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnsupportedVisibility",
              "shortDescription": {
                "text": "unsupported-visibility clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunsupported-visibility clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-visibility\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusablePartialSpecialization",
              "shortDescription": {
                "text": "unusable-partial-specialization clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunusable-partial-specialization clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunusable-partial-specialization\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedButSetParameter",
              "shortDescription": {
                "text": "unused-but-set-parameter clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-but-set-parameter clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-but-set-parameter\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedButSetVariable",
              "shortDescription": {
                "text": "unused-but-set-variable clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-but-set-variable clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-but-set-variable\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedComparison",
              "shortDescription": {
                "text": "unused-comparison clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-comparison clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-comparison\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedConstVariable",
              "shortDescription": {
                "text": "unused-const-variable clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-const-variable clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-const-variable\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedExceptionParameter",
              "shortDescription": {
                "text": "unused-exception-parameter clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-exception-parameter clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-exception-parameter\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedFunction",
              "shortDescription": {
                "text": "unused-function clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-function clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-function\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedGetterReturnValue",
              "shortDescription": {
                "text": "unused-getter-return-value clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-getter-return-value clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-getter-return-value\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedLabel",
              "shortDescription": {
                "text": "unused-label clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-label clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-label\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedLambdaCapture",
              "shortDescription": {
                "text": "unused-lambda-capture clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-lambda-capture clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-lambda-capture\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedLocalTypedef",
              "shortDescription": {
                "text": "unused-local-typedef clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-local-typedef clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-local-typedef\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedMacros",
              "shortDescription": {
                "text": "unused-macros clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-macros clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-macros\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedMemberFunction",
              "shortDescription": {
                "text": "unused-member-function clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-member-function clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-member-function\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedParameter",
              "shortDescription": {
                "text": "unused-parameter clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-parameter clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-parameter\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedPrivateField",
              "shortDescription": {
                "text": "unused-private-field clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-private-field clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-private-field\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedPropertyIvar",
              "shortDescription": {
                "text": "unused-property-ivar clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-property-ivar clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-property-ivar\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedResult",
              "shortDescription": {
                "text": "unused-result clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-result clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-result\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedTemplate",
              "shortDescription": {
                "text": "unused-template clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-template clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-template\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedValue",
              "shortDescription": {
                "text": "unused-value clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-value clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-value\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedVariable",
              "shortDescription": {
                "text": "unused-variable clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-variable clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-variable\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUnusedVolatileLvalue",
              "shortDescription": {
                "text": "unused-volatile-lvalue clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wunused-volatile-lvalue clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wunused-volatile-lvalue\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUsedButMarkedUnused",
              "shortDescription": {
                "text": "used-but-marked-unused clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wused-but-marked-unused clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wused-but-marked-unused\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUserDefinedLiterals",
              "shortDescription": {
                "text": "user-defined-literals clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wuser-defined-literals clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wuser-defined-literals\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticUserDefinedWarnings",
              "shortDescription": {
                "text": "user-defined-warnings clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wuser-defined-warnings clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wuser-defined-warnings\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVarargs",
              "shortDescription": {
                "text": "varargs clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvarargs clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvarargs\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVariadicMacroArgumentsOmitted",
              "shortDescription": {
                "text": "variadic-macro-arguments-omitted clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvariadic-macro-arguments-omitted clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvariadic-macro-arguments-omitted\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVariadicMacros",
              "shortDescription": {
                "text": "variadic-macros clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvariadic-macros clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvariadic-macros\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVecElemSize",
              "shortDescription": {
                "text": "vec-elem-size clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvec-elem-size clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvec-elem-size\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVectorConversion",
              "shortDescription": {
                "text": "vector-conversion clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvector-conversion clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvector-conversion\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVexingParse",
              "shortDescription": {
                "text": "vexing-parse clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvexing-parse clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvexing-parse\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVisibility",
              "shortDescription": {
                "text": "visibility clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvisibility clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvisibility\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVla",
              "shortDescription": {
                "text": "vla clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvla clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvla\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVlaCxxExtension",
              "shortDescription": {
                "text": "vla-cxx-extension clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvla-cxx-extension clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvla-cxx-extension\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVlaExtension",
              "shortDescription": {
                "text": "vla-extension clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvla-extension clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvla-extension\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVlaExtensionStaticAssert",
              "shortDescription": {
                "text": "vla-extension-static-assert clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvla-extension-static-assert clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvla-extension-static-assert\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVoidPointerToEnumCast",
              "shortDescription": {
                "text": "void-pointer-to-enum-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvoid-pointer-to-enum-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvoid-pointer-to-enum-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVoidPointerToIntCast",
              "shortDescription": {
                "text": "void-pointer-to-int-cast clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvoid-pointer-to-int-cast clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvoid-pointer-to-int-cast\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticVoidPtrDereference",
              "shortDescription": {
                "text": "void-ptr-dereference clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wvoid-ptr-dereference clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wvoid-ptr-dereference\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticWarning",
              "shortDescription": {
                "text": "warning clang diagnostic"
              },
              "fullDescription": {
                "text": "Clang warning"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticWarnings",
              "shortDescription": {
                "text": "#warnings clang diagnostic"
              },
              "fullDescription": {
                "text": "-W#warnings clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#w-warnings\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticWasmExceptionSpec",
              "shortDescription": {
                "text": "wasm-exception-spec clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wwasm-exception-spec clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wwasm-exception-spec\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticWeakTemplateVtables",
              "shortDescription": {
                "text": "weak-template-vtables clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wweak-template-vtables clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wweak-template-vtables\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticWeakVtables",
              "shortDescription": {
                "text": "weak-vtables clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wweak-vtables clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wweak-vtables\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticWritableStrings",
              "shortDescription": {
                "text": "writable-strings clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wwritable-strings clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wwritable-strings\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticXorUsedAsPow",
              "shortDescription": {
                "text": "xor-used-as-pow clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wxor-used-as-pow clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wxor-used-as-pow\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticZeroAsNullPointerConstant",
              "shortDescription": {
                "text": "zero-as-null-pointer-constant clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wzero-as-null-pointer-constant clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wzero-as-null-pointer-constant\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyClangDiagnosticZeroLengthArray",
              "shortDescription": {
                "text": "zero-length-array clang diagnostic"
              },
              "fullDescription": {
                "text": "-Wzero-length-array clang diagnostic · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/docs/DiagnosticsReference.html#wzero-length-array\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Clang"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyConcurrencyMtUnsafe",
              "shortDescription": {
                "text": "concurrency: concurrency-mt-unsafe clang-tidy check"
              },
              "fullDescription": {
                "text": "concurrency-mt-unsafe clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/concurrency/mt-unsafe.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyConcurrencyThreadCanceltypeAsynchronous",
              "shortDescription": {
                "text": "concurrency: concurrency-thread-canceltype-asynchronous clang-tidy check"
              },
              "fullDescription": {
                "text": "concurrency-thread-canceltype-asynchronous clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/concurrency/thread-canceltype-asynchronous.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesAvoidCArrays",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-avoid-c-arrays clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-avoid-c-arrays clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-c-arrays.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesAvoidCapturingLambdaCoroutines",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-avoid-capturing-lambda-coroutines clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-avoid-capturing-lambda-coroutines clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-capturing-lambda-coroutines.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesAvoidConstOrRefDataMembers",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-avoid-const-or-ref-data-members clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-avoid-const-or-ref-data-members clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-const-or-ref-data-members.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesAvoidDoWhile",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-avoid-do-while clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-avoid-do-while clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-do-while.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesAvoidGoto",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-avoid-goto clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-avoid-goto clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-goto.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesAvoidMagicNumbers",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-avoid-magic-numbers clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-avoid-magic-numbers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-magic-numbers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesAvoidNonConstGlobalVariables",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-avoid-non-const-global-variables clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-avoid-non-const-global-variables clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-non-const-global-variables.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesAvoidReferenceCoroutineParameters",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-avoid-reference-coroutine-parameters clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-avoid-reference-coroutine-parameters clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-reference-coroutine-parameters.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesCCopyAssignmentSignature",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-c-copy-assignment-signature clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-c-copy-assignment-signature clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/c-copy-assignment-signature.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesExplicitVirtualFunctions",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-explicit-virtual-functions clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-explicit-virtual-functions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/explicit-virtual-functions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesInitVariables",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-init-variables clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-init-variables clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/init-variables.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesInterfacesGlobalInit",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-interfaces-global-init clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-interfaces-global-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/interfaces-global-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesMacroToEnum",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-macro-to-enum clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-macro-to-enum clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/macro-to-enum.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesMacroUsage",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-macro-usage clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-macro-usage clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/macro-usage.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesMisleadingCaptureDefaultByValue",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-misleading-capture-default-by-value clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-misleading-capture-default-by-value clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/misleading-capture-default-by-value.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesMissingStdForward",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-missing-std-forward clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-missing-std-forward clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/missing-std-forward.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesNarrowingConversions",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-narrowing-conversions clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-narrowing-conversions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/narrowing-conversions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesNoMalloc",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-no-malloc clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-no-malloc clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/no-malloc.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesNoSuspendWithLock",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-no-suspend-with-lock clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-no-suspend-with-lock clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/no-suspend-with-lock.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesNoexceptDestructor",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-noexcept-destructor clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-noexcept-destructor clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/noexcept-destructor.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesNoexceptMoveOperations",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-noexcept-move-operations clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-noexcept-move-operations clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/noexcept-move-operations.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesNoexceptSwap",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-noexcept-swap clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-noexcept-swap clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/noexcept-swap.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesNonPrivateMemberVariablesInClasses",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-non-private-member-variables-in-classes clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-non-private-member-variables-in-classes clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/non-private-member-variables-in-classes.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesOwningMemory",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-owning-memory clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-owning-memory clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/owning-memory.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesPreferMemberInitializer",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-prefer-member-initializer clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-prefer-member-initializer clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/prefer-member-initializer.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesProBoundsArrayToPointerDecay",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-pro-bounds-array-to-pointer-decay clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-pro-bounds-array-to-pointer-decay clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-bounds-array-to-pointer-decay.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesProBoundsConstantArrayIndex",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-pro-bounds-constant-array-index clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-pro-bounds-constant-array-index clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-bounds-constant-array-index.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesProBoundsPointerArithmetic",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-pro-bounds-pointer-arithmetic clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-pro-bounds-pointer-arithmetic clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-bounds-pointer-arithmetic.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesProTypeConstCast",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-pro-type-const-cast clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-pro-type-const-cast clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-const-cast.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesProTypeCstyleCast",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-pro-type-cstyle-cast clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-pro-type-cstyle-cast clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-cstyle-cast.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesProTypeMemberInit",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-pro-type-member-init clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-pro-type-member-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-member-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesProTypeReinterpretCast",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-pro-type-reinterpret-cast clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-pro-type-reinterpret-cast clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-reinterpret-cast.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesProTypeStaticCastDowncast",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-pro-type-static-cast-downcast clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-pro-type-static-cast-downcast clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-static-cast-downcast.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesProTypeUnionAccess",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-pro-type-union-access clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-pro-type-union-access clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-union-access.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesProTypeVararg",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-pro-type-vararg clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-pro-type-vararg clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-vararg.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesRvalueReferenceParamNotMoved",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-rvalue-reference-param-not-moved clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-rvalue-reference-param-not-moved clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/rvalue-reference-param-not-moved.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesSlicing",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-slicing clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-slicing clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/slicing.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-special-member-functions clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-special-member-functions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/special-member-functions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesUseDefaultMemberInit",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-use-default-member-init clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-use-default-member-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/use-default-member-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyCppcoreguidelinesVirtualClassDestructor",
              "shortDescription": {
                "text": "cppcoreguidelines: cppcoreguidelines-virtual-class-destructor clang-tidy check"
              },
              "fullDescription": {
                "text": "cppcoreguidelines-virtual-class-destructor clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/virtual-class-destructor.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyDarwinAvoidSpinlock",
              "shortDescription": {
                "text": "darwin: darwin-avoid-spinlock clang-tidy check"
              },
              "fullDescription": {
                "text": "darwin-avoid-spinlock clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/darwin/avoid-spinlock.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyDarwinDispatchOnceNonstatic",
              "shortDescription": {
                "text": "darwin: darwin-dispatch-once-nonstatic clang-tidy check"
              },
              "fullDescription": {
                "text": "darwin-dispatch-once-nonstatic clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/darwin/dispatch-once-nonstatic.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyFuchsiaDefaultArgumentsCalls",
              "shortDescription": {
                "text": "fuchsia: fuchsia-default-arguments-calls clang-tidy check"
              },
              "fullDescription": {
                "text": "fuchsia-default-arguments-calls clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/default-arguments-calls.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyFuchsiaDefaultArgumentsDeclarations",
              "shortDescription": {
                "text": "fuchsia: fuchsia-default-arguments-declarations clang-tidy check"
              },
              "fullDescription": {
                "text": "fuchsia-default-arguments-declarations clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/default-arguments-declarations.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyFuchsiaHeaderAnonNamespaces",
              "shortDescription": {
                "text": "fuchsia: fuchsia-header-anon-namespaces clang-tidy check"
              },
              "fullDescription": {
                "text": "fuchsia-header-anon-namespaces clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/header-anon-namespaces.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyFuchsiaMultipleInheritance",
              "shortDescription": {
                "text": "fuchsia: fuchsia-multiple-inheritance clang-tidy check"
              },
              "fullDescription": {
                "text": "fuchsia-multiple-inheritance clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/multiple-inheritance.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyFuchsiaOverloadedOperator",
              "shortDescription": {
                "text": "fuchsia: fuchsia-overloaded-operator clang-tidy check"
              },
              "fullDescription": {
                "text": "fuchsia-overloaded-operator clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/overloaded-operator.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyFuchsiaStaticallyConstructedObjects",
              "shortDescription": {
                "text": "fuchsia: fuchsia-statically-constructed-objects clang-tidy check"
              },
              "fullDescription": {
                "text": "fuchsia-statically-constructed-objects clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/statically-constructed-objects.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyFuchsiaTrailingReturn",
              "shortDescription": {
                "text": "fuchsia: fuchsia-trailing-return clang-tidy check"
              },
              "fullDescription": {
                "text": "fuchsia-trailing-return clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/trailing-return.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyFuchsiaVirtualInheritance",
              "shortDescription": {
                "text": "fuchsia: fuchsia-virtual-inheritance clang-tidy check"
              },
              "fullDescription": {
                "text": "fuchsia-virtual-inheritance clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/virtual-inheritance.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleBuildExplicitMakePair",
              "shortDescription": {
                "text": "google: google-build-explicit-make-pair clang-tidy check"
              },
              "fullDescription": {
                "text": "google-build-explicit-make-pair clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/build-explicit-make-pair.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleBuildNamespaces",
              "shortDescription": {
                "text": "google: google-build-namespaces clang-tidy check"
              },
              "fullDescription": {
                "text": "google-build-namespaces clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/build-namespaces.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleBuildUsingNamespace",
              "shortDescription": {
                "text": "google: google-build-using-namespace clang-tidy check"
              },
              "fullDescription": {
                "text": "google-build-using-namespace clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/build-using-namespace.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleDefaultArguments",
              "shortDescription": {
                "text": "google: google-default-arguments clang-tidy check"
              },
              "fullDescription": {
                "text": "google-default-arguments clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/default-arguments.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleExplicitConstructor",
              "shortDescription": {
                "text": "google: google-explicit-constructor clang-tidy check"
              },
              "fullDescription": {
                "text": "google-explicit-constructor clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/explicit-constructor.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleGlobalNamesInHeaders",
              "shortDescription": {
                "text": "google: google-global-names-in-headers clang-tidy check"
              },
              "fullDescription": {
                "text": "google-global-names-in-headers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/global-names-in-headers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleObjcAvoidNsobjectNew",
              "shortDescription": {
                "text": "google: google-objc-avoid-nsobject-new clang-tidy check"
              },
              "fullDescription": {
                "text": "google-objc-avoid-nsobject-new clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-avoid-nsobject-new.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleObjcAvoidThrowingException",
              "shortDescription": {
                "text": "google: google-objc-avoid-throwing-exception clang-tidy check"
              },
              "fullDescription": {
                "text": "google-objc-avoid-throwing-exception clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-avoid-throwing-exception.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleObjcFunctionNaming",
              "shortDescription": {
                "text": "google: google-objc-function-naming clang-tidy check"
              },
              "fullDescription": {
                "text": "google-objc-function-naming clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-function-naming.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleObjcGlobalVariableDeclaration",
              "shortDescription": {
                "text": "google: google-objc-global-variable-declaration clang-tidy check"
              },
              "fullDescription": {
                "text": "google-objc-global-variable-declaration clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-global-variable-declaration.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleReadabilityAvoidUnderscoreInGoogletestName",
              "shortDescription": {
                "text": "google: google-readability-avoid-underscore-in-googletest-name clang-tidy check"
              },
              "fullDescription": {
                "text": "google-readability-avoid-underscore-in-googletest-name clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-avoid-underscore-in-googletest-name.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleReadabilityBracesAroundStatements",
              "shortDescription": {
                "text": "google: google-readability-braces-around-statements clang-tidy check"
              },
              "fullDescription": {
                "text": "google-readability-braces-around-statements clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-braces-around-statements.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleReadabilityCasting",
              "shortDescription": {
                "text": "google: google-readability-casting clang-tidy check"
              },
              "fullDescription": {
                "text": "google-readability-casting clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-casting.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleReadabilityFunctionSize",
              "shortDescription": {
                "text": "google: google-readability-function-size clang-tidy check"
              },
              "fullDescription": {
                "text": "google-readability-function-size clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-function-size.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleReadabilityNamespaceComments",
              "shortDescription": {
                "text": "google: google-readability-namespace-comments clang-tidy check"
              },
              "fullDescription": {
                "text": "google-readability-namespace-comments clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-namespace-comments.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleReadabilityTodo",
              "shortDescription": {
                "text": "google: google-readability-todo clang-tidy check"
              },
              "fullDescription": {
                "text": "google-readability-todo clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-todo.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleRuntimeInt",
              "shortDescription": {
                "text": "google: google-runtime-int clang-tidy check"
              },
              "fullDescription": {
                "text": "google-runtime-int clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/runtime-int.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleRuntimeOperator",
              "shortDescription": {
                "text": "google: google-runtime-operator clang-tidy check"
              },
              "fullDescription": {
                "text": "google-runtime-operator clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/runtime-operator.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyGoogleUpgradeGoogletestCase",
              "shortDescription": {
                "text": "google: google-upgrade-googletest-case clang-tidy check"
              },
              "fullDescription": {
                "text": "google-upgrade-googletest-case clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/upgrade-googletest-case.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppAvoidCArrays",
              "shortDescription": {
                "text": "hicpp: hicpp-avoid-c-arrays clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-avoid-c-arrays clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/avoid-c-arrays.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppAvoidGoto",
              "shortDescription": {
                "text": "hicpp: hicpp-avoid-goto clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-avoid-goto clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/avoid-goto.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppBracesAroundStatements",
              "shortDescription": {
                "text": "hicpp: hicpp-braces-around-statements clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-braces-around-statements clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/braces-around-statements.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppDeprecatedHeaders",
              "shortDescription": {
                "text": "hicpp: hicpp-deprecated-headers clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-deprecated-headers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/deprecated-headers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppExceptionBaseclass",
              "shortDescription": {
                "text": "hicpp: hicpp-exception-baseclass clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-exception-baseclass clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/exception-baseclass.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppExplicitConversions",
              "shortDescription": {
                "text": "hicpp: hicpp-explicit-conversions clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-explicit-conversions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/explicit-conversions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppFunctionSize",
              "shortDescription": {
                "text": "hicpp: hicpp-function-size clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-function-size clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/function-size.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppIgnoredRemoveResult",
              "shortDescription": {
                "text": "hicpp: hicpp-ignored-remove-result clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-ignored-remove-result clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/ignored-remove-result.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppInvalidAccessMoved",
              "shortDescription": {
                "text": "hicpp: hicpp-invalid-access-moved clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-invalid-access-moved clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/invalid-access-moved.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppMemberInit",
              "shortDescription": {
                "text": "hicpp: hicpp-member-init clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-member-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/member-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppMoveConstArg",
              "shortDescription": {
                "text": "hicpp: hicpp-move-const-arg clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-move-const-arg clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/move-const-arg.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppMultiwayPathsCovered",
              "shortDescription": {
                "text": "hicpp: hicpp-multiway-paths-covered clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-multiway-paths-covered clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/multiway-paths-covered.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppNamedParameter",
              "shortDescription": {
                "text": "hicpp: hicpp-named-parameter clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-named-parameter clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/named-parameter.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppNewDeleteOperators",
              "shortDescription": {
                "text": "hicpp: hicpp-new-delete-operators clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-new-delete-operators clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/new-delete-operators.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppNoArrayDecay",
              "shortDescription": {
                "text": "hicpp: hicpp-no-array-decay clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-no-array-decay clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/no-array-decay.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppNoAssembler",
              "shortDescription": {
                "text": "hicpp: hicpp-no-assembler clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-no-assembler clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/no-assembler.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppNoMalloc",
              "shortDescription": {
                "text": "hicpp: hicpp-no-malloc clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-no-malloc clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/no-malloc.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppNoexceptMove",
              "shortDescription": {
                "text": "hicpp: hicpp-noexcept-move clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-noexcept-move clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/noexcept-move.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppSignedBitwise",
              "shortDescription": {
                "text": "hicpp: hicpp-signed-bitwise clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-signed-bitwise clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/signed-bitwise.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppSpecialMemberFunctions",
              "shortDescription": {
                "text": "hicpp: hicpp-special-member-functions clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-special-member-functions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/special-member-functions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppStaticAssert",
              "shortDescription": {
                "text": "hicpp: hicpp-static-assert clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-static-assert clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/static-assert.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppUndelegatedConstructor",
              "shortDescription": {
                "text": "hicpp: hicpp-undelegated-constructor clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-undelegated-constructor clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/undelegated-constructor.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppUppercaseLiteralSuffix",
              "shortDescription": {
                "text": "hicpp: hicpp-uppercase-literal-suffix clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-uppercase-literal-suffix clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/uppercase-literal-suffix.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppUseAuto",
              "shortDescription": {
                "text": "hicpp: hicpp-use-auto clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-use-auto clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-auto.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppUseEmplace",
              "shortDescription": {
                "text": "hicpp: hicpp-use-emplace clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-use-emplace clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-emplace.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppUseEqualsDefault",
              "shortDescription": {
                "text": "hicpp: hicpp-use-equals-default clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-use-equals-default clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-equals-default.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppUseEqualsDelete",
              "shortDescription": {
                "text": "hicpp: hicpp-use-equals-delete clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-use-equals-delete clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-equals-delete.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppUseNoexcept",
              "shortDescription": {
                "text": "hicpp: hicpp-use-noexcept clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-use-noexcept clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-noexcept.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppUseNullptr",
              "shortDescription": {
                "text": "hicpp: hicpp-use-nullptr clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-use-nullptr clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-nullptr.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppUseOverride",
              "shortDescription": {
                "text": "hicpp: hicpp-use-override clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-use-override clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-override.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHicppVararg",
              "shortDescription": {
                "text": "hicpp: hicpp-vararg clang-tidy check"
              },
              "fullDescription": {
                "text": "hicpp-vararg clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/vararg.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyHighlighting",
              "shortDescription": {
                "text": "Unknown clang-tidy checks"
              },
              "fullDescription": {
                "text": "Unknown clang-tidy checks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLinuxkernelMustCheckErrs",
              "shortDescription": {
                "text": "linuxkernel: linuxkernel-must-check-errs clang-tidy check"
              },
              "fullDescription": {
                "text": "linuxkernel-must-check-errs clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/linuxkernel/must-check-errs.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmElseAfterReturn",
              "shortDescription": {
                "text": "llvm: llvm-else-after-return clang-tidy check"
              },
              "fullDescription": {
                "text": "llvm-else-after-return clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/else-after-return.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmHeaderGuard",
              "shortDescription": {
                "text": "llvm: llvm-header-guard clang-tidy check"
              },
              "fullDescription": {
                "text": "llvm-header-guard clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/header-guard.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmIncludeOrder",
              "shortDescription": {
                "text": "llvm: llvm-include-order clang-tidy check"
              },
              "fullDescription": {
                "text": "llvm-include-order clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/include-order.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmNamespaceComment",
              "shortDescription": {
                "text": "llvm: llvm-namespace-comment clang-tidy check"
              },
              "fullDescription": {
                "text": "llvm-namespace-comment clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/namespace-comment.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmPreferIsaOrDynCastInConditionals",
              "shortDescription": {
                "text": "llvm: llvm-prefer-isa-or-dyn-cast-in-conditionals clang-tidy check"
              },
              "fullDescription": {
                "text": "llvm-prefer-isa-or-dyn-cast-in-conditionals clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/prefer-isa-or-dyn-cast-in-conditionals.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmPreferRegisterOverUnsigned",
              "shortDescription": {
                "text": "llvm: llvm-prefer-register-over-unsigned clang-tidy check"
              },
              "fullDescription": {
                "text": "llvm-prefer-register-over-unsigned clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/prefer-register-over-unsigned.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmQualifiedAuto",
              "shortDescription": {
                "text": "llvm: llvm-qualified-auto clang-tidy check"
              },
              "fullDescription": {
                "text": "llvm-qualified-auto clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/qualified-auto.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmTwineLocal",
              "shortDescription": {
                "text": "llvm: llvm-twine-local clang-tidy check"
              },
              "fullDescription": {
                "text": "llvm-twine-local clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/twine-local.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmlibcCalleeNamespace",
              "shortDescription": {
                "text": "llvmlibc: llvmlibc-callee-namespace clang-tidy check"
              },
              "fullDescription": {
                "text": "llvmlibc-callee-namespace clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvmlibc/callee-namespace.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmlibcImplementationInNamespace",
              "shortDescription": {
                "text": "llvmlibc: llvmlibc-implementation-in-namespace clang-tidy check"
              },
              "fullDescription": {
                "text": "llvmlibc-implementation-in-namespace clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvmlibc/implementation-in-namespace.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmlibcInlineFunctionDecl",
              "shortDescription": {
                "text": "llvmlibc: llvmlibc-inline-function-decl clang-tidy check"
              },
              "fullDescription": {
                "text": "llvmlibc-inline-function-decl clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvmlibc/inline-function-decl.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyLlvmlibcRestrictSystemLibcHeaders",
              "shortDescription": {
                "text": "llvmlibc: llvmlibc-restrict-system-libc-headers clang-tidy check"
              },
              "fullDescription": {
                "text": "llvmlibc-restrict-system-libc-headers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvmlibc/restrict-system-libc-headers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscConfusableIdentifiers",
              "shortDescription": {
                "text": "misc: misc-confusable-identifiers clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-confusable-identifiers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/confusable-identifiers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscConstCorrectness",
              "shortDescription": {
                "text": "misc: misc-const-correctness clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-const-correctness clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/const-correctness.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscCoroutineHostileRaii",
              "shortDescription": {
                "text": "misc: misc-coroutine-hostile-raii clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-coroutine-hostile-raii clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/coroutine-hostile-raii.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscDefinitionsInHeaders",
              "shortDescription": {
                "text": "misc: misc-definitions-in-headers clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-definitions-in-headers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/definitions-in-headers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscHeaderIncludeCycle",
              "shortDescription": {
                "text": "misc: misc-header-include-cycle clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-header-include-cycle clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/header-include-cycle.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscIncludeCleaner",
              "shortDescription": {
                "text": "misc: misc-include-cleaner clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-include-cleaner clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/include-cleaner.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscMisleadingBidirectional",
              "shortDescription": {
                "text": "misc: misc-misleading-bidirectional clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-misleading-bidirectional clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/misleading-bidirectional.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscMisleadingIdentifier",
              "shortDescription": {
                "text": "misc: misc-misleading-identifier clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-misleading-identifier clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/misleading-identifier.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscMisplacedConst",
              "shortDescription": {
                "text": "misc: misc-misplaced-const clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-misplaced-const clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/misplaced-const.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscNewDeleteOverloads",
              "shortDescription": {
                "text": "misc: misc-new-delete-overloads clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-new-delete-overloads clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/new-delete-overloads.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscNoRecursion",
              "shortDescription": {
                "text": "misc: misc-no-recursion clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-no-recursion clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/no-recursion.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscNonCopyableObjects",
              "shortDescription": {
                "text": "misc: misc-non-copyable-objects clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-non-copyable-objects clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/non-copyable-objects.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscNonPrivateMemberVariablesInClasses",
              "shortDescription": {
                "text": "misc: misc-non-private-member-variables-in-classes clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-non-private-member-variables-in-classes clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/non-private-member-variables-in-classes.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscRedundantExpression",
              "shortDescription": {
                "text": "misc: misc-redundant-expression clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-redundant-expression clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/redundant-expression.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscStaticAssert",
              "shortDescription": {
                "text": "misc: misc-static-assert clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-static-assert clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/static-assert.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscThrowByValueCatchByReference",
              "shortDescription": {
                "text": "misc: misc-throw-by-value-catch-by-reference clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-throw-by-value-catch-by-reference clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/throw-by-value-catch-by-reference.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscUnconventionalAssignOperator",
              "shortDescription": {
                "text": "misc: misc-unconventional-assign-operator clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-unconventional-assign-operator clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unconventional-assign-operator.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscUniqueptrResetRelease",
              "shortDescription": {
                "text": "misc: misc-uniqueptr-reset-release clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-uniqueptr-reset-release clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/uniqueptr-reset-release.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscUnusedAliasDecls",
              "shortDescription": {
                "text": "misc: misc-unused-alias-decls clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-unused-alias-decls clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unused-alias-decls.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscUnusedParameters",
              "shortDescription": {
                "text": "misc: misc-unused-parameters clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-unused-parameters clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unused-parameters.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscUnusedUsingDecls",
              "shortDescription": {
                "text": "misc: misc-unused-using-decls clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-unused-using-decls clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unused-using-decls.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscUseAnonymousNamespace",
              "shortDescription": {
                "text": "misc: misc-use-anonymous-namespace clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-use-anonymous-namespace clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/use-anonymous-namespace.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMiscUseInternalLinkage",
              "shortDescription": {
                "text": "misc: misc-use-internal-linkage clang-tidy check"
              },
              "fullDescription": {
                "text": "misc-use-internal-linkage clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/use-internal-linkage.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeAvoidBind",
              "shortDescription": {
                "text": "modernize: modernize-avoid-bind clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-avoid-bind clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/avoid-bind.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeAvoidCArrays",
              "shortDescription": {
                "text": "modernize: modernize-avoid-c-arrays clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-avoid-c-arrays clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/avoid-c-arrays.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeConcatNestedNamespaces",
              "shortDescription": {
                "text": "modernize: modernize-concat-nested-namespaces clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-concat-nested-namespaces clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/concat-nested-namespaces.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeDeprecatedHeaders",
              "shortDescription": {
                "text": "modernize: modernize-deprecated-headers clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-deprecated-headers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/deprecated-headers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeDeprecatedIosBaseAliases",
              "shortDescription": {
                "text": "modernize: modernize-deprecated-ios-base-aliases clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-deprecated-ios-base-aliases clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/deprecated-ios-base-aliases.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeLoopConvert",
              "shortDescription": {
                "text": "modernize: modernize-loop-convert clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-loop-convert clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/loop-convert.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeMacroToEnum",
              "shortDescription": {
                "text": "modernize: modernize-macro-to-enum clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-macro-to-enum clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/macro-to-enum.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeMakeShared",
              "shortDescription": {
                "text": "modernize: modernize-make-shared clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-make-shared clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/make-shared.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeMakeUnique",
              "shortDescription": {
                "text": "modernize: modernize-make-unique clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-make-unique clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/make-unique.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeMinMaxUseInitializerList",
              "shortDescription": {
                "text": "modernize: modernize-min-max-use-initializer-list clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-min-max-use-initializer-list clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/min-max-use-initializer-list.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizePassByValue",
              "shortDescription": {
                "text": "modernize: modernize-pass-by-value clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-pass-by-value clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/pass-by-value.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeRawStringLiteral",
              "shortDescription": {
                "text": "modernize: modernize-raw-string-literal clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-raw-string-literal clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/raw-string-literal.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeRedundantVoidArg",
              "shortDescription": {
                "text": "modernize: modernize-redundant-void-arg clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-redundant-void-arg clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/redundant-void-arg.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeReplaceAutoPtr",
              "shortDescription": {
                "text": "modernize: modernize-replace-auto-ptr clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-replace-auto-ptr clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/replace-auto-ptr.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeReplaceDisallowCopyAndAssignMacro",
              "shortDescription": {
                "text": "modernize: modernize-replace-disallow-copy-and-assign-macro clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-replace-disallow-copy-and-assign-macro clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/replace-disallow-copy-and-assign-macro.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeReplaceRandomShuffle",
              "shortDescription": {
                "text": "modernize: modernize-replace-random-shuffle clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-replace-random-shuffle clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/replace-random-shuffle.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeReturnBracedInitList",
              "shortDescription": {
                "text": "modernize: modernize-return-braced-init-list clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-return-braced-init-list clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/return-braced-init-list.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeShrinkToFit",
              "shortDescription": {
                "text": "modernize: modernize-shrink-to-fit clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-shrink-to-fit clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/shrink-to-fit.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeTypeTraits",
              "shortDescription": {
                "text": "modernize: modernize-type-traits clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-type-traits clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/type-traits.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUnaryStaticAssert",
              "shortDescription": {
                "text": "modernize: modernize-unary-static-assert clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-unary-static-assert clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/unary-static-assert.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseAuto",
              "shortDescription": {
                "text": "modernize: modernize-use-auto clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-auto clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-auto.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseBoolLiterals",
              "shortDescription": {
                "text": "modernize: modernize-use-bool-literals clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-bool-literals clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-bool-literals.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseConstraints",
              "shortDescription": {
                "text": "modernize: modernize-use-constraints clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-constraints clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-constraints.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseDefaultMemberInit",
              "shortDescription": {
                "text": "modernize: modernize-use-default-member-init clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-default-member-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-default-member-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseDesignatedInitializers",
              "shortDescription": {
                "text": "modernize: modernize-use-designated-initializers clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-designated-initializers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-designated-initializers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseEmplace",
              "shortDescription": {
                "text": "modernize: modernize-use-emplace clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-emplace clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-emplace.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseEqualsDefault",
              "shortDescription": {
                "text": "modernize: modernize-use-equals-default clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-equals-default clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-equals-default.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseEqualsDelete",
              "shortDescription": {
                "text": "modernize: modernize-use-equals-delete clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-equals-delete clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-equals-delete.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseIntegerSignComparison",
              "shortDescription": {
                "text": "modernize: modernize-use-integer-sign-comparison clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-integer-sign-comparison clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-integer-sign-comparison.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseNodiscard",
              "shortDescription": {
                "text": "modernize: modernize-use-nodiscard clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-nodiscard clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-nodiscard.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseNoexcept",
              "shortDescription": {
                "text": "modernize: modernize-use-noexcept clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-noexcept clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-noexcept.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseNullptr",
              "shortDescription": {
                "text": "modernize: modernize-use-nullptr clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-nullptr clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-nullptr.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseOverride",
              "shortDescription": {
                "text": "modernize: modernize-use-override clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-override clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-override.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseRanges",
              "shortDescription": {
                "text": "modernize: modernize-use-ranges clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-ranges clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-ranges.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseStartsEndsWith",
              "shortDescription": {
                "text": "modernize: modernize-use-starts-ends-with clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-starts-ends-with clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-starts-ends-with.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseStdFormat",
              "shortDescription": {
                "text": "modernize: modernize-use-std-format clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-std-format clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-std-format.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseStdNumbers",
              "shortDescription": {
                "text": "modernize: modernize-use-std-numbers clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-std-numbers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-std-numbers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseStdPrint",
              "shortDescription": {
                "text": "modernize: modernize-use-std-print clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-std-print clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-std-print.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseTrailingReturnType",
              "shortDescription": {
                "text": "modernize: modernize-use-trailing-return-type clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-trailing-return-type clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-trailing-return-type.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseTransparentFunctors",
              "shortDescription": {
                "text": "modernize: modernize-use-transparent-functors clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-transparent-functors clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-transparent-functors.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseUncaughtExceptions",
              "shortDescription": {
                "text": "modernize: modernize-use-uncaught-exceptions clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-uncaught-exceptions clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-uncaught-exceptions.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyModernizeUseUsing",
              "shortDescription": {
                "text": "modernize: modernize-use-using clang-tidy check"
              },
              "fullDescription": {
                "text": "modernize-use-using clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-using.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMpiBufferDeref",
              "shortDescription": {
                "text": "mpi: mpi-buffer-deref clang-tidy check"
              },
              "fullDescription": {
                "text": "mpi-buffer-deref clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/mpi/buffer-deref.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyMpiTypeMismatch",
              "shortDescription": {
                "text": "mpi: mpi-type-mismatch clang-tidy check"
              },
              "fullDescription": {
                "text": "mpi-type-mismatch clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/mpi/type-mismatch.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyObjcAssertEquals",
              "shortDescription": {
                "text": "objc: objc-assert-equals clang-tidy check"
              },
              "fullDescription": {
                "text": "objc-assert-equals clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/assert-equals.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyObjcAvoidNserrorInit",
              "shortDescription": {
                "text": "objc: objc-avoid-nserror-init clang-tidy check"
              },
              "fullDescription": {
                "text": "objc-avoid-nserror-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/avoid-nserror-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyObjcDeallocInCategory",
              "shortDescription": {
                "text": "objc: objc-dealloc-in-category clang-tidy check"
              },
              "fullDescription": {
                "text": "objc-dealloc-in-category clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/dealloc-in-category.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyObjcForbiddenSubclassing",
              "shortDescription": {
                "text": "objc: objc-forbidden-subclassing clang-tidy check"
              },
              "fullDescription": {
                "text": "objc-forbidden-subclassing clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/forbidden-subclassing.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyObjcMissingHash",
              "shortDescription": {
                "text": "objc: objc-missing-hash clang-tidy check"
              },
              "fullDescription": {
                "text": "objc-missing-hash clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/missing-hash.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyObjcNsdateFormatter",
              "shortDescription": {
                "text": "objc: objc-nsdate-formatter clang-tidy check"
              },
              "fullDescription": {
                "text": "objc-nsdate-formatter clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/nsdate-formatter.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyObjcNsinvocationArgumentLifetime",
              "shortDescription": {
                "text": "objc: objc-nsinvocation-argument-lifetime clang-tidy check"
              },
              "fullDescription": {
                "text": "objc-nsinvocation-argument-lifetime clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/nsinvocation-argument-lifetime.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyObjcPropertyDeclaration",
              "shortDescription": {
                "text": "objc: objc-property-declaration clang-tidy check"
              },
              "fullDescription": {
                "text": "objc-property-declaration clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/property-declaration.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyObjcSuperSelf",
              "shortDescription": {
                "text": "objc: objc-super-self clang-tidy check"
              },
              "fullDescription": {
                "text": "objc-super-self clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/super-self.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyOpenmpExceptionEscape",
              "shortDescription": {
                "text": "openmp: openmp-exception-escape clang-tidy check"
              },
              "fullDescription": {
                "text": "openmp-exception-escape clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/openmp/exception-escape.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyOpenmpUseDefaultNone",
              "shortDescription": {
                "text": "openmp: openmp-use-default-none clang-tidy check"
              },
              "fullDescription": {
                "text": "openmp-use-default-none clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/openmp/use-default-none.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceAvoidEndl",
              "shortDescription": {
                "text": "performance: performance-avoid-endl clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-avoid-endl clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/avoid-endl.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceEnumSize",
              "shortDescription": {
                "text": "performance: performance-enum-size clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-enum-size clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/enum-size.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceFasterStringFind",
              "shortDescription": {
                "text": "performance: performance-faster-string-find clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-faster-string-find clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/faster-string-find.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceForRangeCopy",
              "shortDescription": {
                "text": "performance: performance-for-range-copy clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-for-range-copy clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/for-range-copy.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceImplicitConversionInLoop",
              "shortDescription": {
                "text": "performance: performance-implicit-conversion-in-loop clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-implicit-conversion-in-loop clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/implicit-conversion-in-loop.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceInefficientAlgorithm",
              "shortDescription": {
                "text": "performance: performance-inefficient-algorithm clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-inefficient-algorithm clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/inefficient-algorithm.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceInefficientStringConcatenation",
              "shortDescription": {
                "text": "performance: performance-inefficient-string-concatenation clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-inefficient-string-concatenation clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/inefficient-string-concatenation.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceInefficientVectorOperation",
              "shortDescription": {
                "text": "performance: performance-inefficient-vector-operation clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-inefficient-vector-operation clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/inefficient-vector-operation.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceMoveConstArg",
              "shortDescription": {
                "text": "performance: performance-move-const-arg clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-move-const-arg clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/move-const-arg.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceMoveConstructorInit",
              "shortDescription": {
                "text": "performance: performance-move-constructor-init clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-move-constructor-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/move-constructor-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceNoAutomaticMove",
              "shortDescription": {
                "text": "performance: performance-no-automatic-move clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-no-automatic-move clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/no-automatic-move.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceNoIntToPtr",
              "shortDescription": {
                "text": "performance: performance-no-int-to-ptr clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-no-int-to-ptr clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/no-int-to-ptr.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceNoexceptDestructor",
              "shortDescription": {
                "text": "performance: performance-noexcept-destructor clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-noexcept-destructor clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/noexcept-destructor.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceNoexceptMoveConstructor",
              "shortDescription": {
                "text": "performance: performance-noexcept-move-constructor clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-noexcept-move-constructor clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/noexcept-move-constructor.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceNoexceptSwap",
              "shortDescription": {
                "text": "performance: performance-noexcept-swap clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-noexcept-swap clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/noexcept-swap.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceTriviallyDestructible",
              "shortDescription": {
                "text": "performance: performance-trivially-destructible clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-trivially-destructible clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/trivially-destructible.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceTypePromotionInMathFn",
              "shortDescription": {
                "text": "performance: performance-type-promotion-in-math-fn clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-type-promotion-in-math-fn clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/type-promotion-in-math-fn.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceUnnecessaryCopyInitialization",
              "shortDescription": {
                "text": "performance: performance-unnecessary-copy-initialization clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-unnecessary-copy-initialization clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/unnecessary-copy-initialization.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPerformanceUnnecessaryValueParam",
              "shortDescription": {
                "text": "performance: performance-unnecessary-value-param clang-tidy check"
              },
              "fullDescription": {
                "text": "performance-unnecessary-value-param clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/unnecessary-value-param.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPortabilityRestrictSystemIncludes",
              "shortDescription": {
                "text": "portability: portability-restrict-system-includes clang-tidy check"
              },
              "fullDescription": {
                "text": "portability-restrict-system-includes clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/portability/restrict-system-includes.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPortabilitySimdIntrinsics",
              "shortDescription": {
                "text": "portability: portability-simd-intrinsics clang-tidy check"
              },
              "fullDescription": {
                "text": "portability-simd-intrinsics clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/portability/simd-intrinsics.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPortabilityStdAllocatorConst",
              "shortDescription": {
                "text": "portability: portability-std-allocator-const clang-tidy check"
              },
              "fullDescription": {
                "text": "portability-std-allocator-const clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/portability/std-allocator-const.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyPortabilityTemplateVirtualMemberFunction",
              "shortDescription": {
                "text": "portability: portability-template-virtual-member-function clang-tidy check"
              },
              "fullDescription": {
                "text": "portability-template-virtual-member-function clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/portability/template-virtual-member-function.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityAvoidConstParamsInDecls",
              "shortDescription": {
                "text": "readability: readability-avoid-const-params-in-decls clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-avoid-const-params-in-decls clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/avoid-const-params-in-decls.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityAvoidNestedConditionalOperator",
              "shortDescription": {
                "text": "readability: readability-avoid-nested-conditional-operator clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-avoid-nested-conditional-operator clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/avoid-nested-conditional-operator.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityAvoidReturnWithVoidValue",
              "shortDescription": {
                "text": "readability: readability-avoid-return-with-void-value clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-avoid-return-with-void-value clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/avoid-return-with-void-value.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityAvoidUnconditionalPreprocessorIf",
              "shortDescription": {
                "text": "readability: readability-avoid-unconditional-preprocessor-if clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-avoid-unconditional-preprocessor-if clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/avoid-unconditional-preprocessor-if.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityBracesAroundStatements",
              "shortDescription": {
                "text": "readability: readability-braces-around-statements clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-braces-around-statements clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/braces-around-statements.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityConstReturnType",
              "shortDescription": {
                "text": "readability: readability-const-return-type clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-const-return-type clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/const-return-type.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityContainerContains",
              "shortDescription": {
                "text": "readability: readability-container-contains clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-container-contains clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/container-contains.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityContainerDataPointer",
              "shortDescription": {
                "text": "readability: readability-container-data-pointer clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-container-data-pointer clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/container-data-pointer.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityContainerSizeEmpty",
              "shortDescription": {
                "text": "readability: readability-container-size-empty clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-container-size-empty clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/container-size-empty.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityConvertMemberFunctionsToStatic",
              "shortDescription": {
                "text": "readability: readability-convert-member-functions-to-static clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-convert-member-functions-to-static clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/convert-member-functions-to-static.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityDeleteNullPointer",
              "shortDescription": {
                "text": "readability: readability-delete-null-pointer clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-delete-null-pointer clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/delete-null-pointer.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityDuplicateInclude",
              "shortDescription": {
                "text": "readability: readability-duplicate-include clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-duplicate-include clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/duplicate-include.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityElseAfterReturn",
              "shortDescription": {
                "text": "readability: readability-else-after-return clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-else-after-return clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/else-after-return.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityEnumInitialValue",
              "shortDescription": {
                "text": "readability: readability-enum-initial-value clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-enum-initial-value clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/enum-initial-value.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityFunctionCognitiveComplexity",
              "shortDescription": {
                "text": "readability: readability-function-cognitive-complexity clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-function-cognitive-complexity clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/function-cognitive-complexity.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityFunctionSize",
              "shortDescription": {
                "text": "readability: readability-function-size clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-function-size clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/function-size.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityIdentifierLength",
              "shortDescription": {
                "text": "readability: readability-identifier-length clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-identifier-length clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/identifier-length.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityIdentifierNaming",
              "shortDescription": {
                "text": "readability: readability-identifier-naming clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-identifier-naming clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/identifier-naming.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityImplicitBoolConversion",
              "shortDescription": {
                "text": "readability: readability-implicit-bool-conversion clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-implicit-bool-conversion clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/implicit-bool-conversion.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityInconsistentDeclarationParameterName",
              "shortDescription": {
                "text": "readability: readability-inconsistent-declaration-parameter-name clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-inconsistent-declaration-parameter-name clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/inconsistent-declaration-parameter-name.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityIsolateDeclaration",
              "shortDescription": {
                "text": "readability: readability-isolate-declaration clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-isolate-declaration clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/isolate-declaration.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityMagicNumbers",
              "shortDescription": {
                "text": "readability: readability-magic-numbers clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-magic-numbers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/magic-numbers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityMakeMemberFunctionConst",
              "shortDescription": {
                "text": "readability: readability-make-member-function-const clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-make-member-function-const clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/make-member-function-const.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityMathMissingParentheses",
              "shortDescription": {
                "text": "readability: readability-math-missing-parentheses clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-math-missing-parentheses clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/math-missing-parentheses.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityMisleadingIndentation",
              "shortDescription": {
                "text": "readability: readability-misleading-indentation clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-misleading-indentation clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/misleading-indentation.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityMisplacedArrayIndex",
              "shortDescription": {
                "text": "readability: readability-misplaced-array-index clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-misplaced-array-index clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/misplaced-array-index.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityNamedParameter",
              "shortDescription": {
                "text": "readability: readability-named-parameter clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-named-parameter clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/named-parameter.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityNonConstParameter",
              "shortDescription": {
                "text": "readability: readability-non-const-parameter clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-non-const-parameter clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/non-const-parameter.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityOperatorsRepresentation",
              "shortDescription": {
                "text": "readability: readability-operators-representation clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-operators-representation clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/operators-representation.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityQualifiedAuto",
              "shortDescription": {
                "text": "readability: readability-qualified-auto clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-qualified-auto clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/qualified-auto.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantAccessSpecifiers",
              "shortDescription": {
                "text": "readability: readability-redundant-access-specifiers clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-access-specifiers clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-access-specifiers.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantCasting",
              "shortDescription": {
                "text": "readability: readability-redundant-casting clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-casting clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-casting.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantControlFlow",
              "shortDescription": {
                "text": "readability: readability-redundant-control-flow clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-control-flow clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-control-flow.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantDeclaration",
              "shortDescription": {
                "text": "readability: readability-redundant-declaration clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-declaration clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-declaration.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantFunctionPtrDereference",
              "shortDescription": {
                "text": "readability: readability-redundant-function-ptr-dereference clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-function-ptr-dereference clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-function-ptr-dereference.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantInlineSpecifier",
              "shortDescription": {
                "text": "readability: readability-redundant-inline-specifier clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-inline-specifier clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-inline-specifier.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantMemberInit",
              "shortDescription": {
                "text": "readability: readability-redundant-member-init clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-member-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-member-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantPreprocessor",
              "shortDescription": {
                "text": "readability: readability-redundant-preprocessor clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-preprocessor clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-preprocessor.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantSmartptrGet",
              "shortDescription": {
                "text": "readability: readability-redundant-smartptr-get clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-smartptr-get clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-smartptr-get.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantStringCstr",
              "shortDescription": {
                "text": "readability: readability-redundant-string-cstr clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-string-cstr clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-string-cstr.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityRedundantStringInit",
              "shortDescription": {
                "text": "readability: readability-redundant-string-init clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-redundant-string-init clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-string-init.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityReferenceToConstructedTemporary",
              "shortDescription": {
                "text": "readability: readability-reference-to-constructed-temporary clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-reference-to-constructed-temporary clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/reference-to-constructed-temporary.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilitySimplifyBooleanExpr",
              "shortDescription": {
                "text": "readability: readability-simplify-boolean-expr clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-simplify-boolean-expr clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/simplify-boolean-expr.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilitySimplifySubscriptExpr",
              "shortDescription": {
                "text": "readability: readability-simplify-subscript-expr clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-simplify-subscript-expr clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/simplify-subscript-expr.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityStaticAccessedThroughInstance",
              "shortDescription": {
                "text": "readability: readability-static-accessed-through-instance clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-static-accessed-through-instance clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/static-accessed-through-instance.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityStaticDefinitionInAnonymousNamespace",
              "shortDescription": {
                "text": "readability: readability-static-definition-in-anonymous-namespace clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-static-definition-in-anonymous-namespace clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/static-definition-in-anonymous-namespace.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityStringCompare",
              "shortDescription": {
                "text": "readability: readability-string-compare clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-string-compare clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/string-compare.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilitySuspiciousCallArgument",
              "shortDescription": {
                "text": "readability: readability-suspicious-call-argument clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-suspicious-call-argument clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/suspicious-call-argument.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityUniqueptrDeleteRelease",
              "shortDescription": {
                "text": "readability: readability-uniqueptr-delete-release clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-uniqueptr-delete-release clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/uniqueptr-delete-release.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityUppercaseLiteralSuffix",
              "shortDescription": {
                "text": "readability: readability-uppercase-literal-suffix clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-uppercase-literal-suffix clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/uppercase-literal-suffix.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityUseAnyofallof",
              "shortDescription": {
                "text": "readability: readability-use-anyofallof clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-use-anyofallof clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/use-anyofallof.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyReadabilityUseStdMinMax",
              "shortDescription": {
                "text": "readability: readability-use-std-min-max clang-tidy check"
              },
              "fullDescription": {
                "text": "readability-use-std-min-max clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/use-std-min-max.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClangTidyZirconTemporaryObjects",
              "shortDescription": {
                "text": "zircon: zircon-temporary-objects clang-tidy check"
              },
              "fullDescription": {
                "text": "zircon-temporary-objects clang-tidy check · <a href=\"https://releases.llvm.org/20.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/zircon/temporary-objects.html\">Learn more</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ClangTidy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClassCanBeFinal",
              "shortDescription": {
                "text": "Class can be made final"
              },
              "fullDescription": {
                "text": "A class definition can be marked as final so it cannot be inherited from"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClassIsIncomplete",
              "shortDescription": {
                "text": "Use of an incomplete type inside a template"
              },
              "fullDescription": {
                "text": "An incomplete type is used inside a template declaration or definition"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClassNeedsConstructorBecauseOfUninitializedMember",
              "shortDescription": {
                "text": "Class should have a user-defined constructor because of an uninitialized data member"
              },
              "fullDescription": {
                "text": "Class should have a user-defined constructor because of an uninitialized data member"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppClassNeverUsed",
              "shortDescription": {
                "text": "Class is never used"
              },
              "fullDescription": {
                "text": "A class is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppCompileTimeConstantCanBeReplacedWithBooleanConstant",
              "shortDescription": {
                "text": "Compile-time constant expression can be replaced with either 'true' or 'false'"
              },
              "fullDescription": {
                "text": "Compile-time integral constant expression or nullptr is converted to bool and can be replaced with 'true' or 'false'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppConceptNeverUsed",
              "shortDescription": {
                "text": "Concept is never used"
              },
              "fullDescription": {
                "text": "Concept is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppConditionalExpressionCanBeSimplified",
              "shortDescription": {
                "text": "Conditional expression can be simplified"
              },
              "fullDescription": {
                "text": "Conditional expression can be simplified"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppConstParameterInDeclaration",
              "shortDescription": {
                "text": "Const-qualified parameter in a function declaration"
              },
              "fullDescription": {
                "text": "Const-qualification of parameters has an effect only in function definitions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppConstValueFunctionReturnType",
              "shortDescription": {
                "text": "Function returns by const value"
              },
              "fullDescription": {
                "text": "Returning from a function by const value is usually not beneficial. Consider returning values as non-const to \r\n          take advantage of move semantics."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-const",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-const"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppCoroutineCallResolveError",
              "shortDescription": {
                "text": "Cannot resolve a required coroutine function"
              },
              "fullDescription": {
                "text": "A coroutine-related function which is required by the C++20 standard cannot be resolved"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDeclarationHidesLocal",
              "shortDescription": {
                "text": "Hiding local declaration"
              },
              "fullDescription": {
                "text": "A local declaration hides another local declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-reuse",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-reuse"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDeclarationHidesUncapturedLocal",
              "shortDescription": {
                "text": "Hiding an uncaptured local declaration"
              },
              "fullDescription": {
                "text": "A local declaration inside a lambda hides an uncaptured local declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-reuse",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-reuse"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDeclarationSpecifierWithoutDeclarators",
              "shortDescription": {
                "text": "Declaration specifier with no declarators"
              },
              "fullDescription": {
                "text": "A declaration specifier is ignored when there are no declarators"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDeclaratorDisambiguatedAsFunction",
              "shortDescription": {
                "text": "Declarator disambiguated as a function declaration"
              },
              "fullDescription": {
                "text": "Declarator is disambiguated as a function declaration. Make sure a variable definition is not intended instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDeclaratorNeverUsed",
              "shortDescription": {
                "text": "Declarator is never used"
              },
              "fullDescription": {
                "text": "A declarator is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDeclaratorUsedBeforeInitialization",
              "shortDescription": {
                "text": "Local variable is used without being initialized"
              },
              "fullDescription": {
                "text": "Local variable is used without being initialized"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDefaultCaseNotHandledInSwitchStatement",
              "shortDescription": {
                "text": "Default case is not handled in a switch statement"
              },
              "fullDescription": {
                "text": "Default case is not handled in a switch statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDefaultInitializationWithNoUserConstructor",
              "shortDescription": {
                "text": "Default initialization of a const-qualified object of a type without a user-provided default constructor"
              },
              "fullDescription": {
                "text": "Default initialization of a const-qualified object of a type without a user-provided default constructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDefaultIsUsedAsIdentifier",
              "shortDescription": {
                "text": "Keyword 'default' is used as identifier"
              },
              "fullDescription": {
                "text": "'default' is a keyword in the C++ standard and cannot be used as an identifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDefaultedSpecialMemberFunctionIsImplicitlyDeleted",
              "shortDescription": {
                "text": "Defaulted special member function is implicitly deleted"
              },
              "fullDescription": {
                "text": "Explicitly defaulted special member function is implicitly deleted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDeletingVoidPointer",
              "shortDescription": {
                "text": "Deleting a void pointer"
              },
              "fullDescription": {
                "text": "Deleting a void pointer is undefined behavior"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDependentTemplateWithoutTemplateKeyword",
              "shortDescription": {
                "text": "Dependent template without 'template' keyword"
              },
              "fullDescription": {
                "text": "Dependent template without 'template' keyword"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDependentTypeWithoutTypenameKeyword",
              "shortDescription": {
                "text": "Dependent type without 'typename' keyword"
              },
              "fullDescription": {
                "text": "Dependent type without 'typename' keyword"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDeprecatedEntity",
              "shortDescription": {
                "text": "Entity is deprecated"
              },
              "fullDescription": {
                "text": "Entity is deprecated"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDeprecatedOverridenMethod",
              "shortDescription": {
                "text": "Overridden method is deprecated"
              },
              "fullDescription": {
                "text": "Overridden method is deprecated"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDeprecatedRegisterStorageClassSpecifier",
              "shortDescription": {
                "text": "Deprecated 'register' storage class specifier"
              },
              "fullDescription": {
                "text": "The 'register' storage class specifier is deprecated in C++11 and removed in C++17"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDereferenceOperatorLimitExceeded",
              "shortDescription": {
                "text": "Dereference operator limit is exceeded"
              },
              "fullDescription": {
                "text": "Dereference operator limit is exceeded"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDiscardedPostfixOperatorResult",
              "shortDescription": {
                "text": "Result of a postfix operator is discarded"
              },
              "fullDescription": {
                "text": "Result of a postfix operator is discarded. It might be more efficient to use a prefix form of the operator."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDoxygenSyntaxError",
              "shortDescription": {
                "text": "Syntax error in doxygen comment"
              },
              "fullDescription": {
                "text": "Syntax error in a doxygen comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDoxygenUndocumentedParameter",
              "shortDescription": {
                "text": "Missing function parameter description in a documentation comment"
              },
              "fullDescription": {
                "text": "Missing function parameter description in a documentation comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppDoxygenUnresolvedReference",
              "shortDescription": {
                "text": "Unresolved reference in doxygen comment"
              },
              "fullDescription": {
                "text": "Unresolved reference in a doxygen comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEmptyDeclaration",
              "shortDescription": {
                "text": "Declaration does not declare anything"
              },
              "fullDescription": {
                "text": "A declaration does not declare anything"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceCVQualifiersOrder",
              "shortDescription": {
                "text": "Use preferred cv-qualifiers style: Enforce the order of cv-qualifiers"
              },
              "fullDescription": {
                "text": "Enforce the order of cv-qualifiers"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceCVQualifiersPlacement",
              "shortDescription": {
                "text": "Use preferred cv-qualifiers style: Enforce the placement of cv-qualifiers"
              },
              "fullDescription": {
                "text": "Enforce the placement of cv-qualifiers"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceDoStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'do-while' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'do-while' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceForStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'for' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'for' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceFunctionDeclarationStyle",
              "shortDescription": {
                "text": "Use preferred declaration style: Enforce function declaration style"
              },
              "fullDescription": {
                "text": "Enforce usage of the trailing return type or the regular return type syntax"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceIfStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'if' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'if' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceNestedNamespacesStyle",
              "shortDescription": {
                "text": "Use preferred declaration style: Enforce nested namespaces style"
              },
              "fullDescription": {
                "text": "Enforce the syntax used to define nested namespaces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceOverridingDestructorStyle",
              "shortDescription": {
                "text": "Use preferred overriding function style: Enforce overriding destructor style"
              },
              "fullDescription": {
                "text": "Enforce the 'virtual' and 'override' specifiers on overriding destructors"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceOverridingFunctionStyle",
              "shortDescription": {
                "text": "Use preferred overriding function style: Enforce overriding function style"
              },
              "fullDescription": {
                "text": "Enforce the 'virtual' and 'override' specifiers on overriding functions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceTypeAliasCodeStyle",
              "shortDescription": {
                "text": "Use preferred declaration style: Enforce type alias code style"
              },
              "fullDescription": {
                "text": "Enforce usage of typedefs or type aliases depending on the syntax style setting"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnforceWhileStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'while' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'while' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEntityAssignedButNoRead",
              "shortDescription": {
                "text": "Declarator is only assigned but never accessed"
              },
              "fullDescription": {
                "text": "A declarator is only assigned but never accessed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEntityUsedOnlyInUnevaluatedContext",
              "shortDescription": {
                "text": "Declarator is used only in unevaluated context"
              },
              "fullDescription": {
                "text": "A declarator is used only in unevaluated context"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEnumeratorNeverUsed",
              "shortDescription": {
                "text": "Enumerator is never used"
              },
              "fullDescription": {
                "text": "An enumerator is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEqualOperandsInBinaryExpression",
              "shortDescription": {
                "text": "Binary operator acts on equal operands"
              },
              "fullDescription": {
                "text": "Binary operator acts on equal operands"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppEvaluationFailure",
              "shortDescription": {
                "text": "Compile-time evaluation failure"
              },
              "fullDescription": {
                "text": "Expression or declarator value did not evaluate to a constant due to the error during 'constexpr' calculations."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              }
            },
            {
              "id": "CppEvaluationInternalFailure",
              "shortDescription": {
                "text": "[INTERNAL] Compile-time evaluation failure"
              },
              "fullDescription": {
                "text": "Expression or declarator value did not evaluate to a constant due to the error during 'constexpr' calculations."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              }
            },
            {
              "id": "CppExplicitSpecializationInNonNamespaceScope",
              "shortDescription": {
                "text": "Explicit specialization in non-namespace scope"
              },
              "fullDescription": {
                "text": "Explicit specializations of a template in non-namespace scope"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppExpressionWithoutSideEffects",
              "shortDescription": {
                "text": "Possibly erroneous expression without side-effects"
              },
              "fullDescription": {
                "text": "Possibly erroneous expression without side-effects"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppFinalFunctionInFinalClass",
              "shortDescription": {
                "text": "Final function in a final class"
              },
              "fullDescription": {
                "text": "Redundant 'final' specifier on a function in a final class"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppFinalNonOverridingVirtualFunction",
              "shortDescription": {
                "text": "Final non-overriding virtual function"
              },
              "fullDescription": {
                "text": "A virtual function is marked 'final' and does not override a base function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppForLoopCanBeReplacedWithWhile",
              "shortDescription": {
                "text": "For-loop can be replaced with while-loop"
              },
              "fullDescription": {
                "text": "For-loop without init-statement and update expression is equivalent to a while-loop"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppForwardEnumDeclarationWithoutUnderlyingType",
              "shortDescription": {
                "text": "Forward enum declaration without underlying type"
              },
              "fullDescription": {
                "text": "ISO C++ forbids forward declarations of an enum without an underlying type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppFunctionDoesntReturnValue",
              "shortDescription": {
                "text": "No return statement in a function or a lambda returning non-void"
              },
              "fullDescription": {
                "text": "No return statement in a function or a lambda with non-void return type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppFunctionIsNotImplemented",
              "shortDescription": {
                "text": "Function is not implemented"
              },
              "fullDescription": {
                "text": "A function is not implemented"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppFunctionResultShouldBeUsed",
              "shortDescription": {
                "text": "Function result should be used"
              },
              "fullDescription": {
                "text": "Function returns a value of a type that should be handled at the call site"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppFunctionalStyleCast",
              "shortDescription": {
                "text": "Functional-style cast is used instead of a C++ cast"
              },
              "fullDescription": {
                "text": "Functional-style cast is used instead of a C++ cast"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-casts-named",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-casts-named"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppHeaderHasBeenAlreadyIncluded",
              "shortDescription": {
                "text": "Guarded header has already been included"
              },
              "fullDescription": {
                "text": "Guarded header has already been included"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppHiddenFunction",
              "shortDescription": {
                "text": "Non-virtual class member function hidden in a derived class"
              },
              "fullDescription": {
                "text": "Non-virtual class member function is hidden in a derived class"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-reuse",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-reuse"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppHidingFunction",
              "shortDescription": {
                "text": "Class member function hiding a non-virtual function from a base class"
              },
              "fullDescription": {
                "text": "Class member function hides a non-virtual function from a base class"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-reuse",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-reuse"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppIdenticalOperandsInBinaryExpression",
              "shortDescription": {
                "text": "Binary operator acts on identical operands"
              },
              "fullDescription": {
                "text": "Binary operator acts on identical operands"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppIfCanBeReplacedByConstexprIf",
              "shortDescription": {
                "text": "If statement with constant condition can be replaced with 'if constexpr'"
              },
              "fullDescription": {
                "text": "If statement with constant condition can be replaced with 'if constexpr'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppImplicitDefaultConstructorNotAvailable",
              "shortDescription": {
                "text": "Implicit default constructor is not available"
              },
              "fullDescription": {
                "text": "Implicit default constructor is not available because a base class or a class member does not have an accessible default constructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppIncompatiblePointerConversion",
              "shortDescription": {
                "text": "Implicit conversion to incompatible pointer type"
              },
              "fullDescription": {
                "text": "Implicit conversion to incompatible pointer type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppIncompleteSwitchStatement",
              "shortDescription": {
                "text": "Possibly erroneous incomplete switch-statement"
              },
              "fullDescription": {
                "text": "The switch statement doesn't cover the whole range of the enumeration used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppInconsistentNaming",
              "shortDescription": {
                "text": "Inconsistent Naming"
              },
              "fullDescription": {
                "text": "Name doesn't match naming style defined for this kind of symbol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppIncorrectBlankLinesNearBraces",
              "shortDescription": {
                "text": "Incorrect blank lines: Incorrect number of blank lines near braces"
              },
              "fullDescription": {
                "text": "Incorrect blank lines: Incorrect number of blank lines near braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppInitializedValueIsAlwaysRewritten",
              "shortDescription": {
                "text": "Declarator is reassigned in all paths before being read"
              },
              "fullDescription": {
                "text": "A declarator is reassigned in all paths before being read"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppIntegralToPointerConversion",
              "shortDescription": {
                "text": "Implicit integer to pointer conversion"
              },
              "fullDescription": {
                "text": "Implicit integer to pointer conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppInvalidLineContinuation",
              "shortDescription": {
                "text": "Backslash and newline are separated by space"
              },
              "fullDescription": {
                "text": "Backslash is not a line continuator because there is a space between it and the end of the line"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppJoinDeclarationAndAssignment",
              "shortDescription": {
                "text": "Declaration and assignment can be joined"
              },
              "fullDescription": {
                "text": "Declaration of a variable and assignment to it can be joined"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-init",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-init"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppLambdaCaptureNeverUsed",
              "shortDescription": {
                "text": "Lambda capture is never used"
              },
              "fullDescription": {
                "text": "A lambda capture is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppLocalVariableMayBeConst",
              "shortDescription": {
                "text": "Local variable can be made const"
              },
              "fullDescription": {
                "text": "Local variable can be made const"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-const",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-const"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppLocalVariableMightNotBeInitialized",
              "shortDescription": {
                "text": "Local variable might not be initialized"
              },
              "fullDescription": {
                "text": "A local variable might not be initialized"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppLocalVariableWithNonTrivialDtorIsNeverUsed",
              "shortDescription": {
                "text": "Local variable is never used, but may have side-effects in its destructor"
              },
              "fullDescription": {
                "text": "Local variable is never used, but may have side-effects in its destructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppLongFloat",
              "shortDescription": {
                "text": "'long' floats are not allowed by the C++ standard"
              },
              "fullDescription": {
                "text": "Declaration specifier 'long' cannot be combined with 'float'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMemberFunctionMayBeConst",
              "shortDescription": {
                "text": "Member function can be made const"
              },
              "fullDescription": {
                "text": "Member function can be made const"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-fct",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-fct"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMemberFunctionMayBeStatic",
              "shortDescription": {
                "text": "Member function can be made static"
              },
              "fullDescription": {
                "text": "Member function can be made static"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMemberInitializersOrder",
              "shortDescription": {
                "text": "Use preferred initialization style: Order of member initializers does not match the initialization order"
              },
              "fullDescription": {
                "text": "Order of member initializers does not match the initialization order"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-order",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-order"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMismatchedClassTags",
              "shortDescription": {
                "text": "Mismatched class tags"
              },
              "fullDescription": {
                "text": "Tags of the declared class do not match previous declarations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMissingBlankLines",
              "shortDescription": {
                "text": "Incorrect blank lines: Blank lines are missing elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect blank lines: Blank lines are missing elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMissingIncludeGuard",
              "shortDescription": {
                "text": "Missing include guard"
              },
              "fullDescription": {
                "text": "Include guard is not found at the beginning of a header file"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-guards",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-guards"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMissingIndent",
              "shortDescription": {
                "text": "Incorrect indent: Missing indent/outdent elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect indent: Missing indent/outdent elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMissingKeywordThrow",
              "shortDescription": {
                "text": "May be missing keyword 'throw'"
              },
              "fullDescription": {
                "text": "Object of exception type is created, but is not thrown"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMissingLinebreak",
              "shortDescription": {
                "text": "Incorrect line breaks: Line break is missing elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Line break is missing elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMissingSpace",
              "shortDescription": {
                "text": "Incorrect spacing: Space is missing elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Space is missing elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMsExtAddressOfClassRValue",
              "shortDescription": {
                "text": "Taking an address of class r-value is non-standard Microsoft C++ extension"
              },
              "fullDescription": {
                "text": "Taking an address of class r-value is non-standard Microsoft C++ extension"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMsExtBindingRValueToLvalueReference",
              "shortDescription": {
                "text": "Binding r-value to l-value reference is non-standard Microsoft C++ extension"
              },
              "fullDescription": {
                "text": "Binding r-value to l-value reference is non-standard Microsoft C++ extension"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMsExtCopyElisionInCopyInitDeclarator",
              "shortDescription": {
                "text": "Call of deleted copy constructor elided during copy-initialization. This is non-standard Microsoft C++ extension."
              },
              "fullDescription": {
                "text": "Call of deleted copy constructor elided during copy-initialization. This is non-standard Microsoft C++ extension."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMsExtDoubleUserConversionInCopyInit",
              "shortDescription": {
                "text": "More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension."
              },
              "fullDescription": {
                "text": "More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMsExtNotInitializedStaticConstLocalVar",
              "shortDescription": {
                "text": "Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension."
              },
              "fullDescription": {
                "text": "Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMsExtReinterpretCastFromNullptr",
              "shortDescription": {
                "text": "Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension"
              },
              "fullDescription": {
                "text": "Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMultiCharacterLiteral",
              "shortDescription": {
                "text": "Multi-character character literal"
              },
              "fullDescription": {
                "text": "Multi-character character literal"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMultiCharacterWideLiteral",
              "shortDescription": {
                "text": "Multi-character wide character literal"
              },
              "fullDescription": {
                "text": "Multi-character wide character literal"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMultipleSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Multiple spaces are prohibited"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Multiple spaces are prohibited"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMustBePublicVirtualToImplementInterface",
              "shortDescription": {
                "text": "Method must be public and virtual to implement a C++/CLI interface member"
              },
              "fullDescription": {
                "text": "Method must be public and virtual to implement a C++/CLI interface member"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppMutableSpecifierOnReferenceMember",
              "shortDescription": {
                "text": "Reference class member with 'mutable' specifier"
              },
              "fullDescription": {
                "text": "Reference class members cannot have 'mutable' specifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppNoDiscardExpression",
              "shortDescription": {
                "text": "Result of nodiscard function is not used"
              },
              "fullDescription": {
                "text": "Result of nodiscard function is not used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppNodiscardFunctionWithoutReturnValue",
              "shortDescription": {
                "text": "[[nodiscard]] cannot be applied to functions without a return value"
              },
              "fullDescription": {
                "text": "The [[nodiscard]] attribute cannot be applied to functions without a return value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppNonExceptionSafeResourceAcquisition",
              "shortDescription": {
                "text": "Non-safe resource acquisition"
              },
              "fullDescription": {
                "text": "Detects leak-prone resource acquisition/freeing constructs"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppNonExplicitConversionOperator",
              "shortDescription": {
                "text": "Non-explicit conversion operator"
              },
              "fullDescription": {
                "text": "Non-explicit conversion operator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Ro-conversion",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Ro-conversion"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppNonExplicitConvertingConstructor",
              "shortDescription": {
                "text": "Non-explicit converting constructor"
              },
              "fullDescription": {
                "text": "Non-explicit converting constructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-explicit",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-explicit"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppNonInlineFunctionDefinitionInHeaderFile",
              "shortDescription": {
                "text": "Non-inline function definition in a header file"
              },
              "fullDescription": {
                "text": "A function definition in a header file that will lead to a multiple definition linkage error"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-inline",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-inline"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppNonInlineVariableDefinitionInHeaderFile",
              "shortDescription": {
                "text": "Non-inline variable definition in a header file"
              },
              "fullDescription": {
                "text": "A variable definition in a header file that will lead to a multiple definition linkage error"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-inline",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-inline"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppNotAllPathsReturnValue",
              "shortDescription": {
                "text": "Not all control paths return a value"
              },
              "fullDescription": {
                "text": "Not all control paths inside a function or a lambda return a value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppObjectMemberMightNotBeInitialized",
              "shortDescription": {
                "text": "Object member might not be initialized"
              },
              "fullDescription": {
                "text": "An object member might not be initialized"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppOutParameterMustBeWritten",
              "shortDescription": {
                "text": "The 'out' parameter must be assigned"
              },
              "fullDescription": {
                "text": "In HLSL 'out' parameters must be assigned before exiting the function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppOutdentIsOffPrevLevel",
              "shortDescription": {
                "text": "Incorrect indent: Indent level is not restored"
              },
              "fullDescription": {
                "text": "Incorrect indent: Indent level is not restored"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppParameterMayBeConst",
              "shortDescription": {
                "text": "Parameter can be made const"
              },
              "fullDescription": {
                "text": "Parameter can be made const"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-immutable",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-immutable"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppParameterMayBeConstPtrOrRef",
              "shortDescription": {
                "text": "Parameter can be made pointer/reference to const"
              },
              "fullDescription": {
                "text": "Parameter can be made pointer/reference to const"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-ref",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-ref"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppParameterNamesMismatch",
              "shortDescription": {
                "text": "Parameter names do not match"
              },
              "fullDescription": {
                "text": "Parameter names differ in different declarations of the same function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppParameterNeverUsed",
              "shortDescription": {
                "text": "Parameter is never used"
              },
              "fullDescription": {
                "text": "Function parameter is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-unused",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-unused"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppParameterValueIsReassigned",
              "shortDescription": {
                "text": "Parameter is always rewritten in function body before being read"
              },
              "fullDescription": {
                "text": "A parameter is always rewritten in function body before being read"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPassValueParameterByConstReference",
              "shortDescription": {
                "text": "Pass value parameters by const reference"
              },
              "fullDescription": {
                "text": "Parameter of a type that is expensive to copy is passed by value, but it can be passed by const reference instead"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPointerConversionDropsQualifiers",
              "shortDescription": {
                "text": "Implicit conversion to pointer type with loss of qualifiers"
              },
              "fullDescription": {
                "text": "Implicit conversion to pointer type with loss of qualifiers"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPointerToIntegralConversion",
              "shortDescription": {
                "text": "Implicit pointer to integer conversion"
              },
              "fullDescription": {
                "text": "Implicit pointer to integer conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPolymorphicClassWithNonVirtualPublicDestructor",
              "shortDescription": {
                "text": "Polymorphic class with non-virtual public destructor"
              },
              "fullDescription": {
                "text": "A polymorphic class with a non-virtual public destructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPossiblyErroneousEmptyStatements",
              "shortDescription": {
                "text": "Possibly erroneous empty statement"
              },
              "fullDescription": {
                "text": "Possibly erroneous empty statement used in a control statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPossiblyUninitializedMember",
              "shortDescription": {
                "text": "Possibly uninitialized class member"
              },
              "fullDescription": {
                "text": "Class constructor does not initialize a field explicitly or implicitly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPossiblyUnintendedObjectSlicing",
              "shortDescription": {
                "text": "Possibly unintended object slicing"
              },
              "fullDescription": {
                "text": "Possibly unintended object slicing"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPrecompiledHeaderIsNotIncluded",
              "shortDescription": {
                "text": "Precompiled header is not included"
              },
              "fullDescription": {
                "text": "Precompiled header must be included at the top of source file"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPrecompiledHeaderNotFound",
              "shortDescription": {
                "text": "Precompiled header is not found"
              },
              "fullDescription": {
                "text": "No corresponding file with the 'Precompiled Header' property set to 'Create' (/Yc) is found"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPrintfBadFormat",
              "shortDescription": {
                "text": "Invalid printf format specifier"
              },
              "fullDescription": {
                "text": "Format string contains an invalid printf format specifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPrintfExtraArg",
              "shortDescription": {
                "text": "Too many arguments in a call to printf"
              },
              "fullDescription": {
                "text": "Too many arguments in a call to printf. Some of the arguments are not used."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPrintfMissedArg",
              "shortDescription": {
                "text": "Not enough arguments in a call to printf"
              },
              "fullDescription": {
                "text": "Not enough arguments in a call to printf. Some format directives do not have matching arguments."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPrintfRiskyFormat",
              "shortDescription": {
                "text": "Possibly invalid printf format specifier"
              },
              "fullDescription": {
                "text": "Format string contains a potential error"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppPrivateSpecialMemberFunctionIsNotImplemented",
              "shortDescription": {
                "text": "Private special member function is not implemented"
              },
              "fullDescription": {
                "text": "A private special member function must be defined or deleted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRangeBasedForIncompatibleReference",
              "shortDescription": {
                "text": "Possibly unintended incompatible reference type in range declaration"
              },
              "fullDescription": {
                "text": "Using an incompatible reference type in the range declaration is likely to cause unwanted object copying"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedefinitionOfDefaultArgumentInOverrideFunction",
              "shortDescription": {
                "text": "Override function redefines a default parameter argument"
              },
              "fullDescription": {
                "text": "An override function redefines a default parameter argument, previously defined in a base function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rh-virtual-default-arg",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rh-virtual-default-arg"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantAccessSpecifier",
              "shortDescription": {
                "text": "Access specifier does not change accessibility level"
              },
              "fullDescription": {
                "text": "An access specifier does not change the accessibility level and is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/CppRedundantAccessSpecifier.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/CppRedundantAccessSpecifier.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantBaseClassAccessSpecifier",
              "shortDescription": {
                "text": "Redundant base class access specifier"
              },
              "fullDescription": {
                "text": "Redundant base class access specifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantBaseClassInitializer",
              "shortDescription": {
                "text": "Redundant base class initializer"
              },
              "fullDescription": {
                "text": "Redundant base class initializer in a member initializer list"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantBlankLines",
              "shortDescription": {
                "text": "Incorrect blank lines: Blank lines are redundant elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect blank lines: Blank lines are redundant elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantBooleanExpressionArgument",
              "shortDescription": {
                "text": "Redundant argument in conditional expression"
              },
              "fullDescription": {
                "text": "Redundant argument in conditional expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantCastExpression",
              "shortDescription": {
                "text": "Redundant cast expression"
              },
              "fullDescription": {
                "text": "Cast is redundant and can be deleted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantComplexityInComparison",
              "shortDescription": {
                "text": "Expression can be simplified"
              },
              "fullDescription": {
                "text": "Expression can be simplified"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantConditionalExpression",
              "shortDescription": {
                "text": "Redundant conditional expression"
              },
              "fullDescription": {
                "text": "Redundant conditional expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantConstSpecifier",
              "shortDescription": {
                "text": "Redundant 'const' specifier"
              },
              "fullDescription": {
                "text": "The 'const' specifier on a variable definition is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantControlFlowJump",
              "shortDescription": {
                "text": "Redundant control flow jump statement"
              },
              "fullDescription": {
                "text": "Redundant control flow jump statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantDereferencingAndTakingAddress",
              "shortDescription": {
                "text": "Redundant dereferencing and taking address"
              },
              "fullDescription": {
                "text": "Redundant dereferencing and taking address"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantElaboratedTypeSpecifier",
              "shortDescription": {
                "text": "Redundant elaborated type specifier"
              },
              "fullDescription": {
                "text": "Elaborated type specifier is redundant and can be deleted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantElseKeyword",
              "shortDescription": {
                "text": "Redundant 'else' keyword"
              },
              "fullDescription": {
                "text": "Redundant 'else' keyword"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantElseKeywordInsideCompoundStatement",
              "shortDescription": {
                "text": "Redundant 'else' keyword inside compound statement"
              },
              "fullDescription": {
                "text": "Redundant 'else' keyword inside compound statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantEmptyDeclaration",
              "shortDescription": {
                "text": "Redundant empty declaration"
              },
              "fullDescription": {
                "text": "Redundant empty declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantEmptyStatement",
              "shortDescription": {
                "text": "Redundant empty statement"
              },
              "fullDescription": {
                "text": "Redundant empty statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantExportKeyword",
              "shortDescription": {
                "text": "Keyword 'export' is redundant, because there is enclosing export declaration"
              },
              "fullDescription": {
                "text": "Keyword 'export' is redundant, because there is enclosing export declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantFwdClassOrEnumSpecifier",
              "shortDescription": {
                "text": "Redundant forward declaration"
              },
              "fullDescription": {
                "text": "Redundant forward declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantInlineSpecifier",
              "shortDescription": {
                "text": "Redundant 'inline' specifier"
              },
              "fullDescription": {
                "text": "The 'inline' specifier on a function definition is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantLambdaParameterList",
              "shortDescription": {
                "text": "Redundant parameter list in lambda declarator"
              },
              "fullDescription": {
                "text": "Empty parameter list in lambda declarator can be deleted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantLinebreak",
              "shortDescription": {
                "text": "Incorrect line breaks: Line break is redundant elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Line break is redundant elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantMemberInitializer",
              "shortDescription": {
                "text": "Redundant member initializer in constructor initialization list"
              },
              "fullDescription": {
                "text": "Redundant member initializer in constructor initialization list"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantNamespaceDefinition",
              "shortDescription": {
                "text": "Namespace definition containing single class specialization"
              },
              "fullDescription": {
                "text": "Don't introduce a namespace definition only for class specialization, specialization can be defined using qualified class name"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantParentheses",
              "shortDescription": {
                "text": "Redundant parentheses"
              },
              "fullDescription": {
                "text": "Parentheses do not change the order of operations and can be deleted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantQualifier",
              "shortDescription": {
                "text": "Redundant qualifier"
              },
              "fullDescription": {
                "text": "Qualifier is redundant and can be deleted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantQualifierADL",
              "shortDescription": {
                "text": "Redundant qualifier (ADL)"
              },
              "fullDescription": {
                "text": "Qualifier is redundant (because of ADL) and can be deleted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantSpace",
              "shortDescription": {
                "text": "Incorrect spacing: Space is redundant elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Space is redundant elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantStaticSpecifierOnMemberAllocationFunction",
              "shortDescription": {
                "text": "Redundant 'static' specifier on a member allocation/deallocation function"
              },
              "fullDescription": {
                "text": "The 'static' specifier is optional for member allocation/deallocation functions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantStaticSpecifierOnThreadLocalLocalVariable",
              "shortDescription": {
                "text": "Redundant 'static' specifier on a 'thread_local' local variable"
              },
              "fullDescription": {
                "text": "Redundant 'static' specifier on a 'thread_local' local variable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantTemplateArguments",
              "shortDescription": {
                "text": "Redundant template arguments"
              },
              "fullDescription": {
                "text": "Redundant template arguments"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantTemplateKeyword",
              "shortDescription": {
                "text": "Redundant 'template' keyword"
              },
              "fullDescription": {
                "text": "Redundant 'template' keyword"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantTypenameKeyword",
              "shortDescription": {
                "text": "Redundant 'typename' keyword"
              },
              "fullDescription": {
                "text": "Redundant 'typename' keyword"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantVoidArgumentList",
              "shortDescription": {
                "text": "Redundant void argument list"
              },
              "fullDescription": {
                "text": "Redundant void argument list"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRedundantZeroInitializerInAggregateInitialization",
              "shortDescription": {
                "text": "Redundant zero initializer in aggregate initialization"
              },
              "fullDescription": {
                "text": "Redundant zero initializer in aggregate initialization"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppReinterpretCastFromVoidPtr",
              "shortDescription": {
                "text": "reinterpret_cast is used instead of static_cast"
              },
              "fullDescription": {
                "text": "reinterpret_cast is used instead of static_cast"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppRemoveRedundantBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Remove redundant braces"
              },
              "fullDescription": {
                "text": "Braces can be safely removed without changing code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppReplaceMemsetWithZeroInitialization",
              "shortDescription": {
                "text": "Zero initialization can be used instead of memset"
              },
              "fullDescription": {
                "text": "Zero initialization can be used instead of memset"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-memset",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-memset"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppReplaceTieWithStructuredBinding",
              "shortDescription": {
                "text": "Structured bindings can be used instead of tie(..)"
              },
              "fullDescription": {
                "text": "Structured bindings can be used instead of tie(..)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppReturnNoValueInNonVoidFunction",
              "shortDescription": {
                "text": "A function or a lambda with non-void return type should return a value"
              },
              "fullDescription": {
                "text": "A function or a lambda with non-void return type should return a value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppSmartPointerVsMakeFunction",
              "shortDescription": {
                "text": "Constructor of smart pointer is used instead of its make function"
              },
              "fullDescription": {
                "text": "Constructor of a smart pointer (boost/std::shared_ptr/unique_ptr) is used instead of the corresponding make_shared/make_unique.\r\n          Make functions are exception-safe and more efficient."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppSomeObjectMembersMightNotBeInitialized",
              "shortDescription": {
                "text": "Some object members might not be initialized"
              },
              "fullDescription": {
                "text": "Some object members might not be initialized"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppSpecialFunctionWithoutNoexceptSpecification",
              "shortDescription": {
                "text": "Special function without noexcept specification"
              },
              "fullDescription": {
                "text": "Special function does not have any noexcept specification"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-noexcept",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-noexcept"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppStaticAssertFailure",
              "shortDescription": {
                "text": "static_assert failed"
              },
              "fullDescription": {
                "text": "static_assert failed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppStaticDataMemberInUnnamedStruct",
              "shortDescription": {
                "text": "Static data member in an anonymous class is not allowed by the C++ standard"
              },
              "fullDescription": {
                "text": "Static data members are not allowed in anonymous classes"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppStaticSpecifierOnAnonymousNamespaceMember",
              "shortDescription": {
                "text": "Redundant 'static' specifier on an anonymous namespace member"
              },
              "fullDescription": {
                "text": "Redundant 'static' specifier on an anonymous namespace member"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppStringLiteralToCharPointerConversion",
              "shortDescription": {
                "text": "String literal to char pointer conversion"
              },
              "fullDescription": {
                "text": "String literal to char pointer conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppTabsAndSpacesMismatch",
              "shortDescription": {
                "text": "Incorrect indent: Tabs/spaces mismatch"
              },
              "fullDescription": {
                "text": "Incorrect indent: Tabs/spaces mismatch"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppTabsAreDisallowed",
              "shortDescription": {
                "text": "Incorrect spacing: Tabs are prohibited"
              },
              "fullDescription": {
                "text": "Prohibits the use of tabulation character everywhere in file"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppTabsOutsideIndent",
              "shortDescription": {
                "text": "Incorrect spacing: Tabs are prohibited except for indentation"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Tabs are prohibited except for indentation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppTemplateArgumentsCanBeDeduced",
              "shortDescription": {
                "text": "Template arguments can be deduced"
              },
              "fullDescription": {
                "text": "Template arguments can be deduced"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppTemplateParameterNeverUsed",
              "shortDescription": {
                "text": "Template parameter is never used"
              },
              "fullDescription": {
                "text": "A template parameter is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppTemplateParameterShadowing",
              "shortDescription": {
                "text": "Redeclaration of a template parameter from an outer scope"
              },
              "fullDescription": {
                "text": "A template parameter from an outer scope is shadowed by a declaration with the same name"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppThisArgMemberFuncDelegateCtorIsUnsuportedByDotNetCore",
              "shortDescription": {
                "text": "Delegate constructors with a member pointer parameter are unsupported by .NET Core"
              },
              "fullDescription": {
                "text": "Delegate constructors with a member pointer parameter are unsupported by .NET Core. Use a pointer to e.g. static function instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP..NET Core"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppThrowExpressionCanBeReplacedWithRethrow",
              "shortDescription": {
                "text": "Throw expression can be replaced with a rethrow expression"
              },
              "fullDescription": {
                "text": "Throw expression can be replaced with a rethrow expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppTooWideScope",
              "shortDescription": {
                "text": "Variable can be moved to inner scope"
              },
              "fullDescription": {
                "text": "Don't introduce a variable before you need to use it"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppTooWideScopeInitStatement",
              "shortDescription": {
                "text": "Variable can be moved to init statement"
              },
              "fullDescription": {
                "text": "Don't introduce a variable before you need to use it"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppTypeAliasNeverUsed",
              "shortDescription": {
                "text": "Type alias is never used"
              },
              "fullDescription": {
                "text": "A type alias is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUE4BlueprintCallableFunctionMayBeConst",
              "shortDescription": {
                "text": "BlueprintCallable function can be made const"
              },
              "fullDescription": {
                "text": "BlueprintCallable function can be made const"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUE4BlueprintCallableFunctionMayBeStatic",
              "shortDescription": {
                "text": "BlueprintCallable function can be made static"
              },
              "fullDescription": {
                "text": "BlueprintCallable function can be made static"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUE4CodingStandardNamingViolationWarning",
              "shortDescription": {
                "text": "Inconsistent Unreal Engine Naming"
              },
              "fullDescription": {
                "text": "Name doesn't match the Unreal Engine's coding standard naming style. <a href=\"https://docs.unrealengine.com/en-us/Programming/Development/CodingStandard#namingconventions\">Learn more…</a>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUE4CodingStandardUClassNamingViolationError",
              "shortDescription": {
                "text": "Inconsistent Unreal Engine UCLASS Naming"
              },
              "fullDescription": {
                "text": "Class is declared with UCLASS or USTRUCT macro but its name doesn't match the Unreal Engine's coding standard naming style; this will lead to a build error. This inspection includes three rules: classes inherited from AActor must be prefixed by 'A', classes inherited from UObject must be prefixed by 'U', and USTRUCTS must be prefixed by 'F'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUE4ProbableMemoryIssuesWithUObject",
              "shortDescription": {
                "text": "Non-UProperty object member can be destroyed during garbage collection, resulting in a stale pointer"
              },
              "fullDescription": {
                "text": "Non-UProperty object member can be destroyed during garbage collection, resulting in a stale pointer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUE4ProbableMemoryIssuesWithUObjectsInContainer",
              "shortDescription": {
                "text": "Objects stored in non-uproperty member can be destroyed during garbage collection, resulting in stale pointers"
              },
              "fullDescription": {
                "text": "Objects stored in non-uproperty member can be destroyed during garbage collection, resulting in stale pointers"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUEBlueprintCallableFunctionUnused",
              "shortDescription": {
                "text": "BlueprintCallable function is never used in Blueprint or C++ code"
              },
              "fullDescription": {
                "text": "BlueprintCallable function is never used in Blueprint or C++ code"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUEBlueprintImplementableEventNotImplemented",
              "shortDescription": {
                "text": "BlueprintImplementableEvent function is not implemented in any blueprint"
              },
              "fullDescription": {
                "text": "BlueprintImplementableEvent function is not implemented in any blueprint"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUEIncorrectEngineDirectory",
              "shortDescription": {
                "text": "Specified version of the engine project is not found"
              },
              "fullDescription": {
                "text": "Location of engine project does not correspond to the version of engine targeted by uproject. You might need to regenerate the project files."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUEMissingStructMember",
              "shortDescription": {
                "text": "Struct is missing a member required by TStructOpsTypeTraits"
              },
              "fullDescription": {
                "text": "Struct is missing a member required by TStructOpsTypeTraits"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUEMissingSuperCall",
              "shortDescription": {
                "text": "Missing call to a function from the Super class"
              },
              "fullDescription": {
                "text": "Missing call to a function from the Super class"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUENonExistentInputAction",
              "shortDescription": {
                "text": "Action with this name does not exist"
              },
              "fullDescription": {
                "text": "Action with this name does not exist"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUENonExistentInputAxis",
              "shortDescription": {
                "text": "Axis with this name does not exist"
              },
              "fullDescription": {
                "text": "Axis with this name does not exist"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUESourceFileWithoutPredefinedMacros",
              "shortDescription": {
                "text": "Unreal Engine source file without predefined Unreal macros"
              },
              "fullDescription": {
                "text": "There are no Unreal Engine predefined macros in the project model for the current source file. You might need to regenerate the project files."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUESourceFileWithoutStandardLibrary",
              "shortDescription": {
                "text": "C/C++ standard library headers not found"
              },
              "fullDescription": {
                "text": "C++ standard library headers cannot be resolved in an Unreal Engine source file. You might need to regenerate the project files."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUEVersionFileDoesntExist",
              "shortDescription": {
                "text": "Unreal Engine version file does not exist"
              },
              "fullDescription": {
                "text": "Unreal Engine version file specified in UE4.vcxproj does not exist. You might need to regenerate the project files."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUFunctionMacroCallHasNoEffect",
              "shortDescription": {
                "text": "UFUNCTION macro call has no effect"
              },
              "fullDescription": {
                "text": "UFUNCTION macro call has no effect outside of UCLASS, USTRUCT or IInterface"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUPropertyMacroCallHasNoEffect",
              "shortDescription": {
                "text": "UPROPERTY macro call has no effect"
              },
              "fullDescription": {
                "text": "UPROPERTY macro call has no effect outside of UCLASS or USTRUCT"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUninitializedDependentBaseClass",
              "shortDescription": {
                "text": "Uninitialized dependent base class"
              },
              "fullDescription": {
                "text": "Possibly uninitialized dependent base class"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUninitializedNonStaticDataMember",
              "shortDescription": {
                "text": "Non-static data member is uninitialized"
              },
              "fullDescription": {
                "text": "Non-static data member is uninitialized"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUnionMemberOfReferenceType",
              "shortDescription": {
                "text": "Union member of reference type"
              },
              "fullDescription": {
                "text": "Unions cannot contain non-static data members of reference types"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUnmatchedPragmaEndRegionDirective",
              "shortDescription": {
                "text": "Missing a matching '#pragma region' directive"
              },
              "fullDescription": {
                "text": "A '#pragma endregion' directive is missing a matching '#pragma region' directive"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUnmatchedPragmaRegionDirective",
              "shortDescription": {
                "text": "Missing a matching '#pragma endregion' directive"
              },
              "fullDescription": {
                "text": "A '#pragma region' directive is missing a matching '#pragma endregion' directive"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUnnamedNamespaceInHeaderFile",
              "shortDescription": {
                "text": "Unnamed namespace in a header file"
              },
              "fullDescription": {
                "text": "Unnamed namespaces should not be used in header files"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-unnamed",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-unnamed"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUnnecessaryWhitespace",
              "shortDescription": {
                "text": "Incorrect spacing: Redundant whitespaces at the end of a line"
              },
              "fullDescription": {
                "text": "Redundant whitespace characters at the end of a line"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUnreachableCode",
              "shortDescription": {
                "text": "Unreachable code"
              },
              "fullDescription": {
                "text": "Unreachable code"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUnsignedZeroComparison",
              "shortDescription": {
                "text": "Comparison of unsigned expression with 0"
              },
              "fullDescription": {
                "text": "Comparison of unsigned expression with 0"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUnusedIncludeDirective",
              "shortDescription": {
                "text": "Possibly unused #include directive"
              },
              "fullDescription": {
                "text": "Possibly unused #include directive"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseAlgorithmWithCount",
              "shortDescription": {
                "text": "Algorithm accepting an iterator and a count can be used"
              },
              "fullDescription": {
                "text": "A standard algorithm accepting range iterators is used instead of the variant accepting an iterator and a count"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseAssociativeContains",
              "shortDescription": {
                "text": "'contains' member function can be used"
              },
              "fullDescription": {
                "text": "'contains' member function can be used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseAuto",
              "shortDescription": {
                "text": "Use preferred 'auto' style: Type can be replaced with auto"
              },
              "fullDescription": {
                "text": "Type can be replaced with 'auto'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseAutoForNumeric",
              "shortDescription": {
                "text": "Use preferred 'auto' style: Numeric type can be replaced with auto"
              },
              "fullDescription": {
                "text": "A numeric type can be replaced with 'auto'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseElementsView",
              "shortDescription": {
                "text": "std::views::keys/values can be used"
              },
              "fullDescription": {
                "text": "For example, when iterating on key-value pairs, std::views::keys\r\n          allows ignoring the values."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseEraseAlgorithm",
              "shortDescription": {
                "text": "'std::erase'/'std::erase_if' can be used instead of the remove-erase idiom"
              },
              "fullDescription": {
                "text": "'std::erase'/'std::erase_if' can be used instead of the remove-erase idiom"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseFamiliarTemplateSyntaxForGenericLambdas",
              "shortDescription": {
                "text": "Lambda can be rewritten to use explicit template parameters"
              },
              "fullDescription": {
                "text": "Lambda can be rewritten to use explicit template parameters"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseOfUndeclaredClass",
              "shortDescription": {
                "text": "Use of a class that has not been declared previously"
              },
              "fullDescription": {
                "text": "Use of a class that has not been declared previously"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.Unreal Engine"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseRangeAlgorithm",
              "shortDescription": {
                "text": "Algorithm operating on ranges can be used"
              },
              "fullDescription": {
                "text": "Algorithm accepting iterators is used instead of the corresponding algorithm from std::ranges"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseStdSize",
              "shortDescription": {
                "text": "std::size can be used"
              },
              "fullDescription": {
                "text": "std::size is a type safe alternative to C idiom for array size calculation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseStructuredBinding",
              "shortDescription": {
                "text": "Structured bindings can be used"
              },
              "fullDescription": {
                "text": "Structured bindings can be used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUseTypeTraitAlias",
              "shortDescription": {
                "text": "Type trait can be simplified using a template alias or a variable template"
              },
              "fullDescription": {
                "text": "A type trait can be simplified using a template alias or a variable template"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUserDefinedLiteralSuffixDoesNotStartWithUnderscore",
              "shortDescription": {
                "text": "User-defined literal suffixes must start with an underscore"
              },
              "fullDescription": {
                "text": "User-defined literal suffixes must start with an underscore. The suffixes that do not begin with an underscore are reserved for the literal operators provided by the standard library."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppUsingResultOfAssignmentAsCondition",
              "shortDescription": {
                "text": "Result of assignment is used as condition"
              },
              "fullDescription": {
                "text": "Result of assignment is used as condition"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppVariableCanBeMadeConstexpr",
              "shortDescription": {
                "text": "Variable can be made constexpr"
              },
              "fullDescription": {
                "text": "Variable can be made constexpr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-constexpr",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-constexpr"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppVirtualFunctionCallInsideCtor",
              "shortDescription": {
                "text": "Call to a virtual function inside a constructor/destructor is resolved at compile time"
              },
              "fullDescription": {
                "text": "Call to a virtual function inside a constructor/destructor is resolved at compile time"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-ctor-virtual",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-ctor-virtual"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppVirtualFunctionInFinalClass",
              "shortDescription": {
                "text": "Declaration of a non-overriding virtual function in a final or sealed class"
              },
              "fullDescription": {
                "text": "A non-overriding virtual function in a final or sealed class cannot be overridden, so the 'virtual' specifier is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppVolatileParameterInDeclaration",
              "shortDescription": {
                "text": "Volatile-qualified parameter in a function declaration"
              },
              "fullDescription": {
                "text": "Volatile-qualification of parameters has an effect only in function definitions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppWarningDirective",
              "shortDescription": {
                "text": "#warning directive"
              },
              "fullDescription": {
                "text": "#warning preprocessor directive"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppWrongIncludesOrder",
              "shortDescription": {
                "text": "Use preferred include directive style: Order of #include directives does not match code style settings"
              },
              "fullDescription": {
                "text": "Order of #include directives does not match code style settings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppWrongIndentSize",
              "shortDescription": {
                "text": "Incorrect indent: Incorrect indent size"
              },
              "fullDescription": {
                "text": "Incorrect indent: Incorrect indent size"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppWrongSlashesInIncludeDirective",
              "shortDescription": {
                "text": "Use preferred include directive style: Slash symbol used in #include directive does not match code style settings"
              },
              "fullDescription": {
                "text": "Slash symbol used in #include directive does not match code style settings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppZeroConstantCanBeReplacedWithNullptr",
              "shortDescription": {
                "text": "Zero constant can be replaced with nullptr"
              },
              "fullDescription": {
                "text": "Zero constant can be replaced with nullptr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-nullptr",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-nullptr"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CppZeroValuedExpressionUsedAsNullPointer",
              "shortDescription": {
                "text": "Expression that evaluates to zero is used as a null pointer constant"
              },
              "fullDescription": {
                "text": "Expression that evaluates to zero is used as a null pointer constant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-nullptr",
              "help": {
                "text": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-nullptr"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CqrsDebug",
              "shortDescription": {
                "text": "CqrsDebug"
              },
              "fullDescription": {
                "text": "CqrsDebug"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              }
            },
            {
              "id": "DefaultStructEqualityIsUsed.Global",
              "shortDescription": {
                "text": "Struct with default equality members is used for comparison: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Default implementations of the 'Equals' and 'GetHashCode' methods of a struct are based on reflection and perform poorly. To prevent boxing and improve performance, overriding the equality members is recommended. This inspection only triggers if the struct or its containing type (such as record) is actually used for equality comparisons in the solution."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/DefaultStructEqualityIsUsed.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/DefaultStructEqualityIsUsed.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DefaultStructEqualityIsUsed.Local",
              "shortDescription": {
                "text": "Struct with default equality members is used for comparison: Private accessibility"
              },
              "fullDescription": {
                "text": "Default implementations of the 'Equals' and 'GetHashCode' methods of a struct are based on reflection and perform poorly. To prevent boxing and improve performance, overriding the equality members is recommended. This inspection only triggers if the struct or its containing type (such as record) is actually used for equality comparisons in the solution."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/DefaultStructEqualityIsUsed.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/DefaultStructEqualityIsUsed.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DefaultValueAttributeForOptionalParameter",
              "shortDescription": {
                "text": "Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value"
              },
              "fullDescription": {
                "text": "Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value. 'DefaultParameterValueAttribute' must be used instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DisposeOnUsingVariable",
              "shortDescription": {
                "text": "Disposal of a variable already captured by the 'using' statement"
              },
              "fullDescription": {
                "text": "Do not dispose a variable captured by the 'using' statement because its disposed state may not be obvious elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/DisposeOnUsingVariable.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/DisposeOnUsingVariable.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DoubleNegationInPattern",
              "shortDescription": {
                "text": "Simplify negated pattern"
              },
              "fullDescription": {
                "text": "Suggest to replace\r\n          `x is not not T` to `x is T`\r\n          `!(x is not T)` to `x is T`"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DoubleNegationOperator",
              "shortDescription": {
                "text": "Double negation operator"
              },
              "fullDescription": {
                "text": "Double negation is meaningless <pre>bool b = !!condition;</pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/DoubleNegationOperator.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/DoubleNegationOperator.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DuplicateKeyCollectionInitialization",
              "shortDescription": {
                "text": "Duplicate keys in dictionary/set initialization"
              },
              "fullDescription": {
                "text": "A dictionary or a set may only contain one element with a given key. Using the same key more than once during collection initialization is likely a bug, and can result in a runtime exception."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/DuplicateKeyCollectionInitialization.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/DuplicateKeyCollectionInitialization.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DuplicateResource",
              "shortDescription": {
                "text": "Duplicate resource name"
              },
              "fullDescription": {
                "text": "Resource file contains two or more items with identical names"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/DuplicateResource.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/DuplicateResource.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RESX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DuplicatedChainedIfBodies",
              "shortDescription": {
                "text": "Duplicated chained 'if' branches"
              },
              "fullDescription": {
                "text": "Consider merging duplicated chained 'if' branches to reduce redundancy"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/DuplicatedChainedIfBodies.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/DuplicatedChainedIfBodies.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DuplicatedSequentialIfBodies",
              "shortDescription": {
                "text": "Duplicated sequential 'if' branches"
              },
              "fullDescription": {
                "text": "Consider merging duplicated sequential 'if' branches to reduce redundancy"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/DuplicatedSequentialIfBodies.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/DuplicatedSequentialIfBodies.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DuplicatedStatements",
              "shortDescription": {
                "text": "Duplicated statements"
              },
              "fullDescription": {
                "text": "Remove statements inside conditional branches or 'switch' cases if an identical sequence is already executed afterward."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/DuplicatedStatements.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/DuplicatedStatements.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DuplicatedSwitchSectionBodies",
              "shortDescription": {
                "text": "Duplicated switch branches"
              },
              "fullDescription": {
                "text": "Duplicated switch branches. Consider merging them into a single branch to improve readability and reduce code duplication."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/DuplicatedSwitchSectionBodies.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/DuplicatedSwitchSectionBodies.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EmptyConstructor",
              "shortDescription": {
                "text": "Empty constructor"
              },
              "fullDescription": {
                "text": "Empty public constructor declaration with no parameters is redundant. The compiler generates the same by default."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EmptyConstructor.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EmptyConstructor.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EmptyDestructor",
              "shortDescription": {
                "text": "Empty destructor"
              },
              "fullDescription": {
                "text": "Empty finalizer declaration is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EmptyDestructor.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EmptyDestructor.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EmptyForStatement",
              "shortDescription": {
                "text": "Empty 'for' loop is redundant"
              },
              "fullDescription": {
                "text": "Empty 'for' loop is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EmptyForStatement.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EmptyForStatement.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EmptyGeneralCatchClause",
              "shortDescription": {
                "text": "Empty general catch clause"
              },
              "fullDescription": {
                "text": "A catch clause that catches System.Exception and has an empty body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EmptyGeneralCatchClause.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EmptyGeneralCatchClause.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EmptyNamespace",
              "shortDescription": {
                "text": "Empty namespace declaration"
              },
              "fullDescription": {
                "text": "Empty namespace declaration is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EmptyNamespace.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EmptyNamespace.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EmptyRegion",
              "shortDescription": {
                "text": "Empty region"
              },
              "fullDescription": {
                "text": "Region doesn't contain any code and can be removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EmptyStatement",
              "shortDescription": {
                "text": "Empty statement is redundant"
              },
              "fullDescription": {
                "text": "Empty statement is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EmptyStatement.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EmptyStatement.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EmptyTitleTag",
              "shortDescription": {
                "text": "Important tags or attributes missing: Empty <title>"
              },
              "fullDescription": {
                "text": "<title ...></title>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EnforceDoWhileStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'do-while' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'do-while' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EnforceDoWhileStatementBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EnforceDoWhileStatementBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EnforceFixedStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'fixed' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'fixed' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EnforceFixedStatementBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EnforceFixedStatementBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EnforceForStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'for' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'for' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EnforceForStatementBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EnforceForStatementBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EnforceForeachStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'foreach' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'foreach' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EnforceForeachStatementBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EnforceForeachStatementBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EnforceIfStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'if' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'if' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EnforceIfStatementBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EnforceIfStatementBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EnforceLockStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'lock' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'lock' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EnforceLockStatementBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EnforceLockStatementBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EnforceUsingStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'using' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'using' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EnforceUsingStatementBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EnforceUsingStatementBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EnforceWhileStatementBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Enforce braces in 'while' statement"
              },
              "fullDescription": {
                "text": "Use braces to separate 'while' statement body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EnforceWhileStatementBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EnforceWhileStatementBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EntityNameCapturedOnly.Global",
              "shortDescription": {
                "text": "Entity is only used to capture its name: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Local variable/parameter is only used to capture its name via 'nameof' expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EntityNameCapturedOnly.Local",
              "shortDescription": {
                "text": "Entity is only used to capture its name: Private accessibility"
              },
              "fullDescription": {
                "text": "Local variable/parameter is only used to capture its name via 'nameof' expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EnumUnderlyingTypeIsInt",
              "shortDescription": {
                "text": "Underlying type of enum is 'int'"
              },
              "fullDescription": {
                "text": "'int' is default underlying type of enum, so it is not necessary to specify it explicitly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EnumUnderlyingTypeIsInt.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EnumUnderlyingTypeIsInt.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EnumerableSumInExplicitUncheckedContext",
              "shortDescription": {
                "text": "'Enumerable.Sum' invocation in explicit unchecked context"
              },
              "fullDescription": {
                "text": "'Enumerable.Sum' invocation in explicit unchecked context"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EqualExpressionComparison",
              "shortDescription": {
                "text": "Similar expressions comparison"
              },
              "fullDescription": {
                "text": "Comparing similar expressions for equality is usually redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EventNeverInvoked",
              "shortDescription": {
                "text": "Event never invoked"
              },
              "fullDescription": {
                "text": "Event never invoked. Note that in C# this warning is the compiler warning CS0067 and is not configured here."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EventNeverInvoked.Global",
              "shortDescription": {
                "text": "Abstract or virtual (overridable) event is never invoked"
              },
              "fullDescription": {
                "text": "An abstract or virtual (overridable) event is never invoked in its class or its inheritors"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EventNeverSubscribedTo.Global",
              "shortDescription": {
                "text": "Event is never subscribed to: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Event is never subscribed to"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EventNeverSubscribedTo.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EventNeverSubscribedTo.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EventNeverSubscribedTo.Local",
              "shortDescription": {
                "text": "Event is never subscribed to: Private accessibility"
              },
              "fullDescription": {
                "text": "Event is never subscribed to"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/EventNeverSubscribedTo.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/EventNeverSubscribedTo.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EventUnsubscriptionViaAnonymousDelegate",
              "shortDescription": {
                "text": "Event unsubscription via anonymous delegate"
              },
              "fullDescription": {
                "text": "Event unsubscription via anonymous delegate is meaningless"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ExplicitCallerInfoArgument",
              "shortDescription": {
                "text": "Explicit argument passed to parameter with caller info attribute"
              },
              "fullDescription": {
                "text": "Compiler generates correct value for parameters marked with [CallerMemberName], [CallerFilePath], [CallerLineNumber], or [CallerArgumentExpression] attributes"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ExpressionIsAlwaysNull",
              "shortDescription": {
                "text": "Expression is always 'null'"
              },
              "fullDescription": {
                "text": "The expression is always evaluated to 'null' at this point"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ExpressionIsAlwaysNull.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ExpressionIsAlwaysNull.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ExtractCommonBranchingCode",
              "shortDescription": {
                "text": "Extract common code"
              },
              "fullDescription": {
                "text": "Extract common code out of branching statements such as 'if' or 'switch' to streamline and consolidate it, ensuring that shared logic is executed regardless of the branching path taken"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ExtractCommonBranchingCode.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ExtractCommonBranchingCode.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ExtractCommonPropertyPattern",
              "shortDescription": {
                "text": "Extract common property pattern"
              },
              "fullDescription": {
                "text": "Simplify recursive pattern by extracting common property pattern"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "FieldCanBeMadeReadOnly.Global",
              "shortDescription": {
                "text": "Field can be made readonly: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Field has no write usages after initialization and can be made readonly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/FieldCanBeMadeReadOnly.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/FieldCanBeMadeReadOnly.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "FieldCanBeMadeReadOnly.Local",
              "shortDescription": {
                "text": "Field can be made readonly: Private accessibility"
              },
              "fullDescription": {
                "text": "Field has no write usages after initialization and can be made readonly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/FieldCanBeMadeReadOnly.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/FieldCanBeMadeReadOnly.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "FieldHidesInterfacePropertyWithDefaultImplementation",
              "shortDescription": {
                "text": "Field hides property with default implementation in interface"
              },
              "fullDescription": {
                "text": "Property with the same name and default implementation exists in an implemented interface"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ForCanBeConvertedToForeach",
              "shortDescription": {
                "text": "For-loop can be converted into foreach-loop"
              },
              "fullDescription": {
                "text": "For-loop can be converted into foreach-loop"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ForCanBeConvertedToForeach.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ForCanBeConvertedToForeach.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ForStatementConditionIsTrue",
              "shortDescription": {
                "text": "'true' is redundant as 'for'-statement condition"
              },
              "fullDescription": {
                "text": "'true' is redundant as 'for'-statement condition, and it can be safely omitted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator",
              "shortDescription": {
                "text": "Foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used"
              },
              "fullDescription": {
                "text": "A 'foreach' ('For Each' for VB.NET) can be converted into a LINQ-expression but another 'GetEnumerator' method will be used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumerator",
              "shortDescription": {
                "text": "Part of foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used"
              },
              "fullDescription": {
                "text": "Part of 'foreach' ('For Each' for VB.NET) statement's body can be converted into a LINQ-expression but another 'GetEnumerator' method will be used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "FormatSpecifierCapturesRightBraces",
              "shortDescription": {
                "text": "Do not use right brace after a format specifier in format strings"
              },
              "fullDescription": {
                "text": "In .NET Framework, a format specifier captures closing braces '}' greedily, even when they are escaped using double braces '}}'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/FormatSpecifierCapturesRightBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/FormatSpecifierCapturesRightBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "FormatStringPlaceholdersMismatch",
              "shortDescription": {
                "text": "Format string placeholders mismatch"
              },
              "fullDescription": {
                "text": "Format string placeholders do not match between cultures"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RESX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "FormatStringProblem",
              "shortDescription": {
                "text": "String formatting method problems"
              },
              "fullDescription": {
                "text": "Format string syntax errors (unescaped braces, invalid indices/alignments, unused arguments etc.) and other formatting method invocation problems"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/FormatStringProblem.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/FormatStringProblem.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "FunctionComplexityOverflow",
              "shortDescription": {
                "text": "Function body is too complex to analyze"
              },
              "fullDescription": {
                "text": "Function body is too complex to analyze, consider decomposing it or reducing number of variables"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "FunctionNeverReturns",
              "shortDescription": {
                "text": "Function never returns"
              },
              "fullDescription": {
                "text": "Function does not reach its end or a 'return' statement by any of possible execution paths"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/FunctionNeverReturns.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/FunctionNeverReturns.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "FunctionRecursiveOnAllPaths",
              "shortDescription": {
                "text": "Function is recursive on all execution paths"
              },
              "fullDescription": {
                "text": "Function or type initialization is recursive on all execution paths"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "GCSuppressFinalizeForTypeWithoutDestructor",
              "shortDescription": {
                "text": "'GC.SuppressFinalize' is invoked for type without destructor"
              },
              "fullDescription": {
                "text": "'GC.SuppressFinalize' is invoked for type without destructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/GCSuppressFinalizeForTypeWithoutDestructor.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/GCSuppressFinalizeForTypeWithoutDestructor.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "GenericEnumeratorNotDisposed",
              "shortDescription": {
                "text": "Return value of 'GetEnumerator' method call is never disposed"
              },
              "fullDescription": {
                "text": "To avoid resource leaks, when calling 'GetEnumerator' method manually, dispose of the resulting enumerator after usage. This maintains a similar behaviour to the 'foreach' loop which automatically handles disposal. Disposal is not required if the enumerator is a struct or a sealed class, and it doesn't implement the Dispose pattern or interface."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "HeuristicUnreachableCode",
              "shortDescription": {
                "text": "Heuristically unreachable code"
              },
              "fullDescription": {
                "text": "Heuristically unreachable code detected"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/HeuristicUnreachableCode.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/HeuristicUnreachableCode.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.AttributeNotResolved",
              "shortDescription": {
                "text": "Unknown attribute"
              },
              "fullDescription": {
                "text": "Unknown attribute in HTML and related technologies"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.AttributeValueNotResolved",
              "shortDescription": {
                "text": "Unknown attribute value"
              },
              "fullDescription": {
                "text": "Unknown attribute value in HTML and related technologies"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.AttributesQuotes",
              "shortDescription": {
                "text": "Wrong attribute quotes"
              },
              "fullDescription": {
                "text": "Attribute quotes are missing or differ from settings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.DeadCode",
              "shortDescription": {
                "text": "HTML Dead Code"
              },
              "fullDescription": {
                "text": "HTML Dead Code"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.EventNotResolved",
              "shortDescription": {
                "text": "Unknown event"
              },
              "fullDescription": {
                "text": "Unknown event in HTML and related technologies"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.IdDuplication",
              "shortDescription": {
                "text": "Ids duplication"
              },
              "fullDescription": {
                "text": "Duplication of id on page"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.IdNotResolved",
              "shortDescription": {
                "text": "Unknown ID"
              },
              "fullDescription": {
                "text": "Link to unknown anchor (no element with such ID or name)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.Obsolete",
              "shortDescription": {
                "text": "Obsolete or nonstandard element"
              },
              "fullDescription": {
                "text": "Obsolete or nonstandard element"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.PathError",
              "shortDescription": {
                "text": "Path error"
              },
              "fullDescription": {
                "text": "Path error"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.TagNotClosed",
              "shortDescription": {
                "text": "Unclosed tag"
              },
              "fullDescription": {
                "text": "Unclosed tag in HTML and related technologies"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.TagNotResolved",
              "shortDescription": {
                "text": "Unknown tag"
              },
              "fullDescription": {
                "text": "Unknown tag in HTML and related technologies"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.TagShouldBeSelfClosed",
              "shortDescription": {
                "text": "Wrong closed tag"
              },
              "fullDescription": {
                "text": "Wrong closed tag in HTML and related technologies"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.TagShouldNotBeSelfClosed",
              "shortDescription": {
                "text": "Wrong self-closed tag"
              },
              "fullDescription": {
                "text": "Wrong self-closed tag in HTML and related technologies"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Html.Warning",
              "shortDescription": {
                "text": "HTML Warning"
              },
              "fullDescription": {
                "text": "HTML Warning"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IfStdIsConstantEvaluatedCanBeReplaced",
              "shortDescription": {
                "text": "'if' can be replaced by 'if consteval'"
              },
              "fullDescription": {
                "text": "'if' can be replaced by 'if consteval'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InParameterWithMustDisposeResourceAttribute",
              "shortDescription": {
                "text": "Meaningless [MustDisposeResource] annotation for an input parameter"
              },
              "fullDescription": {
                "text": "Meaningless [MustDisposeResource] annotation for an input parameter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InactivePreprocessorBranch",
              "shortDescription": {
                "text": "Inactive preprocessor branch"
              },
              "fullDescription": {
                "text": "Inactive preprocessor branch"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InconsistentNaming",
              "shortDescription": {
                "text": "Inconsistent Naming"
              },
              "fullDescription": {
                "text": "Name doesn't match naming style defined for this kind of symbol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/InconsistentNaming.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/InconsistentNaming.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "XAML.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InconsistentOrderOfLocks",
              "shortDescription": {
                "text": "Inconsistent order of taken locks"
              },
              "fullDescription": {
                "text": "The expression is used in several lock statements with inconsistent execution order, forming a cycle. This might lead to a possible deadlock in a multi-threaded execution."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/InconsistentOrderOfLocks.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/InconsistentOrderOfLocks.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InconsistentlySynchronizedField",
              "shortDescription": {
                "text": "Inconsistent synchronization on field"
              },
              "fullDescription": {
                "text": "The field is sometimes used inside synchronized block and sometimes used without synchronization"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/InconsistentlySynchronizedField.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/InconsistentlySynchronizedField.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IncorrectBlankLinesNearBraces",
              "shortDescription": {
                "text": "Incorrect blank lines: Incorrect number of blank lines near braces"
              },
              "fullDescription": {
                "text": "Incorrect blank lines: Incorrect number of blank lines near braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/IncorrectBlankLinesNearBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/IncorrectBlankLinesNearBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IndexingByInvalidRange",
              "shortDescription": {
                "text": "Possible 'System.ArgumentOutOfRangeException'. Start index must be less than or equal to end index."
              },
              "fullDescription": {
                "text": "Indexing by invalid range may cause exceptions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InheritdocConsiderUsage",
              "shortDescription": {
                "text": "Use <inheritdoc /> on root level to inherit documentation from base candidate"
              },
              "fullDescription": {
                "text": "Use <inheritdoc /> on root level to inherit documentation from base candidate"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InheritdocInvalidUsage",
              "shortDescription": {
                "text": "Usage of <inheritdoc /> is invalid"
              },
              "fullDescription": {
                "text": "Usage of <inheritdoc /> is invalid"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InlineOutVariableDeclaration",
              "shortDescription": {
                "text": "Inline 'out' variable declaration"
              },
              "fullDescription": {
                "text": "Replace ordinary variable declaration with inline variable declaration under 'out' argument"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/InlineOutVariableDeclaration.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/InlineOutVariableDeclaration.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InlineTemporaryVariable",
              "shortDescription": {
                "text": "Inline temporary variable"
              },
              "fullDescription": {
                "text": "Inline temporary variable initialized with a value of other variable/parameter to reduce the amount of different names used to reference the same value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/InlineTemporaryVariable.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/InlineTemporaryVariable.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IntDivisionByZero",
              "shortDescription": {
                "text": "Division by zero in at least one execution path"
              },
              "fullDescription": {
                "text": "Division by zero in at least one execution path"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IntVariableOverflow",
              "shortDescription": {
                "text": "Possible overflow"
              },
              "fullDescription": {
                "text": "Possible overflow"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IntVariableOverflowInCheckedContext",
              "shortDescription": {
                "text": "Possible overflow in checked context"
              },
              "fullDescription": {
                "text": "Possible overflow in checked context"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IntVariableOverflowInUncheckedContext",
              "shortDescription": {
                "text": "Possible overflow in unchecked context"
              },
              "fullDescription": {
                "text": "Possible overflow in unchecked context"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InternalOrPrivateMemberNotDocumented",
              "shortDescription": {
                "text": "Missing XML comment for private or internal type or member"
              },
              "fullDescription": {
                "text": "Missing XML comment for private or internal type or member"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InterpolatedStringExpressionIsNotIFormattable",
              "shortDescription": {
                "text": "Formatting is specified, but interpolated string expression is not IFormattable"
              },
              "fullDescription": {
                "text": "Formatting is specified, but interpolated string expression is not IFormattable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IntroduceOptionalParameters.Global",
              "shortDescription": {
                "text": "Introduce optional parameters: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Introduce optional parameters to overload method"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/IntroduceOptionalParameters.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/IntroduceOptionalParameters.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IntroduceOptionalParameters.Local",
              "shortDescription": {
                "text": "Introduce optional parameters: Private accessibility"
              },
              "fullDescription": {
                "text": "Introduce optional parameters to overload method"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/IntroduceOptionalParameters.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/IntroduceOptionalParameters.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InvalidValueType",
              "shortDescription": {
                "text": "Resource value type is invalid"
              },
              "fullDescription": {
                "text": "Resource in base culture has another value type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RESX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InvalidXmlDocComment",
              "shortDescription": {
                "text": "Invalid XML documentation comment"
              },
              "fullDescription": {
                "text": "Invalid XML documentation comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/InvalidXmlDocComment.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/InvalidXmlDocComment.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InvertCondition.1",
              "shortDescription": {
                "text": "Invert condition: Invert condition"
              },
              "fullDescription": {
                "text": "!$seq$.Any($args$) ? $expr$ : $expr2$"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InvertIf",
              "shortDescription": {
                "text": "Invert 'if' statement to reduce nesting"
              },
              "fullDescription": {
                "text": "Invert 'if' statement to reduce nesting"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/InvertIf.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/InvertIf.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InvocationIsSkipped",
              "shortDescription": {
                "text": "Method invocation is skipped"
              },
              "fullDescription": {
                "text": "Method invocation is skipped. Compiler will not generate method invocation because the method is conditional, or it is a partial method without implementation."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/InvocationIsSkipped.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/InvocationIsSkipped.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InvokeAsExtensionMethod",
              "shortDescription": {
                "text": "Convert static method invocation into extension method call"
              },
              "fullDescription": {
                "text": "When extension method is invoked as static method, convert invocation into extension method syntax"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IsExpressionAlwaysFalse",
              "shortDescription": {
                "text": "The expression of 'is' operator is never of the provided type"
              },
              "fullDescription": {
                "text": "The expression of 'is' operator is never of the provided type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IsExpressionAlwaysTrue",
              "shortDescription": {
                "text": "The given expression of 'is' operator is always of the provided type"
              },
              "fullDescription": {
                "text": "The expression of 'is' operator is always of the provided type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/IsExpressionAlwaysTrue.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/IsExpressionAlwaysTrue.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IteratorMethodResultIsIgnored",
              "shortDescription": {
                "text": "Return value of iterator is not used"
              },
              "fullDescription": {
                "text": "Return value of iterator is not used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "IteratorNeverReturns",
              "shortDescription": {
                "text": "Iterator never returns"
              },
              "fullDescription": {
                "text": "Iterator function does not reach its end or a 'return' statement by any of possible execution paths"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JoinDeclarationAndInitializer",
              "shortDescription": {
                "text": "Join local variable declaration and assignment"
              },
              "fullDescription": {
                "text": "Join local variable declaration and assignment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/JoinDeclarationAndInitializer.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/JoinDeclarationAndInitializer.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JoinNullCheckWithUsage",
              "shortDescription": {
                "text": "Join null check with assignment"
              },
              "fullDescription": {
                "text": "Replaces if statement with code using ?? operator and throw expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/JoinNullCheckWithUsage.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/JoinNullCheckWithUsage.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LambdaExpressionCanBeMadeStatic",
              "shortDescription": {
                "text": "Lambda expression/anonymous method can be made 'static'"
              },
              "fullDescription": {
                "text": "Lambda expression/anonymous method can be made 'static'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LambdaExpressionMustBeStatic",
              "shortDescription": {
                "text": "Lambda expression/anonymous method must be 'static' to avoid allocations"
              },
              "fullDescription": {
                "text": "Lambda expression/anonymous method passed to parameter annotated by '[RequireStaticDelegate]' must be 'static' to help avoid introducing heap allocations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LambdaShouldNotCaptureContext",
              "shortDescription": {
                "text": "Lambda expression/anonymous method must not have captures of the containing context"
              },
              "fullDescription": {
                "text": "Lambda expression/anonymous method passed to parameter annotated by '[RequireStaticDelegate]' attribute must not have captures of the containing context (local variables, local functions, 'this' reference) to avoid heap allocations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/LambdaShouldNotCaptureContext.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/LambdaShouldNotCaptureContext.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LocalFunctionCanBeMadeStatic",
              "shortDescription": {
                "text": "Local function can be made static"
              },
              "fullDescription": {
                "text": "A local function does not use 'this' object or variables from the outer scope and can be made static"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/LocalFunctionCanBeMadeStatic.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/LocalFunctionCanBeMadeStatic.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LocalFunctionHidesMethod",
              "shortDescription": {
                "text": "Local function hides method"
              },
              "fullDescription": {
                "text": "Local function has the same name as a method and hides it"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LocalVariableHidesMember",
              "shortDescription": {
                "text": "Local variable hides member"
              },
              "fullDescription": {
                "text": "Local variable has the same name as a field/property and hides it"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/LocalVariableHidesMember.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/LocalVariableHidesMember.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LocalVariableHidesPrimaryConstructorParameter",
              "shortDescription": {
                "text": "Local variable hides primary constructor parameter"
              },
              "fullDescription": {
                "text": "Local variable has the same name as a primary constructor parameter and hides it"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/LocalVariableHidesPrimaryConstructorParameter.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/LocalVariableHidesPrimaryConstructorParameter.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LocalizableElement",
              "shortDescription": {
                "text": "Element is localizable"
              },
              "fullDescription": {
                "text": "You can move this element to a resource"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/LocalizableElement.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/LocalizableElement.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RESX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LongLiteralEndingLowerL",
              "shortDescription": {
                "text": "The 'l' suffix is easily confused with the digit '1'"
              },
              "fullDescription": {
                "text": "The 'l' suffix is easily confused with the digit '1', use 'L' for clarity"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LoopCanBeConvertedToQuery",
              "shortDescription": {
                "text": "Loop can be converted into LINQ-expression"
              },
              "fullDescription": {
                "text": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/LoopCanBeConvertedToQuery.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/LoopCanBeConvertedToQuery.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LoopCanBePartlyConvertedToQuery",
              "shortDescription": {
                "text": "Part of loop's body can be converted into LINQ-expression"
              },
              "fullDescription": {
                "text": "Part of 'foreach' ('For Each' for VB.NET) statement's body can be converted into a LINQ-expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LoopVariableIsNeverChangedInsideLoop",
              "shortDescription": {
                "text": "Loop control variable is never changed inside loop"
              },
              "fullDescription": {
                "text": "Loop control variable is never changed inside loop"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/LoopVariableIsNeverChangedInsideLoop.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/LoopVariableIsNeverChangedInsideLoop.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MathAbsMethodIsRedundant",
              "shortDescription": {
                "text": "Math.Abs() argument is always non-negative"
              },
              "fullDescription": {
                "text": "Math.Abs() method invocation can be removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MathClampMinGreaterThanMax",
              "shortDescription": {
                "text": "Inconsistent arguments passed to 'Math.Clamp()' method"
              },
              "fullDescription": {
                "text": "Argument 'min' is always greater than argument 'max'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MeaninglessDefaultParameterValue",
              "shortDescription": {
                "text": "'DefaultParameterValueAttribute' must be used in conjunction with 'OptionalAttribute'"
              },
              "fullDescription": {
                "text": "'DefaultParameterValueAttribute' must be used in conjunction with 'OptionalAttribute'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberCanBeFileLocal",
              "shortDescription": {
                "text": "Type can be made file-local"
              },
              "fullDescription": {
                "text": "Type can be made file-local"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberCanBeInternal",
              "shortDescription": {
                "text": "Member or type can be made internal (friend)"
              },
              "fullDescription": {
                "text": "Member or type can be made internal (friend)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "XAML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberCanBeMadeStatic.Global",
              "shortDescription": {
                "text": "Member can be made static (shared): Non-private accessibility"
              },
              "fullDescription": {
                "text": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MemberCanBeMadeStatic.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MemberCanBeMadeStatic.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberCanBeMadeStatic.Local",
              "shortDescription": {
                "text": "Member can be made static (shared): Private accessibility"
              },
              "fullDescription": {
                "text": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MemberCanBeMadeStatic.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MemberCanBeMadeStatic.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberCanBePrivate.Global",
              "shortDescription": {
                "text": "Member can be made private: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Member can be made private"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MemberCanBePrivate.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MemberCanBePrivate.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "XAML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberCanBePrivate.Local",
              "shortDescription": {
                "text": "Member can be made private: Private accessibility"
              },
              "fullDescription": {
                "text": "Member can be made private"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MemberCanBePrivate.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MemberCanBePrivate.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberCanBeProtected.Global",
              "shortDescription": {
                "text": "Member can be made protected: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Member can be made protected"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MemberCanBeProtected.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MemberCanBeProtected.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "XAML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberCanBeProtected.Local",
              "shortDescription": {
                "text": "Member can be made protected: Private accessibility"
              },
              "fullDescription": {
                "text": "Member can be made protected"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MemberCanBeProtected.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MemberCanBeProtected.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberHidesInterfaceMemberWithDefaultImplementation",
              "shortDescription": {
                "text": "Non-public member in implementation  class hides default implementation in interface"
              },
              "fullDescription": {
                "text": "Member with the same signature and default implementation exists in an implemented interface"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberHidesStaticFromOuterClass",
              "shortDescription": {
                "text": "Member hides static member from outer class"
              },
              "fullDescription": {
                "text": "Member hides static member from outer class"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MemberHidesStaticFromOuterClass.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MemberHidesStaticFromOuterClass.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemberInitializerValueIgnored",
              "shortDescription": {
                "text": "Member initialized value ignored"
              },
              "fullDescription": {
                "text": "Member initializer value is ignored because the member is always initialized in all constructors"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MemberInitializerValueIgnored.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MemberInitializerValueIgnored.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MergeAndPattern",
              "shortDescription": {
                "text": "Merge 'and' pattern"
              },
              "fullDescription": {
                "text": "Merge two operands of the 'and' pattern into single pattern"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MergeCastWithTypeCheck",
              "shortDescription": {
                "text": "Type check and casts can be merged"
              },
              "fullDescription": {
                "text": "Type check ('is' expression) and direct cast(s) after it can be merged"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MergeConditionalExpression",
              "shortDescription": {
                "text": "Merge conditional ?: expression into conditional access"
              },
              "fullDescription": {
                "text": "Merge conditional expression (?: ternary operator) into conditional access expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MergeConditionalExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MergeConditionalExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MergeIntoLogicalPattern",
              "shortDescription": {
                "text": "Merge null/pattern/value checks into 'or'/'and' patterns"
              },
              "fullDescription": {
                "text": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MergeIntoNegatedPattern",
              "shortDescription": {
                "text": "Merge negated null/pattern checks into complex pattern"
              },
              "fullDescription": {
                "text": "Merge sequential negated null/pattern checks into single recursive/logical pattern check"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MergeIntoPattern",
              "shortDescription": {
                "text": "Merge null/pattern checks into complex pattern"
              },
              "fullDescription": {
                "text": "Merge sequential null/pattern checks into single recursive/logical pattern check"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MergeIntoPattern.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MergeIntoPattern.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MergeNestedPropertyPatterns",
              "shortDescription": {
                "text": "Merge nested property patterns"
              },
              "fullDescription": {
                "text": "Simplify nested member access in a pattern by using the C# 10 extended property patterns syntax"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MergeNestedPropertyPatterns.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MergeNestedPropertyPatterns.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MergeSequentialChecks",
              "shortDescription": {
                "text": "Merge sequential checks into single conditional access check"
              },
              "fullDescription": {
                "text": "Merge sequential null/type checks in && or || expressions into single conditional access check"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MethodHasAsyncOverload",
              "shortDescription": {
                "text": "Method has async overload"
              },
              "fullDescription": {
                "text": "Method has async overload"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MethodHasAsyncOverloadWithCancellation",
              "shortDescription": {
                "text": "Method has async overload with cancellation support"
              },
              "fullDescription": {
                "text": "Method has async overload with 'CancellationToken'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MethodOverloadWithOptionalParameter",
              "shortDescription": {
                "text": "Method with optional or 'params' parameter is hidden by overload"
              },
              "fullDescription": {
                "text": "Method with optional or 'params' parameter is hidden by overload"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MethodSupportsCancellation",
              "shortDescription": {
                "text": "Method supports cancellation"
              },
              "fullDescription": {
                "text": "Method has overload with 'CancellationToken'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MisleadingBodyLikeStatement",
              "shortDescription": {
                "text": "Confusing body-like statement"
              },
              "fullDescription": {
                "text": "Previous statement's body can be overlooked and the next statement can be read as it's body. Improve the visibility by making the actual body more visible or separate the next statement with an empty line."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MisleadingBodyLikeStatement.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MisleadingBodyLikeStatement.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MissingAltAttributeInImgTag",
              "shortDescription": {
                "text": "Important tags or attributes missing: <img> should specify alternative text"
              },
              "fullDescription": {
                "text": "<([)img(]) $attrs$>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MissingBlankLines",
              "shortDescription": {
                "text": "Incorrect blank lines: Blank lines are missing elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect blank lines: Blank lines are missing elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MissingBlankLines.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MissingBlankLines.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MissingBodyTag",
              "shortDescription": {
                "text": "Important tags or attributes missing: Missing <body>"
              },
              "fullDescription": {
                "text": "<([)html(]) $attr1$><head $attr2$>$cont$</head></html>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MissingHeadAndBodyTags",
              "shortDescription": {
                "text": "Important tags or attributes missing: Missing <head> and <body>"
              },
              "fullDescription": {
                "text": "<([)html(]) $attr1$></html>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MissingHeadTag",
              "shortDescription": {
                "text": "Important tags or attributes missing: Missing <head>"
              },
              "fullDescription": {
                "text": "<([)html(]) $attr1$><body $attr2$>$cont$</body></html>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MissingIndent",
              "shortDescription": {
                "text": "Incorrect indent: Missing indent/outdent elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect indent: Missing indent/outdent elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MissingIndent.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MissingIndent.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MissingLinebreak",
              "shortDescription": {
                "text": "Incorrect line breaks: Line break is missing elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Line break is missing elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MissingLinebreak.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MissingLinebreak.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MissingSpace",
              "shortDescription": {
                "text": "Incorrect spacing: Space is missing elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Space is missing elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MissingSpace.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MissingSpace.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MoreSpecificForeachVariableTypeAvailable",
              "shortDescription": {
                "text": "Iteration variable can be declared with a more specific type"
              },
              "fullDescription": {
                "text": "Type of iteration variable declared in 'foreach' statement is less specific than that which can be inferred from the collection type being iterated"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MoreSpecificForeachVariableTypeAvailable.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MoreSpecificForeachVariableTypeAvailable.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MoveLocalFunctionAfterJumpStatement",
              "shortDescription": {
                "text": "Put local function after 'return' or 'continue'"
              },
              "fullDescription": {
                "text": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MoveToExistingPositionalDeconstructionPattern",
              "shortDescription": {
                "text": "Move to existing positional deconstruction pattern"
              },
              "fullDescription": {
                "text": "Replace property pattern member(s) of recursive pattern with positional deconstruction patterns in existing positional deconstruction"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MoveVariableDeclarationInsideLoopCondition",
              "shortDescription": {
                "text": "Move variable declaration inside loop condition"
              },
              "fullDescription": {
                "text": "Declare variable inside a loop condition using pattern matching syntax to reduce its scope and avoid doing a C-style assignment as a side effect"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MultipleNullableAttributesUsage",
              "shortDescription": {
                "text": "Multiple nullable attributes usage"
              },
              "fullDescription": {
                "text": "It is incorrect to use [NotNull] and [CanBeNull] simultaneously"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MultipleNullableAttributesUsage.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MultipleNullableAttributesUsage.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MultipleOrderBy",
              "shortDescription": {
                "text": "Multiple sequential 'OrderBy' invocation"
              },
              "fullDescription": {
                "text": "Multiple sequential 'OrderBy' invocation is meaningless, probably 'ThenBy' is implied"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MultipleResolveCandidatesInText",
              "shortDescription": {
                "text": "Ambiguous symbols in text argument"
              },
              "fullDescription": {
                "text": "Ambiguous symbols in text argument"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MultipleSpaces",
              "shortDescription": {
                "text": "Incorrect spacing: Multiple spaces are prohibited"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Multiple spaces are prohibited"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MultipleSpaces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MultipleSpaces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MultipleStatementsOnOneLine",
              "shortDescription": {
                "text": "Incorrect line breaks: Multiple statements on one line"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Multiple statements on one line"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MultipleStatementsOnOneLine.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MultipleStatementsOnOneLine.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MultipleTypeMembersOnOneLine",
              "shortDescription": {
                "text": "Incorrect line breaks: Multiple type members on one line"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Multiple type members on one line"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MultipleTypeMembersOnOneLine.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MultipleTypeMembersOnOneLine.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MustUseReturnValue",
              "shortDescription": {
                "text": "Return value of [MustUseReturnValue]-annotated method is not used"
              },
              "fullDescription": {
                "text": "Return value of method annotated with [{0}] attribute is not used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/MustUseReturnValue.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/MustUseReturnValue.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Mvc.ActionNotResolved",
              "shortDescription": {
                "text": "MVC: Unknown action"
              },
              "fullDescription": {
                "text": "Unknown ASP.NET MVC Action"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Mvc.AreaNotResolved",
              "shortDescription": {
                "text": "MVC: Unknown area"
              },
              "fullDescription": {
                "text": "Unknown ASP.NET MVC Area"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Mvc.ControllerNotResolved",
              "shortDescription": {
                "text": "MVC: Unknown controller"
              },
              "fullDescription": {
                "text": "Unknown ASP.NET MVC Controller"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Mvc.InvalidModelType",
              "shortDescription": {
                "text": "MVC: Mismatch Model Type"
              },
              "fullDescription": {
                "text": "Mismatch ASP.NET MVC Model Type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Mvc.MasterpageNotResolved",
              "shortDescription": {
                "text": "MVC: Unknown masterpage"
              },
              "fullDescription": {
                "text": "Unknown ASP.NET MVC Masterpage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Mvc.PartialViewNotResolved",
              "shortDescription": {
                "text": "MVC: Unknown partial view"
              },
              "fullDescription": {
                "text": "Unknown ASP.NET MVC Partial View"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Mvc.TemplateNotResolved",
              "shortDescription": {
                "text": "MVC: Unknown template"
              },
              "fullDescription": {
                "text": "Unknown ASP.NET MVC Template"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Mvc.ViewComponentNotResolved",
              "shortDescription": {
                "text": "MVC: Unknown view component"
              },
              "fullDescription": {
                "text": "Unknown ASP.NET MVC View Component"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Mvc.ViewComponentViewNotResolved",
              "shortDescription": {
                "text": "MVC: Unknown view component view"
              },
              "fullDescription": {
                "text": "Unknown ASP.NET MVC View Component View"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Mvc.ViewNotResolved",
              "shortDescription": {
                "text": "MVC: Unknown view"
              },
              "fullDescription": {
                "text": "Unknown ASP.NET MVC View"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/Mvc.ViewNotResolved.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/Mvc.ViewNotResolved.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NegationOfRelationalPattern",
              "shortDescription": {
                "text": "Simplify negated relational pattern"
              },
              "fullDescription": {
                "text": "Suggest to replace\r\n          `x is not > 42` to ` x is <= 42`"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NegativeEqualityExpression",
              "shortDescription": {
                "text": "Simplify negative equality expression"
              },
              "fullDescription": {
                "text": "Suggest to replace\r\n          !(expr1 != expr2) to expr1 == expr2\r\n          !(expr1 == expr2) to expr1 != expr2"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NegativeEqualityExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NegativeEqualityExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NegativeIndex",
              "shortDescription": {
                "text": "Possible 'System.ArgumentOutOfRangeException'. Index must be a non-negative integer."
              },
              "fullDescription": {
                "text": "'System.Index' requires a non-negative argument"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NestedStringInterpolation",
              "shortDescription": {
                "text": "Nested string interpolation can be inlined"
              },
              "fullDescription": {
                "text": "Nested string interpolation can be inlined into containing one"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NonAtomicCompoundOperator",
              "shortDescription": {
                "text": "Suspicious 'volatile' field usage: compound operation is not atomic. 'Interlocked' class can be used instead."
              },
              "fullDescription": {
                "text": "Suspicious 'volatile' field usage: compound operation is not atomic. 'Interlocked' class can be used instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NonConstantEqualityExpressionHasConstantResult",
              "shortDescription": {
                "text": "According to values of the bit masks, expression result will always be the same"
              },
              "fullDescription": {
                "text": "According to values of the bit masks, expression result will always be the same"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NonParsableElement",
              "shortDescription": {
                "text": "Part of the code cannot be parsed"
              },
              "fullDescription": {
                "text": "Part of the code cannot be parsed because of deep nesting"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NonReadonlyMemberInGetHashCode",
              "shortDescription": {
                "text": "Non-readonly type member referenced in 'GetHashCode()'"
              },
              "fullDescription": {
                "text": "Non-readonly field or auto-property referenced in 'GetHashCode()'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NonReadonlyMemberInGetHashCode.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NonReadonlyMemberInGetHashCode.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NonVolatileFieldInDoubleCheckLocking",
              "shortDescription": {
                "text": "Possible incorrect implementation of Double-Check Locking. The checked field must be volatile or assigned from a local variable after 'Thread.MemoryBarrier()' call."
              },
              "fullDescription": {
                "text": "Possible incorrect implementation of Double-Check Locking. The checked field must be volatile or assigned from a local variable after 'Thread.MemoryBarrier()' call."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              }
            },
            {
              "id": "NotAccessedField.Compiler",
              "shortDescription": {
                "text": "Non-accessed field"
              },
              "fullDescription": {
                "text": "Field is assigned but its value is never used (compiler warning)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0414",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0414"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotAccessedField.Global",
              "shortDescription": {
                "text": "Non-accessed field: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Field is assigned but its value is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotAccessedField.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotAccessedField.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "ASXX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotAccessedField.Local",
              "shortDescription": {
                "text": "Non-accessed field: Private accessibility"
              },
              "fullDescription": {
                "text": "Field is assigned but its value is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotAccessedField.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotAccessedField.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotAccessedOutParameterVariable",
              "shortDescription": {
                "text": "Non-accessed local variable is only used to discard the 'out' parameter value"
              },
              "fullDescription": {
                "text": "Non-accessed local variable is only used to discard the 'out' parameter value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotAccessedOutParameterVariable.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotAccessedOutParameterVariable.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotAccessedPositionalProperty.Global",
              "shortDescription": {
                "text": "Non-accessed positional property: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Positional property is never accessed for reading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotAccessedPositionalProperty.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotAccessedPositionalProperty.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotAccessedPositionalProperty.Local",
              "shortDescription": {
                "text": "Non-accessed positional property: Private accessibility"
              },
              "fullDescription": {
                "text": "Positional property is never accessed for reading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotAccessedPositionalProperty.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotAccessedPositionalProperty.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotAccessedPrimaryConstructorParameterCompiler",
              "shortDescription": {
                "text": "Not accessed primary constructor parameter"
              },
              "fullDescription": {
                "text": "Parameter of the primary constructor is declared but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotAccessedVariable",
              "shortDescription": {
                "text": "Non-accessed local variable"
              },
              "fullDescription": {
                "text": "Local variable is assigned but its value is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotAccessedVariable.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotAccessedVariable.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotAccessedVariable.Compiler",
              "shortDescription": {
                "text": "Non-accessed local variable"
              },
              "fullDescription": {
                "text": "Local variable is assigned but its value is never used (compiler warning)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0219",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0219"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotAssignedOutParameter",
              "shortDescription": {
                "text": "'out' parameter is not assigned upon exit"
              },
              "fullDescription": {
                "text": "'out' parameter is not assigned upon exit"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotDeclaredInParentCulture",
              "shortDescription": {
                "text": "Resource is not declared in base culture"
              },
              "fullDescription": {
                "text": "Resource is not declared in base culture"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotDeclaredInParentCulture.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotDeclaredInParentCulture.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RESX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotDisposedResource",
              "shortDescription": {
                "text": "Return value of a method annotated with [MustDisposeResource] is never disposed"
              },
              "fullDescription": {
                "text": "Return value of a method annotated with [MustDisposeResource] is never disposed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotDisposedResource.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotDisposedResource.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotDisposedResourceIsReturned",
              "shortDescription": {
                "text": "Return value should be disposed but the method or function is not annotated with [MustDisposeResource]"
              },
              "fullDescription": {
                "text": "Return value should be disposed but the method or function is not annotated with [MustDisposeResource]"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotDisposedResourceIsReturned.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotDisposedResourceIsReturned.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotDisposedResourceIsReturnedByProperty",
              "shortDescription": {
                "text": "Return value of a property must be disposed by the callee"
              },
              "fullDescription": {
                "text": "Return value of a property must be disposed by the callee"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotDisposedResourceIsReturnedByProperty.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotDisposedResourceIsReturnedByProperty.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotNullOrRequiredMemberIsNotInitialized",
              "shortDescription": {
                "text": "Non-nullable or required member is not initialized at constructor exit"
              },
              "fullDescription": {
                "text": "Non-nullable or required type member is not initialized in any execution path of the constructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotNullOrRequiredMemberIsNotInitialized.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotNullOrRequiredMemberIsNotInitialized.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotObservableAnnotationRedundancy",
              "shortDescription": {
                "text": "Nullability attribute used with declaration that cannot be directly referenced from other code"
              },
              "fullDescription": {
                "text": "Redundant nullability attribute used with declaration that cannot be directly referenced from other code"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotOverriddenInSpecificCulture",
              "shortDescription": {
                "text": "Resource is not overridden in specific culture"
              },
              "fullDescription": {
                "text": "Resource is not overridden in one or more specific cultures"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotOverriddenInSpecificCulture.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotOverriddenInSpecificCulture.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RESX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotResolvedInText",
              "shortDescription": {
                "text": "Cannot resolve symbol in text argument"
              },
              "fullDescription": {
                "text": "Cannot resolve symbol in text argument"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/NotResolvedInText.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/NotResolvedInText.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContract",
              "shortDescription": {
                "text": "'??' condition is never null according to nullable reference types' annotations"
              },
              "fullDescription": {
                "text": "'??' condition is never null according to nullable reference types' annotations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NullableWarningSuppressionIsUsed",
              "shortDescription": {
                "text": "A suppressed nullable warning might hide an underlying problem"
              },
              "fullDescription": {
                "text": "A suppressed nullable warning might hide an underlying problem such as a nullable value that was thought to be already handled. This might be a result of a refactoring introducing nullable values on execution paths where they were not allowed."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NullnessAnnotationConflictWithJetBrainsAnnotations",
              "shortDescription": {
                "text": "Nullability conflicts with annotations in hierarchy"
              },
              "fullDescription": {
                "text": "Nullability of a member conflicts with attribute annotations in its hierarchy. When using a base member, an unexpected value might be passed or returned, e.g. a null value might be passed to a non-nullable parameter because a parameter of a base member allows it, or the return value might not be checked for null because a base member indicates that it should never return null."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ObjectCreationAsStatement",
              "shortDescription": {
                "text": "Possible unassigned object created by 'new' expression"
              },
              "fullDescription": {
                "text": "Object created by 'new' expression is possibly not assigned anywhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ObsoleteElement",
              "shortDescription": {
                "text": "Use of obsolete type or type member"
              },
              "fullDescription": {
                "text": "Use of obsolete type or type member in XAML markup"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ObsoleteElementError",
              "shortDescription": {
                "text": "Use of obsolete type or type member (error)"
              },
              "fullDescription": {
                "text": "Use of obsolete type or type member in XAML markup (error)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OneWayOperationContractWithReturnType",
              "shortDescription": {
                "text": "One way operations must not return values"
              },
              "fullDescription": {
                "text": "Methods marked with OperationContract attribute as OneWay operations must not return values"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/OneWayOperationContractWithReturnType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/OneWayOperationContractWithReturnType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OperationContractWithoutServiceContract",
              "shortDescription": {
                "text": "Method is marked as OperationContract but containing type is not marked as ServiceContract"
              },
              "fullDescription": {
                "text": "Marking method as OperationContract without ServiceContract attribute on the containing type could cause runtime exception"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OperatorIsCanBeUsed",
              "shortDescription": {
                "text": "Operator 'is'/'Type Of ... Is ...' can be used"
              },
              "fullDescription": {
                "text": "Operator 'is'/'Type Of ... Is ...' can be used instead of comparing objects GetType() and instance of System.Type object"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OperatorWithoutMatchedCheckedOperator",
              "shortDescription": {
                "text": "Operator without matching checked operator"
              },
              "fullDescription": {
                "text": "The operator does not have a matching checked operator while there are checked versions for other operators in this type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OptionalParameterHierarchyMismatch",
              "shortDescription": {
                "text": "Mismatch of optional parameter value in overridden method"
              },
              "fullDescription": {
                "text": "Mismatch of optional parameter value in overridden method"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OptionalParameterRefOut",
              "shortDescription": {
                "text": "'ref' or 'out' parameter with [Optional] attribute"
              },
              "fullDescription": {
                "text": "C# does not support 'ref' or 'out' optional parameters"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OtherTagsInsideScript1",
              "shortDescription": {
                "text": "Script tag errors: Other tags inside <script> - possibly unclosed <script>"
              },
              "fullDescription": {
                "text": "<([)script(]) $a1$>$c1$</script>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OtherTagsInsideScript2",
              "shortDescription": {
                "text": "Script tag errors: Other tags inside <script> - possibly unclosed <script>"
              },
              "fullDescription": {
                "text": "<([)script(]) type=\"$v1$\" $a1$>$c1$</script>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OtherTagsInsideUnclosedScript",
              "shortDescription": {
                "text": "Script tag errors: Unclosed <script> with other tags inside"
              },
              "fullDescription": {
                "text": "<([)script(]) $a1$>$c1$"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OutParameterValueIsAlwaysDiscarded.Global",
              "shortDescription": {
                "text": "Parameter output value is always discarded: Non-private accessibility"
              },
              "fullDescription": {
                "text": "The resulting value of output parameter is always discarded"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/OutParameterValueIsAlwaysDiscarded.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/OutParameterValueIsAlwaysDiscarded.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OutParameterValueIsAlwaysDiscarded.Local",
              "shortDescription": {
                "text": "Parameter output value is always discarded: Private accessibility"
              },
              "fullDescription": {
                "text": "The resulting value of output parameter is always discarded"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/OutParameterValueIsAlwaysDiscarded.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/OutParameterValueIsAlwaysDiscarded.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OutParameterWithHandlesResourceDisposalAttribute",
              "shortDescription": {
                "text": "Meaningless [HandlesResourceDisposal] annotation for an output parameter"
              },
              "fullDescription": {
                "text": "Meaningless [HandlesResourceDisposal] annotation for an output parameter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OutdentIsOffPrevLevel",
              "shortDescription": {
                "text": "Incorrect indent: Indent level is not restored"
              },
              "fullDescription": {
                "text": "Incorrect indent: Indent level is not restored"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/OutdentIsOffPrevLevel.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/OutdentIsOffPrevLevel.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OverriddenWithEmptyValue",
              "shortDescription": {
                "text": "Resource overrides base resource with empty value"
              },
              "fullDescription": {
                "text": "Base resource contains a non-empty value while this resource is empty"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/OverriddenWithEmptyValue.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/OverriddenWithEmptyValue.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RESX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OverriddenWithSameValue",
              "shortDescription": {
                "text": "Resource is overridden with identical value"
              },
              "fullDescription": {
                "text": "Base resource item and the current item have the same value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/OverriddenWithSameValue.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/OverriddenWithSameValue.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RESX.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ParameterHidesMember",
              "shortDescription": {
                "text": "Parameter hides member"
              },
              "fullDescription": {
                "text": "Method parameter has the same name as a field/property and hides it"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ParameterHidesMember.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ParameterHidesMember.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ParameterHidesPrimaryConstructorParameter",
              "shortDescription": {
                "text": "Parameter hides primary constructor parameter"
              },
              "fullDescription": {
                "text": "Method parameter has the same name as a primary constructor parameter and hides it"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ParameterHidesPrimaryConstructorParameter.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ParameterHidesPrimaryConstructorParameter.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ParameterOnlyUsedForPreconditionCheck.Global",
              "shortDescription": {
                "text": "Parameter is only used for precondition check: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Parameter is only used for precondition check"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ParameterOnlyUsedForPreconditionCheck.Local",
              "shortDescription": {
                "text": "Parameter is only used for precondition check: Private accessibility"
              },
              "fullDescription": {
                "text": "Parameter is only used for precondition check"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ParameterTypeCanBeEnumerable.Global",
              "shortDescription": {
                "text": "Parameter type can be IEnumerable<T>: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Parameter can be declared with IEnumerable<T> type but it is declared with more specific type (e.g. List<T>)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ParameterTypeCanBeEnumerable.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ParameterTypeCanBeEnumerable.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ParameterTypeCanBeEnumerable.Local",
              "shortDescription": {
                "text": "Parameter type can be IEnumerable<T>: Private accessibility"
              },
              "fullDescription": {
                "text": "Parameter can be declared with IEnumerable<T> type but it is declared with more specific type (e.g. List<T>)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ParameterTypeCanBeEnumerable.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ParameterTypeCanBeEnumerable.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PartialMethodParameterNameMismatch",
              "shortDescription": {
                "text": "Parameter name differs between partial member declarations"
              },
              "fullDescription": {
                "text": "Parameter name differs between partial member declarations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PartialMethodParameterNameMismatch.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PartialMethodParameterNameMismatch.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PartialMethodWithSinglePart",
              "shortDescription": {
                "text": "Redundant 'partial' modifier on method declaration"
              },
              "fullDescription": {
                "text": "Method is declared as 'partial' but has only single part"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PartialMethodWithSinglePart.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PartialMethodWithSinglePart.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PartialTypeWithSinglePart",
              "shortDescription": {
                "text": "Redundant 'partial' modifier on type declaration"
              },
              "fullDescription": {
                "text": "Class is declared as 'partial', but has only one part"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PartialTypeWithSinglePart.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PartialTypeWithSinglePart.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PassStringInterpolation",
              "shortDescription": {
                "text": "Pass string interpolation expression"
              },
              "fullDescription": {
                "text": "Replace formatting method arguments by passing string interpolation expression."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PassStringInterpolation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PassStringInterpolation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PatternAlwaysMatches",
              "shortDescription": {
                "text": "The source expression always matches the provided pattern"
              },
              "fullDescription": {
                "text": "The source expression of 'is' operator or 'switch' statement always matches the provided pattern"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PatternAlwaysMatches.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PatternAlwaysMatches.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PatternIsAlwaysTrueOrFalse",
              "shortDescription": {
                "text": "Pattern is always 'true' or always 'false'"
              },
              "fullDescription": {
                "text": "Pattern check result is always the same"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PatternIsRedundant",
              "shortDescription": {
                "text": "The pattern is redundant, it does not produce any runtime checks"
              },
              "fullDescription": {
                "text": "The pattern is redundant because it does not produce any actual checks at runtime. This usually indicates an error in the pattern matching condition."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PatternIsRedundant.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PatternIsRedundant.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PatternNeverMatches",
              "shortDescription": {
                "text": "The source expression never matches the provided pattern"
              },
              "fullDescription": {
                "text": "The source expression of 'is' operator or 'switch' statement never matches the provided pattern"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PlaceAssignmentExpressionIntoBlock",
              "shortDescription": {
                "text": "Place assignment expression into block"
              },
              "fullDescription": {
                "text": "Place assignment expression into block to indicate the side-effect"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PolymorphicFieldLikeEventInvocation",
              "shortDescription": {
                "text": "Invocation of polymorphic field-like event"
              },
              "fullDescription": {
                "text": "Invocation of 'virtual' or 'override' field-like event leads to unpredictable result because the invocation list is not virtual"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PolymorphicFieldLikeEventInvocation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PolymorphicFieldLikeEventInvocation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleInfiniteInheritance",
              "shortDescription": {
                "text": "Possible infinite inheritance"
              },
              "fullDescription": {
                "text": "According to ECMA-335 part II (Metadata) paragraph 9.2: 'Generics and recursive inheritance graphs'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossibleInfiniteInheritance.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossibleInfiniteInheritance.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleIntendedRethrow",
              "shortDescription": {
                "text": "Exception rethrow possibly intended"
              },
              "fullDescription": {
                "text": "A 'throw' statement inside a catch clause which throws the exception caught. In most of cases a 'throw' statement with no argument is to be used."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleInterfaceMemberAmbiguity",
              "shortDescription": {
                "text": "Possible ambiguity while accessing member by interface"
              },
              "fullDescription": {
                "text": "Possible ambiguity while accessing member by interface"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleInvalidCastException",
              "shortDescription": {
                "text": "Possible 'System.InvalidCastException'"
              },
              "fullDescription": {
                "text": "Possible cast expression of incompatible type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleInvalidCastExceptionInForeachLoop",
              "shortDescription": {
                "text": "Possible 'System.InvalidCastException' in foreach loop"
              },
              "fullDescription": {
                "text": "Possible cast expression of incompatible type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossibleInvalidCastExceptionInForeachLoop.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossibleInvalidCastExceptionInForeachLoop.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleInvalidOperationException",
              "shortDescription": {
                "text": "Possible 'System.InvalidOperationException'"
              },
              "fullDescription": {
                "text": "Possible call to method is invalid for the object's current state"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossibleInvalidOperationException.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossibleInvalidOperationException.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleInvalidOperationExceptionCollectionWasModified",
              "shortDescription": {
                "text": "Possible 'System.InvalidOperationException: Collection was modified'"
              },
              "fullDescription": {
                "text": "Modifying the collection could result in a 'System.InvalidOperationException: Collection was modified' in the next foreach iteration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleLossOfFraction",
              "shortDescription": {
                "text": "Possible loss of fraction"
              },
              "fullDescription": {
                "text": "Possible loss of fraction when dividing integral values and assigning the result to float or decimal"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleMistakenCallToGetType",
              "shortDescription": {
                "text": "Possible mistaken 'GetType()' invocation"
              },
              "fullDescription": {
                "text": "Possible mistaken 'GetType()' invocation on 'System.Type' instance"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossibleMistakenCallToGetType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossibleMistakenCallToGetType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleMistakenSystemTypeArgument",
              "shortDescription": {
                "text": "Possible mistaken argument of type 'System.Type'"
              },
              "fullDescription": {
                "text": "Possibly mistaken argument of type 'System.Type' is used where an object for type checking is expected"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossibleMistakenSystemTypeArgument.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossibleMistakenSystemTypeArgument.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleMultipleEnumeration",
              "shortDescription": {
                "text": "Possible multiple enumeration"
              },
              "fullDescription": {
                "text": "Possible multiple enumeration of IEnumerable or IAsyncEnumerable<T>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossibleMultipleEnumeration.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossibleMultipleEnumeration.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleMultipleWriteAccessInDoubleCheckLocking",
              "shortDescription": {
                "text": "Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field."
              },
              "fullDescription": {
                "text": "Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossibleMultipleWriteAccessInDoubleCheckLocking.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossibleMultipleWriteAccessInDoubleCheckLocking.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleNullReferenceException",
              "shortDescription": {
                "text": "Possible 'System.NullReferenceException'"
              },
              "fullDescription": {
                "text": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossibleNullReferenceException.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossibleNullReferenceException.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleStructMemberModificationOfNonVariableStruct",
              "shortDescription": {
                "text": "Value assigned to a property of non-variable qualifier expression can be lost"
              },
              "fullDescription": {
                "text": "Value assigned to a property of non-variable qualifier expression can be lost if struct type will be substituted as generic type argument"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleUnintendedLinearSearchInSet",
              "shortDescription": {
                "text": "Possibly unintended linear search in set"
              },
              "fullDescription": {
                "text": "Usage of 'Enumerable.Contains' extension method will perform a linear search.\r\n          Consider providing equality comparer to the set's constructor and using its own '.Contains' method."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleUnintendedQueryableAsEnumerable",
              "shortDescription": {
                "text": "IQueryable is possibly unintentionally used as IEnumerable"
              },
              "fullDescription": {
                "text": "IQueryable is possibly unintentionally used as IEnumerable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossibleUnintendedQueryableAsEnumerable.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossibleUnintendedQueryableAsEnumerable.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleUnintendedReferenceComparison",
              "shortDescription": {
                "text": "Possible unintended reference comparison"
              },
              "fullDescription": {
                "text": "Possible unintended reference comparison"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossibleUnintendedReferenceComparison.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossibleUnintendedReferenceComparison.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossibleWriteToMe",
              "shortDescription": {
                "text": "Possible write to 'Me'"
              },
              "fullDescription": {
                "text": "Possible write to 'Me'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossiblyImpureMethodCallOnReadonlyVariable",
              "shortDescription": {
                "text": "Possibly impure struct method is called on readonly variable: struct value always copied before invocation"
              },
              "fullDescription": {
                "text": "Possibly impure struct instance method or 'this ref' extension method is called on readonly field/in parameter/ref readonly return: struct value always copied before invocation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossiblyImpureMethodCallOnReadonlyVariable.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossiblyImpureMethodCallOnReadonlyVariable.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossiblyMissingIndexerInitializerComma",
              "shortDescription": {
                "text": "Possibly missing comma before indexer initializer"
              },
              "fullDescription": {
                "text": "Assignment expression inside member initializer value looks suspicious. Comma is probably missing."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossiblyMistakenUseOfCancellationToken",
              "shortDescription": {
                "text": "Possibly mistaken use of a 'CancellationToken'"
              },
              "fullDescription": {
                "text": "'CancellationToken' from outer scope is used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossiblyMistakenUseOfCancellationToken.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossiblyMistakenUseOfCancellationToken.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossiblyMistakenUseOfInterpolatedStringInsert",
              "shortDescription": {
                "text": "Possibly unintended string interpolation instead of format string template"
              },
              "fullDescription": {
                "text": "Interpolated string that could be a valid format string detected. Possibly intended to be a format string template literal."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossiblyMistakenUseOfInterpolatedStringInsert.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossiblyMistakenUseOfInterpolatedStringInsert.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossiblyUnintendedSideEffectsInsideConditionalInvocation",
              "shortDescription": {
                "text": "Possibly unintended modification inside conditional invocation"
              },
              "fullDescription": {
                "text": "Externally visible modification will be skipped when conditional invocation is not performed in certain build configurations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PossiblyUnintendedSideEffectsInsideConditionalInvocation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PossiblyUnintendedSideEffectsInsideConditionalInvocation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PossiblyUnintendedUsageParameterlessGetExpressionType",
              "shortDescription": {
                "text": "Possible unintended usage of parameterless GetExpressionType()"
              },
              "fullDescription": {
                "text": "Possible unintended usage of parameterless GetExpressionType() when an instance of IResolveContext is available in the context"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PreferConcreteValueOverDefault",
              "shortDescription": {
                "text": "Prefer using concrete value over 'default' or 'new()'"
              },
              "fullDescription": {
                "text": "Prefer using concrete value (such as 'false' or '0') over generic expression like 'default' or 'new()'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PreferConcreteValueOverDefault.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PreferConcreteValueOverDefault.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PreferExplicitlyProvidedTupleComponentName",
              "shortDescription": {
                "text": "Prefer explicitly provided tuple component name"
              },
              "fullDescription": {
                "text": "Prefer to use tuple components by their explicit names and not by positional-based implicit ones like ItemN"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PreferExplicitlyProvidedTupleComponentName.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PreferExplicitlyProvidedTupleComponentName.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PrimaryConstructorParameterCaptureDisallowed",
              "shortDescription": {
                "text": "Primary constructor parameter capturing is disallowed"
              },
              "fullDescription": {
                "text": "Capturing of a primary constructor parameter by an instance member results in an implicit type layout. Use this inspection if you want to disallow primary parameter capturing."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PrimaryConstructorParameterCaptureDisallowed.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PrimaryConstructorParameterCaptureDisallowed.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PrivateFieldCanBeConvertedToLocalVariable",
              "shortDescription": {
                "text": "Private field can be converted into local variable"
              },
              "fullDescription": {
                "text": "Private field is always assigned before being used and can be converted into a local variable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PrivateFieldCanBeConvertedToLocalVariable.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PrivateFieldCanBeConvertedToLocalVariable.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PropertyCanBeMadeInitOnly.Global",
              "shortDescription": {
                "text": "Property can be made init-only: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Property setter can be replaced with 'init' accessor to enforce property immutability"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PropertyCanBeMadeInitOnly.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PropertyCanBeMadeInitOnly.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PropertyCanBeMadeInitOnly.Local",
              "shortDescription": {
                "text": "Property can be made init-only: Private accessibility"
              },
              "fullDescription": {
                "text": "Property setter can be replaced with 'init' accessor to enforce property immutability"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PropertyCanBeMadeInitOnly.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PropertyCanBeMadeInitOnly.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PropertyFieldKeywordIsNeverAssigned",
              "shortDescription": {
                "text": "Backing field is used but never assigned"
              },
              "fullDescription": {
                "text": "Backing field of property with 'field' keyword is used but never assigned"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PropertyFieldKeywordIsNeverUsed",
              "shortDescription": {
                "text": "Backing field is assigned but never used"
              },
              "fullDescription": {
                "text": "Backing field of property with 'field' keyword is assigned but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PropertyNotResolved",
              "shortDescription": {
                "text": "Cannot resolve property"
              },
              "fullDescription": {
                "text": "Cannot resolve property"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PublicConstructorInAbstractClass",
              "shortDescription": {
                "text": "Make constructor in abstract class protected"
              },
              "fullDescription": {
                "text": "Make constructor in abstract class protected"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/PublicConstructorInAbstractClass.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/PublicConstructorInAbstractClass.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PureAttributeOnVoidMethod",
              "shortDescription": {
                "text": "'void' method is annotated with the [Pure] attribute"
              },
              "fullDescription": {
                "text": "It is meaningless to annotate a 'void' method with the [Pure] attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RawStringCanBeSimplified",
              "shortDescription": {
                "text": "Raw string can be simplified"
              },
              "fullDescription": {
                "text": "String presentation has redundant quotes or dollar signs"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Razor.AssemblyNotResolved",
              "shortDescription": {
                "text": "Unknown Razor assembly"
              },
              "fullDescription": {
                "text": "Unknown Razor assembly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Razor.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Razor.LayoutNotResolved",
              "shortDescription": {
                "text": "Unknown Razor layout"
              },
              "fullDescription": {
                "text": "Unknown Razor layout"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Razor.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Razor.SectionNotResolved",
              "shortDescription": {
                "text": "Unknown Razor section"
              },
              "fullDescription": {
                "text": "Unknown Razor section"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Razor.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Razor.UnresolvedComponent",
              "shortDescription": {
                "text": "Unknown HTML tag, may be a component"
              },
              "fullDescription": {
                "text": "Unknown HTML tag, may be a component"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Razor.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RazorNullConditionalOperatorHighlighting",
              "shortDescription": {
                "text": "Null-Conditional operator is not supported in this version of Razor"
              },
              "fullDescription": {
                "text": "Unknown HTML tag, may be a component"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Razor.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReadAccessInDoubleCheckLocking",
              "shortDescription": {
                "text": "Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field."
              },
              "fullDescription": {
                "text": "Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ReadAccessInDoubleCheckLocking.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ReadAccessInDoubleCheckLocking.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantAbstractModifier",
              "shortDescription": {
                "text": "Redundant 'abstract' modifier"
              },
              "fullDescription": {
                "text": "Redundant 'abstract' modifier in interface declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantAbstractModifier.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantAbstractModifier.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantAccessorBody",
              "shortDescription": {
                "text": "Redundant accessor body"
              },
              "fullDescription": {
                "text": "Accessor body with simple 'field' keyword return or assignment is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantAlwaysMatchSubpattern",
              "shortDescription": {
                "text": "Subpattern that always matches is redundant"
              },
              "fullDescription": {
                "text": "Subpattern containing discard pattern or empty object pattern can be removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantAnonymousTypePropertyName",
              "shortDescription": {
                "text": "Redundant anonymous type property explicit name"
              },
              "fullDescription": {
                "text": "Explicit name specification of anonymous type property is redundant. It is inferred from the initializer expression."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantAnonymousTypePropertyName.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantAnonymousTypePropertyName.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantArgumentDefaultValue",
              "shortDescription": {
                "text": "Redundant argument with default value"
              },
              "fullDescription": {
                "text": "Corresponding parameter is optional and has the same value, so the argument could be omitted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantArgumentDefaultValue.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantArgumentDefaultValue.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantArrayCreationExpression",
              "shortDescription": {
                "text": "Array creation can be replaced with array initializer"
              },
              "fullDescription": {
                "text": "When initializing explicitly typed local variable or field of array type, array creation expression can be replaced with array initializer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantArrayLowerBoundSpecification",
              "shortDescription": {
                "text": "Redundant array lower bound specification"
              },
              "fullDescription": {
                "text": "Array lower bound specification is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantAssignment",
              "shortDescription": {
                "text": "Assignment is not used"
              },
              "fullDescription": {
                "text": "Value assigned to a local variable or parameter is not used in any execution path"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantAssignment.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantAssignment.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantAttributeParentheses",
              "shortDescription": {
                "text": "Parentheses are redundant if attribute has no arguments"
              },
              "fullDescription": {
                "text": "Parentheses are redundant if attribute has no arguments"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantAttributeParentheses.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantAttributeParentheses.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantAttributeSuffix",
              "shortDescription": {
                "text": "Redundant 'Attribute' suffix"
              },
              "fullDescription": {
                "text": "Redundant 'Attribute' suffix can be omitted when referencing attribute type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantAttributeSuffix.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantAttributeSuffix.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantAttributeUsageProperty",
              "shortDescription": {
                "text": "Redundant [AttributeUsage] attribute property assignment"
              },
              "fullDescription": {
                "text": "Application of [AttributeUsage] attribute has property assignment to its default value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantBaseConstructorCall",
              "shortDescription": {
                "text": "Redundant base constructor call"
              },
              "fullDescription": {
                "text": "Explicit call to the base class constructor with no arguments. It is generated by the compiler by default and can be omitted."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantBaseQualifier",
              "shortDescription": {
                "text": "Redundant 'base.' qualifier"
              },
              "fullDescription": {
                "text": "'base.' qualifier is redundant and can be safely removed without changing code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantBlankLines",
              "shortDescription": {
                "text": "Incorrect blank lines: Blank lines are redundant elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect blank lines: Blank lines are redundant elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantBlankLines.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantBlankLines.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantBoolCompare",
              "shortDescription": {
                "text": "Redundant boolean comparison"
              },
              "fullDescription": {
                "text": "Comparison of a boolean value with 'true' or 'false' constant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantCallerArgumentExpressionDefaultValue",
              "shortDescription": {
                "text": "Redundant argument passed to caller argument expression parameter"
              },
              "fullDescription": {
                "text": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantCallerArgumentExpressionDefaultValue.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantCallerArgumentExpressionDefaultValue.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantCaseLabel",
              "shortDescription": {
                "text": "Redundant 'case' label"
              },
              "fullDescription": {
                "text": "'case' label statement is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantCaseLabel.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantCaseLabel.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantCast",
              "shortDescription": {
                "text": "Redundant cast"
              },
              "fullDescription": {
                "text": "Type cast can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantCast.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantCast.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantCatchClause",
              "shortDescription": {
                "text": "Redundant catch clause"
              },
              "fullDescription": {
                "text": "Catch clause with single 'throw' statement is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantCatchClause.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantCatchClause.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantCheckBeforeAssignment",
              "shortDescription": {
                "text": "Redundant condition check before assignments"
              },
              "fullDescription": {
                "text": "Check for inequality before assignment is redundant\r\n<pre>\r\n  if (x != value)\r\n    x = value;\r\n</pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantCollectionCopyCall",
              "shortDescription": {
                "text": "Redundant collection copy"
              },
              "fullDescription": {
                "text": "Calling 'ToArray', 'ToList', 'ToDictionary' or 'ToHashSet' on a collection that is already of the target type is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantCollectionCopyCall.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantCollectionCopyCall.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantCollectionInitializerElementBraces",
              "shortDescription": {
                "text": "Redundant braces in collection initializer"
              },
              "fullDescription": {
                "text": "When collection initializer element has only one expression, the braces are redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantConfigureAwait",
              "shortDescription": {
                "text": "Redundant context capturing with 'ConfigureAwait'"
              },
              "fullDescription": {
                "text": "Redundant 'ConfigureAwait(true)' or 'ConfigureAwait(ConfigureAwaitOptions.ContinueOnCapturedContext)' can be removed. This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default.\r\n        Set 'ConfigureAwait analysis mode' project level property to 'UI' to analyze 'await' expressions and statements for redundant 'ConfigureAwait' calls."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantConfigureAwait.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantConfigureAwait.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantDeclarationSemicolon",
              "shortDescription": {
                "text": "Redundant semicolon after type or namespace declaration"
              },
              "fullDescription": {
                "text": "Semicolon after class/struct/enum/interface/namespace declarations is redundant in C#"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantDefaultMemberInitializer",
              "shortDescription": {
                "text": "Redundant member initializer"
              },
              "fullDescription": {
                "text": "Initializing field/property/event with default value is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantDefaultMemberInitializer.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantDefaultMemberInitializer.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantDelegateCreation",
              "shortDescription": {
                "text": "Explicit delegate creation expression is redundant"
              },
              "fullDescription": {
                "text": "Explicit delegate creation expression is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantDelegateCreation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantDelegateCreation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantDictionaryContainsKeyBeforeAdding",
              "shortDescription": {
                "text": "'ContainsKey' call is redundant before adding the item to the dictionary"
              },
              "fullDescription": {
                "text": "'ContainsKey' call is redundant before adding the item to the dictionary."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantDisableWarningComment",
              "shortDescription": {
                "text": "Redundant disable code inspection comment"
              },
              "fullDescription": {
                "text": "There is no code inspection issue disabled by this comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantDiscardDesignation",
              "shortDescription": {
                "text": "Redundant discard designation"
              },
              "fullDescription": {
                "text": "Discard designation can be omitted in this context"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantEmptyCaseElse",
              "shortDescription": {
                "text": "Redundant empty 'Case Else' statement"
              },
              "fullDescription": {
                "text": "Redundant empty 'Case Else' statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantEmptyFinallyBlock",
              "shortDescription": {
                "text": "Redundant empty finally block"
              },
              "fullDescription": {
                "text": "Empty 'finally' block is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantEmptyObjectCreationArgumentList",
              "shortDescription": {
                "text": "Redundant empty argument list on object creation expression"
              },
              "fullDescription": {
                "text": "When object creation uses object or collection initializer, empty argument list is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantEmptyObjectCreationArgumentList.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantEmptyObjectCreationArgumentList.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantEmptyObjectOrCollectionInitializer",
              "shortDescription": {
                "text": "Redundant empty object or collection initializer"
              },
              "fullDescription": {
                "text": "Redundant empty object or collection initializer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantEmptySwitchSection",
              "shortDescription": {
                "text": "Redundant empty switch section"
              },
              "fullDescription": {
                "text": "Redundant default switch branch:\r\n<pre>\r\n  switch (foo)\r\n  {\r\n    case Bar:\r\n      DoSomething;\r\n      break;\r\n    default: // here\r\n      break;\r\n  }\r\n</pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantEmptySwitchSection.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantEmptySwitchSection.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantEnumCaseLabelForDefaultSection",
              "shortDescription": {
                "text": "Redundant 'case' label before default section"
              },
              "fullDescription": {
                "text": "'case' label statement with enum value in front of default section is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantEnumerableCastCall",
              "shortDescription": {
                "text": "Redundant 'IEnumerable.Cast<T>' or 'IEnumerable.OfType<T>' call"
              },
              "fullDescription": {
                "text": "Redundant 'IEnumerable.Cast<T>' or 'IEnumerable.OfType<T>' call"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantEnumerableCastCall.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantEnumerableCastCall.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantExplicitArrayCreation",
              "shortDescription": {
                "text": "Redundant explicit type in array creation"
              },
              "fullDescription": {
                "text": "When array type can be inferred from the initializer, you can use an implicitly-typed array"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantExplicitArrayCreation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantExplicitArrayCreation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantExplicitArraySize",
              "shortDescription": {
                "text": "Redundant explicit size specification in array creation"
              },
              "fullDescription": {
                "text": "When array initializer has the same number of elements as specified in size expression, explicit size specification is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantExplicitArraySize.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantExplicitArraySize.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantExplicitNullableCreation",
              "shortDescription": {
                "text": "Redundant explicit nullable type creation"
              },
              "fullDescription": {
                "text": "Value type is implicitly convertible to its nullable form, therefore explicit nullable type creation is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantExplicitParamsArrayCreation",
              "shortDescription": {
                "text": "Redundant explicit collection creation in argument of 'params' parameter"
              },
              "fullDescription": {
                "text": "Explicit collection creation in an argument passed to the 'params' parameter is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantExplicitParamsArrayCreation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantExplicitParamsArrayCreation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantExplicitPositionalPropertyDeclaration",
              "shortDescription": {
                "text": "Redundant explicit positional property declaration"
              },
              "fullDescription": {
                "text": "Redundant explicit positional property declaration in record type with primary constructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantExplicitTupleComponentName",
              "shortDescription": {
                "text": "Redundant explicit tuple component name"
              },
              "fullDescription": {
                "text": "Explicit name specification of value tuple component is redundant. It is inferred from the initializer expression."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantExtendsListEntry",
              "shortDescription": {
                "text": "Redundant class or interface specification in base types list"
              },
              "fullDescription": {
                "text": "Type is either mentioned in the base types list of other part or it is an interface and appears as other type's base and contains no explicit implementations"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantExtendsListEntry.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantExtendsListEntry.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantFixedPointerDeclaration",
              "shortDescription": {
                "text": "Redundant fixed pointer declaration"
              },
              "fullDescription": {
                "text": "Fixed pointer declaration is redundant because accessing elements of fixed size buffer does not require pinning"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantFixedPointerDeclaration.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantFixedPointerDeclaration.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantIfElseBlock",
              "shortDescription": {
                "text": "Redundant 'else' keyword"
              },
              "fullDescription": {
                "text": "Redundant 'else' keyword"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantIfElseBlock.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantIfElseBlock.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantIfStatementThenKeyword",
              "shortDescription": {
                "text": "Keyword 'Then' is redundant in multiline 'If' statement"
              },
              "fullDescription": {
                "text": "Keyword 'Then' is redundant in multiline 'If' statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantImmediateDelegateInvocation",
              "shortDescription": {
                "text": "Immediate delegate invocation"
              },
              "fullDescription": {
                "text": "Immediate delegate invocation is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantIsBeforeRelationalPattern",
              "shortDescription": {
                "text": "Redundant 'is'"
              },
              "fullDescription": {
                "text": "Suggest to replace\r\n          `x is > 42` to `x > 42`\r\n          (if x is of type int)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantIteratorKeyword",
              "shortDescription": {
                "text": "Iterator function without 'Yield' statements"
              },
              "fullDescription": {
                "text": "Iterator function without 'Yield' statements"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantJumpStatement",
              "shortDescription": {
                "text": "Redundant control flow jump statement"
              },
              "fullDescription": {
                "text": "Redundant control flow jump statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantJumpStatement.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantJumpStatement.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantLambdaParameterType",
              "shortDescription": {
                "text": "Redundant lambda expression parameter type specification"
              },
              "fullDescription": {
                "text": "Lambda expression explicit parameter type specification is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantLambdaParameterType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantLambdaParameterType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantLambdaSignatureParentheses",
              "shortDescription": {
                "text": "Redundant lambda signature parentheses"
              },
              "fullDescription": {
                "text": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantLambdaSignatureParentheses.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantLambdaSignatureParentheses.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantLinebreak",
              "shortDescription": {
                "text": "Incorrect line breaks: Line break is redundant elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect line breaks: Line break is redundant elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantLinebreak.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantLinebreak.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantLogicalConditionalExpressionOperand",
              "shortDescription": {
                "text": "Redundant operand in logical conditional expression"
              },
              "fullDescription": {
                "text": "Redundant operand in logical conditional expression, for example\r\n<pre>\r\n  expr || false\r\n  expr && true\r\n</pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantLogicalConditionalExpressionOperand.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantLogicalConditionalExpressionOperand.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantMeQualifier",
              "shortDescription": {
                "text": "Redundant 'Me.' qualifier"
              },
              "fullDescription": {
                "text": "'Me.' qualifier is redundant and can be safely removed without changing code semantics."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantMyBaseQualifier",
              "shortDescription": {
                "text": "Redundant 'MyBase.' qualifier"
              },
              "fullDescription": {
                "text": "'MyBase.' qualifier is redundant and can be safely removed without changing code semantics."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantMyClassQualifier",
              "shortDescription": {
                "text": "Redundant 'MyClass.' qualifier"
              },
              "fullDescription": {
                "text": "'MyClass.' qualifier is redundant and can be safely removed without changing code semantics."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantNameQualifier",
              "shortDescription": {
                "text": "Redundant name qualifier"
              },
              "fullDescription": {
                "text": "Redundant use of qualifier for a type name or static member usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantNameQualifier.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantNameQualifier.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantNotNullConstraint",
              "shortDescription": {
                "text": "Redundant 'notnull' constraint on type parameter constrained by non-nullable base type"
              },
              "fullDescription": {
                "text": "The 'notnull' constraint is redundant because type parameter is constrained by non-nullable base type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantNullableAnnotationOnReferenceTypeConstraint",
              "shortDescription": {
                "text": "Redundant nullable annotation on 'class?' constraint of type parameter constrained by non-nullable base type"
              },
              "fullDescription": {
                "text": "The nullable annotation on 'class?' constraint is redundant because type parameter is constrained by non-nullable base type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableBaseType",
              "shortDescription": {
                "text": "Redundant nullable annotation on base type constraint of type parameter constrained by another non-nullable base type"
              },
              "fullDescription": {
                "text": "The nullable annotation on base type constraint is redundant because type parameter is constrained by another non-nullable base type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableTypeKind",
              "shortDescription": {
                "text": "Redundant nullable annotation on base type constraint of type parameter having non-nullable type kind"
              },
              "fullDescription": {
                "text": "The nullable annotation on base type constraint is redundant because type parameter has 'class' or 'struct' or 'unmanaged' constraint"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantNullableDirective",
              "shortDescription": {
                "text": "Redundant nullable directive"
              },
              "fullDescription": {
                "text": "A nullable directive does not change a context and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantNullableDirective.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantNullableDirective.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantNullableFlowAttribute",
              "shortDescription": {
                "text": "Redundant nullable attribute"
              },
              "fullDescription": {
                "text": "Nullable attribute has no effect and can be safely removed. This can be caused by the target element already having the desired nullable annotation."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantNullableTypeMark",
              "shortDescription": {
                "text": "Type check for nullable type is equal to underlying type check"
              },
              "fullDescription": {
                "text": "Type check for nullable type in 'is' expression is equal to underlying type check"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantNullnessAttributeWithNullableReferenceTypes",
              "shortDescription": {
                "text": "[NotNull] or [CanBeNull] attribute is applied to a type that already has the same annotation from nullable reference types"
              },
              "fullDescription": {
                "text": "[NotNull] or [CanBeNull] attribute has no effect because the target type already has the same annotation from nullable reference types"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantOverflowCheckingContext",
              "shortDescription": {
                "text": "Redundant arithmetic overflow checking context"
              },
              "fullDescription": {
                "text": "Arithmetic overflow checking context contains no operators or conversions with overflow checks"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantOverload.Global",
              "shortDescription": {
                "text": "Redundant method overload: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Redundant method overload. Use another method with optional parameters."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantOverload.Local",
              "shortDescription": {
                "text": "Redundant method overload: Private accessibility"
              },
              "fullDescription": {
                "text": "Redundant method overload. Use another method with optional parameters."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantOverriddenMember",
              "shortDescription": {
                "text": "Redundant member override"
              },
              "fullDescription": {
                "text": "Override of a virtual member is redundant because it consists of only a call to the base member"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantOverriddenMember.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantOverriddenMember.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantParams",
              "shortDescription": {
                "text": "'params' modifier is always ignored on overrides"
              },
              "fullDescription": {
                "text": "'params' modifier is always ignored on overrides"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantParentheses",
              "shortDescription": {
                "text": "Remove redundant parentheses"
              },
              "fullDescription": {
                "text": "Parentheses can be safely removed from expressions without changing code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantPartialMethodEmptyImplementation",
              "shortDescription": {
                "text": "Empty implementation of 'partial void' method is redundant"
              },
              "fullDescription": {
                "text": "Empty implementation of 'partial void' method is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantPartialMethodEmptyImplementation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantPartialMethodEmptyImplementation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantPatternParentheses",
              "shortDescription": {
                "text": "Remove redundant pattern-matching parentheses"
              },
              "fullDescription": {
                "text": "Parentheses surrounding a pattern are redundant if they do not change precedence of `or`-/`and`-patterns"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantPropertyParentheses",
              "shortDescription": {
                "text": "Parameterless property parentheses are redundant"
              },
              "fullDescription": {
                "text": "Parameterless property parameter parentheses are redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantPropertyPatternClause",
              "shortDescription": {
                "text": "Redundant property pattern clause"
              },
              "fullDescription": {
                "text": "Empty property pattern clause can be omitted"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantQualifier",
              "shortDescription": {
                "text": "Redundant qualifier"
              },
              "fullDescription": {
                "text": "Qualifier is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantQueryOrderByAscendingKeyword",
              "shortDescription": {
                "text": "Redundant 'orderby' clause 'ascending' keyword"
              },
              "fullDescription": {
                "text": "LINQ query syntax 'orderby' clause sorting is 'ascending' by default"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantRangeBound",
              "shortDescription": {
                "text": "Redundant range bound"
              },
              "fullDescription": {
                "text": "Zero index can be omitted in range expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantReadonlyModifier",
              "shortDescription": {
                "text": "Redundant 'readonly' modifier"
              },
              "fullDescription": {
                "text": "Readonly 'redundant' member/accessor modifier in struct declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantRecordClassKeyword",
              "shortDescription": {
                "text": "Redundant 'class' keyword in record declaration"
              },
              "fullDescription": {
                "text": "Redundant 'class' keyword in record declaration: records are classes by default"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantScopedParameterModifier",
              "shortDescription": {
                "text": "Redundant 'scoped' parameter modifier"
              },
              "fullDescription": {
                "text": "'scoped' parameter modifier is redundant because the target parameter is already implicitly 'scoped' by the language rules"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantSetterValueParameterDeclaration",
              "shortDescription": {
                "text": "Explicit 'value' parameter declaration is redundant"
              },
              "fullDescription": {
                "text": "Explicit set accessor 'value' parameter declaration is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantSpace",
              "shortDescription": {
                "text": "Incorrect spacing: Space is redundant elsewhere"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Space is redundant elsewhere"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantSpace.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantSpace.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantSpreadElement",
              "shortDescription": {
                "text": "Redundant spread element"
              },
              "fullDescription": {
                "text": "Remove redundant spread element to use items of inner collection directly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantSpreadElement.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantSpreadElement.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantStringFormatCall",
              "shortDescription": {
                "text": "Redundant 'string.Format()' call"
              },
              "fullDescription": {
                "text": "Redundant 'string.Format()' call"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantStringFormatCall.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantStringFormatCall.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantStringInterpolation",
              "shortDescription": {
                "text": "Redundant string interpolation"
              },
              "fullDescription": {
                "text": "String interpolation expression without arguments is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantStringInterpolation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantStringInterpolation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantStringToCharArrayCall",
              "shortDescription": {
                "text": "Redundant 'string.ToCharArray()' call"
              },
              "fullDescription": {
                "text": "Redundant 'string.ToCharArray()' call"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantStringType",
              "shortDescription": {
                "text": "Redundant string type"
              },
              "fullDescription": {
                "text": "Explicitly specifying System.String as the type of a data entry is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantStringType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantStringType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RESX.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantSuppressNullableWarningExpression",
              "shortDescription": {
                "text": "Redundant nullable warning suppression expression"
              },
              "fullDescription": {
                "text": "Nullable warning suppression expression does not suppress any warnings and is applied to an already non-nullable operand"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantSuppressNullableWarningExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantSuppressNullableWarningExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantSwitchExpressionArms",
              "shortDescription": {
                "text": "Redundant switch expression arms"
              },
              "fullDescription": {
                "text": "Arms before and with content of the catch-all arm '_ =>' are redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantSwitchExpressionArms.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantSwitchExpressionArms.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantTernaryExpression",
              "shortDescription": {
                "text": "Redundant conditional ternary expression usage"
              },
              "fullDescription": {
                "text": "Redundant conditional ternary expression usage:\r\n<pre>\r\n  condition ? true : false\r\n</pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantToStringCall",
              "shortDescription": {
                "text": "Redundant 'object.ToString()' call"
              },
              "fullDescription": {
                "text": "Use of ToString() call in a context where it would be generated by the compiler automatically.\r\n          For example, in a concatenation with a string or as an argument of a string.Format() call."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantToStringCall.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantToStringCall.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantToStringCallForValueType",
              "shortDescription": {
                "text": "Redundant 'object.ToString()' call for value types"
              },
              "fullDescription": {
                "text": "Use of ToString() call in a context where it would be generated by the compiler automatically.\r\n          For example, in a concatenation with a string or as an argument of a string.Format() call."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantTypeArgumentsInsideNameof",
              "shortDescription": {
                "text": "Redundant type arguments inside 'nameof'"
              },
              "fullDescription": {
                "text": "Simplify code by removing redundant type arguments from 'nameof' because they don't affect the result"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantTypeArgumentsInsideNameof.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantTypeArgumentsInsideNameof.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantTypeArgumentsOfMethod",
              "shortDescription": {
                "text": "Redundant type arguments of method"
              },
              "fullDescription": {
                "text": "Specification of method type arguments is redundant because they are inferred from argument types"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantTypeArgumentsOfMethod.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantTypeArgumentsOfMethod.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantTypeCheckInPattern",
              "shortDescription": {
                "text": "Redundant type check in a pattern"
              },
              "fullDescription": {
                "text": "A pattern contains a redundant type check that matches any non-nullable values that are already handled in the pattern"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantTypeDeclarationBody",
              "shortDescription": {
                "text": "Redundant type declaration body"
              },
              "fullDescription": {
                "text": "Empty type declaration body can be replaced with semicolon"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantTypeDeclarationBody.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantTypeDeclarationBody.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantUnsafeContext",
              "shortDescription": {
                "text": "Unsafe context declaration is redundant"
              },
              "fullDescription": {
                "text": "Unsafe context declaration is redundant because it is declared in unsafe context, or it does not contain unsafe constructs"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantUsingDirective",
              "shortDescription": {
                "text": "Redundant using directive"
              },
              "fullDescription": {
                "text": "Using directive is not required by the code and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantUsingDirective.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantUsingDirective.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "ASPX.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantUsingDirective.Global",
              "shortDescription": {
                "text": "Redundant global using directive"
              },
              "fullDescription": {
                "text": "Global using directive is not required by the code and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantUsingDirective.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantUsingDirective.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantVerbatimPrefix",
              "shortDescription": {
                "text": "Redundant verbatim prefix"
              },
              "fullDescription": {
                "text": "'@' prefix can be safely removed from identifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantVerbatimStringPrefix",
              "shortDescription": {
                "text": "Redundant verbatim string prefix"
              },
              "fullDescription": {
                "text": "String can be converted into a regular string without any changes"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RedundantVerbatimStringPrefix.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RedundantVerbatimStringPrefix.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantVirtualModifier",
              "shortDescription": {
                "text": "Redundant 'virtual' modifier"
              },
              "fullDescription": {
                "text": "Redundant 'virtual' modifier in interface declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantWithCancellation",
              "shortDescription": {
                "text": "Redundant 'WithCancellation()' invocation"
              },
              "fullDescription": {
                "text": "A 'WithCancellation()' call is redundant because the specified cancellation token is already applied to the async stream"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RedundantWithExpression",
              "shortDescription": {
                "text": "Empty 'with' expression is redundant"
              },
              "fullDescription": {
                "text": "Empty 'with' expression applied to newly created object instance results in unnecessary clone creation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReferenceEqualsWithValueType",
              "shortDescription": {
                "text": "'Object.ReferenceEquals' is always false because it is called with value type"
              },
              "fullDescription": {
                "text": "'Object.ReferenceEquals' is always false because it is called with value type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RegExpInspections",
              "shortDescription": {
                "text": "Regular Expression Inspections"
              },
              "fullDescription": {
                "text": "Regular Expression language inspections"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "REGULAR_EXPRESSION.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RemoveConstructorInvocation",
              "shortDescription": {
                "text": "Remove constructor invocation: Remove constructor invocation"
              },
              "fullDescription": {
                "text": "new List<$T$>($seq$).ToArray()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RemoveRedundantBraces",
              "shortDescription": {
                "text": "Use preferred braces style: Remove redundant braces"
              },
              "fullDescription": {
                "text": "Braces can be safely removed without changing code semantics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RemoveRedundantBraces.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RemoveRedundantBraces.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RemoveRedundantOrStatement.False",
              "shortDescription": {
                "text": "Remove redundant statement: Remove redundant statement"
              },
              "fullDescription": {
                "text": "$bool1$ |= false;"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RemoveRedundantOrStatement.True",
              "shortDescription": {
                "text": "Remove redundant statement: Remove redundant statement"
              },
              "fullDescription": {
                "text": "$bool1$ &= true;"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RemoveToList.1",
              "shortDescription": {
                "text": "Remove ToList(): Remove ToList()"
              },
              "fullDescription": {
                "text": "$seq$.ToList().ToArray()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RemoveToList.2",
              "shortDescription": {
                "text": "Remove ToList(): Remove ToList()"
              },
              "fullDescription": {
                "text": "$seq$.ToList().Count($x$ => $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceAsyncWithTaskReturn",
              "shortDescription": {
                "text": "Replace 'async' code with 'Task'-return"
              },
              "fullDescription": {
                "text": "Replace 'async' method or anonymous function with ordinary non-'async' code that returns 'Task'/'ValueTask' value instead of awaiting it. This changes the exception handling semantics of the code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceAutoPropertyWithComputedProperty",
              "shortDescription": {
                "text": "Replace auto-property with computed property"
              },
              "fullDescription": {
                "text": "Replace auto-property with computed property to avoid storing trivial state in every type instance"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceConditionalExpressionWithNullCoalescing",
              "shortDescription": {
                "text": "Conditional expression can be rewritten as null-coalescing"
              },
              "fullDescription": {
                "text": "Conditonal expression with a null check ('expr is {} x') or a type pattern ('expr is T x') can be rewritten as a null-coalescing ('??') expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ReplaceConditionalExpressionWithNullCoalescing.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ReplaceConditionalExpressionWithNullCoalescing.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceObjectPatternWithVarPattern",
              "shortDescription": {
                "text": "Replace object pattern not performing any additional checks with 'var' pattern"
              },
              "fullDescription": {
                "text": "Replace '{ } x' object pattern not performing any additional checks with 'var x' pattern"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceSequenceEqualWithConstantPattern",
              "shortDescription": {
                "text": "Replace 'SequenceEqual' with constant pattern"
              },
              "fullDescription": {
                "text": "Replace 'SequenceEqual' invocation with constant pattern check"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ReplaceSequenceEqualWithConstantPattern.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ReplaceSequenceEqualWithConstantPattern.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceSliceWithRangeIndexer",
              "shortDescription": {
                "text": "Replace 'Slice' with range indexer"
              },
              "fullDescription": {
                "text": "Replace 'Slice' method call with range indexer access"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceSubstringWithRangeIndexer",
              "shortDescription": {
                "text": "Replace 'Substring' with range indexer"
              },
              "fullDescription": {
                "text": "Replace 'Substring' method call with range indexer access"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithFieldKeyword",
              "shortDescription": {
                "text": "Replace with 'field' keyword"
              },
              "fullDescription": {
                "text": "Replace explicit field declaration with a 'field' keyword usage in corresponding property declaration (anonymous field)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithFirstOrDefault.1",
              "shortDescription": {
                "text": "Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$seq$.Any($args$) ? $seq$.First($args$) : null"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithFirstOrDefault.2",
              "shortDescription": {
                "text": "Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$expr$ && $seq$.Any($args$) ? $seq$.First($args$) : null"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithFirstOrDefault.3",
              "shortDescription": {
                "text": "Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$seq$.Any($args$) ? $seq$.First($args$) : default($T$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithFirstOrDefault.4",
              "shortDescription": {
                "text": "Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$expr$ && $seq$.Any($args$) ? $seq$.First($args$) : default($T$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithLastOrDefault.1",
              "shortDescription": {
                "text": "Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$seq$.Any($args$) ? $seq$.Last($args$) : null"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithLastOrDefault.2",
              "shortDescription": {
                "text": "Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$expr$ && $seq$.Any($args$) ? $seq$.Last($args$) : null"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithLastOrDefault.3",
              "shortDescription": {
                "text": "Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$seq$.Any($args$) ? $seq$.Last($args$) : default($T$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithLastOrDefault.4",
              "shortDescription": {
                "text": "Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$expr$ && $seq$.Any($args$) ? $seq$.Last($args$) : default($T$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.1",
              "shortDescription": {
                "text": "Replace with OfType<T>(): Replace with OfType<T>()"
              },
              "fullDescription": {
                "text": "$seq$.SelectNotNull($x$ => $x$ as $T$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.2",
              "shortDescription": {
                "text": "Replace with OfType<T>(): Replace with OfType<T>()"
              },
              "fullDescription": {
                "text": "$seq$.Where($x$ => $x$ is $T$).Select($y$ => $y$ as $T$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.3",
              "shortDescription": {
                "text": "Replace with OfType<T>(): Replace with OfType<T>()"
              },
              "fullDescription": {
                "text": "$seq$.Where($x$ => $x$ is $T$).Select($y$ => ($T$)$y$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.Any.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().Any(): Replace with OfType<T>().Any()"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).Any($y$ => $y$ != null)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.Any.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().Any(): Replace with OfType<T>().Any(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).Any($y$ => $y$ != null && $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.Count.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().Count(): Replace with OfType<T>().Count()"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).Count($y$ => $y$ != null)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.Count.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().Count(): Replace with OfType<T>().Count(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).Count($y$ => $y$ != null && $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.First.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().First(): Replace with OfType<T>().First()"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).First($y$ => $y$ != null)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.First.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().First(): Replace with OfType<T>().First(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).First($y$ => $y$ != null && $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.FirstOrDefault.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().FirstOrDefault(): Replace with OfType<T>().FirstOrDefault()"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).FirstOrDefault($y$ => $y$ != null)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.FirstOrDefault.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().FirstOrDefault(): Replace with OfType<T>().FirstOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).FirstOrDefault($y$ => $y$ != null && $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.Last.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().Last(): Replace with OfType<T>().Last()"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).Last($y$ => $y$ != null)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.Last.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().Last(): Replace with OfType<T>().Last(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).Last($y$ => $y$ != null && $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.LastOrDefault.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().LastOrDefault(): Replace with OfType<T>().LastOrDefault()"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).LastOrDefault($y$ => $y$ != null)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.LastOrDefault.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().LastOrDefault(): Replace with OfType<T>().LastOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).LastOrDefault($y$ => $y$ != null && $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.LongCount",
              "shortDescription": {
                "text": "Replace with OfType<T>().LongCount(): Replace with OfType<T>().LongCount()"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).LongCount($y$ => $y$ != null)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.Single.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().Single(): Replace with OfType<T>().Single()"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).Single($y$ => $y$ != null)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.Single.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().Single(): Replace with OfType<T>().Single(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).Single($y$ => $y$ != null && $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.SingleOrDefault.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().SingleOrDefault(): Replace with OfType<T>().SingleOrDefault()"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).SingleOrDefault($y$ => $y$ != null)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.SingleOrDefault.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().SingleOrDefault(): Replace with OfType<T>().SingleOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).SingleOrDefault($y$ => $y$ != null && $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithOfType.Where",
              "shortDescription": {
                "text": "Replace with OfType<T>().Where(): Replace with OfType<T>().Where(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select($x$ => $x$ as $T$).Where($y$ => $y$ != null && $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithPrimaryConstructorParameter",
              "shortDescription": {
                "text": "Replace with primary constructor parameter"
              },
              "fullDescription": {
                "text": "Replace explicit field declaration with a corresponding primary constructor parameter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSimpleAssignment.False",
              "shortDescription": {
                "text": "Replace with simple assignment: Replace with simple assignment"
              },
              "fullDescription": {
                "text": "$bool1$ &= false"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSimpleAssignment.True",
              "shortDescription": {
                "text": "Replace with simple assignment: Replace with simple assignment"
              },
              "fullDescription": {
                "text": "$bool1$ |= true"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleAssignment.False",
              "shortDescription": {
                "text": "Replace with single assignment: Replace with single assignment"
              },
              "fullDescription": {
                "text": "$T$ $x$ = false; if($bool1$) $x$ = true;"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ReplaceWithSingleAssignment.False.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ReplaceWithSingleAssignment.False.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleAssignment.True",
              "shortDescription": {
                "text": "Replace with single assignment: Replace with single assignment"
              },
              "fullDescription": {
                "text": "$T$ $x$ = true; if($bool1$) $x$ = false;"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ReplaceWithSingleAssignment.True.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ReplaceWithSingleAssignment.True.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleCallToAny",
              "shortDescription": {
                "text": "Replace with single call to Any(..): Replace with single call to Any(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where($x$ => $expr$).Any()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleCallToCount",
              "shortDescription": {
                "text": "Replace with single call to Count(..): Replace with single call to Count(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where($x$ => $expr$).Count()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleCallToFirst",
              "shortDescription": {
                "text": "Replace with single call to First(..): Replace with single call to First(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where($x$ => $expr$).First()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleCallToFirstOrDefault",
              "shortDescription": {
                "text": "Replace with single call to FirstOrDefault(..): Replace with single call to FirstOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where($x$ => $expr$).FirstOrDefault()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleCallToLast",
              "shortDescription": {
                "text": "Replace with single call to Last(..): Replace with single call to Last(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where($x$ => $expr$).Last()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleCallToLastOrDefault",
              "shortDescription": {
                "text": "Replace with single call to LastOrDefault(..): Replace with single call to LastOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where($x$ => $expr$).LastOrDefault()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleCallToSingle",
              "shortDescription": {
                "text": "Replace with single call to Single(..): Replace with single call to Single(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where($x$ => $expr$).Single()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleCallToSingleOrDefault",
              "shortDescription": {
                "text": "Replace with single call to SingleOrDefault(..): Replace with single call to SingleOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where($x$ => $expr$).SingleOrDefault()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleOrDefault.1",
              "shortDescription": {
                "text": "Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$seq$.Any($args$) ? $seq$.Single($args$) : null"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleOrDefault.2",
              "shortDescription": {
                "text": "Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$expr$ && $seq$.Any($args$) ? $seq$.Single($args$) : null"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleOrDefault.3",
              "shortDescription": {
                "text": "Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$seq$.Any($args$) ? $seq$.Single($args$) : default($T$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithSingleOrDefault.4",
              "shortDescription": {
                "text": "Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)"
              },
              "fullDescription": {
                "text": "$expr$ && $seq$.Any($args$) ? $seq$.Single($args$) : default($T$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReplaceWithStringIsNullOrEmpty",
              "shortDescription": {
                "text": "Use 'String.IsNullOrEmpty'"
              },
              "fullDescription": {
                "text": "Replace direct comparison to null and empty string with 'String.IsNullOrEmpty' call"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ReplaceWithStringIsNullOrEmpty.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ReplaceWithStringIsNullOrEmpty.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RequiredBaseTypesConflict",
              "shortDescription": {
                "text": "Required base type conflicting another type"
              },
              "fullDescription": {
                "text": "Type required by some attribute (marked with BaseTypeRequired) conflicting type from another attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RequiredBaseTypesDirectConflict",
              "shortDescription": {
                "text": "Type specified in '[BaseTypeRequired]' attribute conflicts another type"
              },
              "fullDescription": {
                "text": "Type specified in '[BaseTypeRequired]' attribute conflicts with another type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RequiredBaseTypesIsNotInherited",
              "shortDescription": {
                "text": "Base type is required"
              },
              "fullDescription": {
                "text": "Concrete base type is required by '[BaseTypeRequired]' attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/RequiredBaseTypesIsNotInherited.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/RequiredBaseTypesIsNotInherited.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ResourceItemNotResolved",
              "shortDescription": {
                "text": "Cannot resolve resource item"
              },
              "fullDescription": {
                "text": "Cannot resolve resource item"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ResourceNotResolved",
              "shortDescription": {
                "text": "Cannot resolve resource"
              },
              "fullDescription": {
                "text": "Cannot resolve resource"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "ASPX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ResxNotResolved",
              "shortDescription": {
                "text": "Cannot resolve symbol"
              },
              "fullDescription": {
                "text": "Cannot resolve symbol."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ResxNotResolved.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ResxNotResolved.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RESX.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReturnOfTaskProducedByUsingVariable",
              "shortDescription": {
                "text": "Return of a task produced by 'using'-captured object"
              },
              "fullDescription": {
                "text": "Do not return a task produced by a 'using'-captured object, because this task may not be able to complete after that object is disposed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReturnOfUsingVariable",
              "shortDescription": {
                "text": "Return of a variable captured by 'using' statement"
              },
              "fullDescription": {
                "text": "Do not return a variable captured by 'using' statement because it will be disposed before returning"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReturnTypeCanBeEnumerable.Global",
              "shortDescription": {
                "text": "Return type can be IEnumerable<T>: Non-private accessibility"
              },
              "fullDescription": {
                "text": "All usages of a method (or read-only property/indexer) use returned value as IEnumerable<T>, but it is declared with more specific type (e.g. List<T>)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ReturnTypeCanBeEnumerable.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ReturnTypeCanBeEnumerable.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReturnTypeCanBeEnumerable.Local",
              "shortDescription": {
                "text": "Return type can be IEnumerable<T>: Private accessibility"
              },
              "fullDescription": {
                "text": "All usages of a method (or read-only property/indexer) use returned value as IEnumerable<T>, but it is declared with more specific type (e.g. List<T>)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ReturnTypeCanBeEnumerable.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ReturnTypeCanBeEnumerable.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReturnTypeCanBeNotNullable",
              "shortDescription": {
                "text": "Return type of a function can be made non-nullable"
              },
              "fullDescription": {
                "text": "Function's return type is declared as nullable but it never returns nullable values"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ReturnValueOfPureMethodIsNotUsed",
              "shortDescription": {
                "text": "Return value of pure method is not used"
              },
              "fullDescription": {
                "text": "Return value of pure method is not used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ReturnValueOfPureMethodIsNotUsed.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ReturnValueOfPureMethodIsNotUsed.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.ActionRoutePrefixCanBeExtractedToControllerRoute",
              "shortDescription": {
                "text": "Action's route prefix can be extracted to controller's route"
              },
              "fullDescription": {
                "text": "When all controller's actions' route templates have same prefixes, it's possible to extract their common prefix to controller's route template"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.AmbiguousMatchingConstraintConstructor",
              "shortDescription": {
                "text": "More than one parameter constraint's constructor matched"
              },
              "fullDescription": {
                "text": "More than one parameter constraint's constructor matched"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.ConstraintArgumentCannotBeConverted",
              "shortDescription": {
                "text": "Route parameter constraint argument cannot be converted to target type"
              },
              "fullDescription": {
                "text": "Route parameter constraint argument cannot be converted to target type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.ControllerRouteParameterIsNotPassedToMethods",
              "shortDescription": {
                "text": "Controller's route parameter can be passed to methods"
              },
              "fullDescription": {
                "text": "Controller's route parameter can be passed to methods"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.DuplicatedParameter",
              "shortDescription": {
                "text": "Parameter declared in route more than once"
              },
              "fullDescription": {
                "text": "Parameter declared in route more than once"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.MatchingConstraintConstructorNotResolved",
              "shortDescription": {
                "text": "Matching parameter constraint's constructor not found"
              },
              "fullDescription": {
                "text": "Matching parameter constraint's constructor not found"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.MethodMissingRouteParameters",
              "shortDescription": {
                "text": "Not all route parameters are passed to method"
              },
              "fullDescription": {
                "text": "Not all route parameters are passed to method"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.OptionalParameterCanBePrecededOnlyBySinglePeriod",
              "shortDescription": {
                "text": "Optional parameter can be preceded only by single period ('.') in the segment"
              },
              "fullDescription": {
                "text": "Optional parameter can be preceded only by single period ('.') in the segment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.OptionalParameterMustBeAtTheEndOfSegment",
              "shortDescription": {
                "text": "Optional parameter must be at the end of the segment"
              },
              "fullDescription": {
                "text": "Optional parameter must be at the end of the segment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.ParameterConstraintCanBeSpecified",
              "shortDescription": {
                "text": "Route parameter constraint can be added due to type of method argument"
              },
              "fullDescription": {
                "text": "Route parameter constraint can be added due to type of method argument"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.ParameterTypeAndConstraintsMismatch",
              "shortDescription": {
                "text": "Type of parameter doesn't satisfy constraints declared in route template"
              },
              "fullDescription": {
                "text": "Type of parameter doesn't satisfy constraints declared in route template"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.ParameterTypeCanBeMadeStricter",
              "shortDescription": {
                "text": "Parameter's type can be made stricter due to applied constraints"
              },
              "fullDescription": {
                "text": "Parameter's type can be made stricter due to applied constraints"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.RouteParameterConstraintNotResolved",
              "shortDescription": {
                "text": "Route parameter constraint not resolved"
              },
              "fullDescription": {
                "text": "Route parameter constraint not resolved"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.RouteParameterIsNotPassedToMethod",
              "shortDescription": {
                "text": "Route parameter can be passed to method"
              },
              "fullDescription": {
                "text": "Route parameter can be passed to method"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.RouteTokenNotResolved",
              "shortDescription": {
                "text": "Route token not resolved"
              },
              "fullDescription": {
                "text": "Route token not resolved"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.SymbolNotResolved",
              "shortDescription": {
                "text": "Symbol not resolved"
              },
              "fullDescription": {
                "text": "Symbol not resolved"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplates.SyntaxError",
              "shortDescription": {
                "text": "Syntax error"
              },
              "fullDescription": {
                "text": "Syntax error"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SafeCastIsUsedAsTypeCheck",
              "shortDescription": {
                "text": "Try cast and check for null can be replaced with a type check"
              },
              "fullDescription": {
                "text": "Try cast and check for null can be replaced with a type check"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ScriptTagHasBothSrcAndContentAttributes",
              "shortDescription": {
                "text": "Script tag errors: <script> with both src and content"
              },
              "fullDescription": {
                "text": "<([)script(]) src=\"...\" ...>$content$</script>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SealedMemberInSealedClass",
              "shortDescription": {
                "text": "Sealed member in sealed class"
              },
              "fullDescription": {
                "text": "'sealed' modifier for member in a sealed class is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SealedMemberInSealedClass.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SealedMemberInSealedClass.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SeparateControlTransferStatement",
              "shortDescription": {
                "text": "Separate control transfer statement with blank line"
              },
              "fullDescription": {
                "text": "Introduce vertical spacing to highlight control transfer statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SeparateControlTransferStatement.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SeparateControlTransferStatement.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SeparateLocalFunctionsWithJumpStatement",
              "shortDescription": {
                "text": "Add explicit 'return' or 'continue' before local functions"
              },
              "fullDescription": {
                "text": "Separate local functions at the end of a block with explicit 'return' or 'continue'. This will help readers understand where a method or a loop really ends without checking whether there is any executable code left after or between local functions."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SeparateLocalFunctionsWithJumpStatement.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SeparateLocalFunctionsWithJumpStatement.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ServiceContractWithoutOperations",
              "shortDescription": {
                "text": "Interfaces marked as ServiceContract should declare at least one OperationContract"
              },
              "fullDescription": {
                "text": "Interfaces marked as ServiceContract should declare at least one OperationContract"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ShiftExpressionRealShiftCountIsZero",
              "shortDescription": {
                "text": "Actual shift count equals zero"
              },
              "fullDescription": {
                "text": "Actual shift count equals zero. Left operand will remain unchanged."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ShiftExpressionResultEqualsZero",
              "shortDescription": {
                "text": "Constant shift expression with non-zero operands results in a zero value"
              },
              "fullDescription": {
                "text": "Constant shift expression with non-zero operands results in a zero value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ShiftExpressionRightOperandNotEqualRealCount",
              "shortDescription": {
                "text": "Suspicious shift count for this type of left operand"
              },
              "fullDescription": {
                "text": "Suspicious shift count for this type of left operand (different from actual shift count that will be used by compiler)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ShiftExpressionZeroLeftOperand",
              "shortDescription": {
                "text": "Shift expression with zero left operand equals zero"
              },
              "fullDescription": {
                "text": "Shift expression with zero left operand equals zero"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SimilarAnonymousTypeNearby",
              "shortDescription": {
                "text": "Similar anonymous type detected nearby"
              },
              "fullDescription": {
                "text": "Anonymous type that differs only in property order is detected nearby"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SimplifyConditionalOperator",
              "shortDescription": {
                "text": "Simplify conditional operator"
              },
              "fullDescription": {
                "text": "Conditional operator contains 'True' or 'False' in result branch, for example\r\n              <pre>\r\n                If(condition, True, elseBranch)\r\n                If(condition, thenBranch : True)\r\n              </pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SimplifyConditionalTernaryExpression",
              "shortDescription": {
                "text": "Simplify conditional ternary expression"
              },
              "fullDescription": {
                "text": "Ternary expression contains 'true' or 'false' in result branch, for example\r\n          <pre>\r\n            condition ? true : elseBranch\r\n            condition ? thenBranch : true\r\n          </pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SimplifyConditionalTernaryExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SimplifyConditionalTernaryExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SimplifyIIf",
              "shortDescription": {
                "text": "Simplify 'IIf'"
              },
              "fullDescription": {
                "text": "'IIf' contains 'True' or 'False' in result branch, for example\r\n              <pre>\r\n                IIf(condition, True, elseBranch)\r\n                IIf(condition, thenBranch : True)\r\n              </pre>"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SimplifyLinqExpressionUseAll",
              "shortDescription": {
                "text": "Simplify LINQ expression (use 'All')"
              },
              "fullDescription": {
                "text": "Simplify LINQ expression (use 'All' instead of 'Any')"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SimplifyLinqExpressionUseAny",
              "shortDescription": {
                "text": "Simplify LINQ expression (use 'Any')"
              },
              "fullDescription": {
                "text": "Simplify LINQ expression (use 'Any' instead of 'All')"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SimplifyStringInterpolation",
              "shortDescription": {
                "text": "Use format specifier in interpolated strings"
              },
              "fullDescription": {
                "text": "'.ToString()' call could be replaced with a format specifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SimplifyStringInterpolation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SimplifyStringInterpolation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SpecifyACultureInStringConversionExplicitly",
              "shortDescription": {
                "text": "Specify string culture explicitly"
              },
              "fullDescription": {
                "text": "Specify a culture in string conversion explicitly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SpecifyACultureInStringConversionExplicitly.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SpecifyACultureInStringConversionExplicitly.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SpecifyStringComparison",
              "shortDescription": {
                "text": "Specify string comparison explicitly"
              },
              "fullDescription": {
                "text": "Specify string comparison explicitly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SpecifyStringComparison.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SpecifyStringComparison.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SpinLockInReadonlyField",
              "shortDescription": {
                "text": "Do not store SpinLock in readonly field"
              },
              "fullDescription": {
                "text": "SpinLock should not be stored in readonly field because it is a struct and is copied when an instance method is called on it"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SpinLockInReadonlyField.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SpinLockInReadonlyField.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StackAllocInsideLoop",
              "shortDescription": {
                "text": "Using stackalloc inside loop"
              },
              "fullDescription": {
                "text": "Memory stack allocation inside a loop can cause a temporary memory leak because the allocated memory is freed only when the method returns"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StaticMemberInGenericType",
              "shortDescription": {
                "text": "Static field or auto-property in generic type"
              },
              "fullDescription": {
                "text": "Static field or auto-property in generic type may result in state duplication per each generic type instantiation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StaticMemberInGenericType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StaticMemberInGenericType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StaticMemberInitializerReferesToMemberBelow",
              "shortDescription": {
                "text": "Static member initializer refers to static member below or in other part"
              },
              "fullDescription": {
                "text": "Static field/auto-property/event initializer refers to a static field/auto-property/event below or in another part"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StaticProblemInText",
              "shortDescription": {
                "text": "Cannot access static symbol in text argument"
              },
              "fullDescription": {
                "text": "Cannot access static symbol in text argument"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StdIsConstantEvaluatedWillAlwaysEvaluateToConstant",
              "shortDescription": {
                "text": "'std::is_constant_evaluated' will always evaluate to constant"
              },
              "fullDescription": {
                "text": "'std::is_constant_evaluated' will always evaluate to constant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StreamReadReturnValueIgnored",
              "shortDescription": {
                "text": "Actual number of bytes read by 'Stream.Read()' is ignored"
              },
              "fullDescription": {
                "text": "Use 'Stream.ReadExactly()' instead of 'Read()' to ensure the number of bytes read from the stream is equal to the expected value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StreamReadReturnValueIgnored.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StreamReadReturnValueIgnored.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringCompareIsCultureSpecific.1",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, string) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.Compare($s1$, $s2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.1.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.1.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringCompareIsCultureSpecific.2",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific"
              },
              "fullDescription": {
                "text": "$string$.Compare($s1$, $s2$, false)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.2.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.2.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringCompareIsCultureSpecific.3",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific"
              },
              "fullDescription": {
                "text": "$string$.Compare($s1$, $s2$, true)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.3.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.3.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringCompareIsCultureSpecific.4",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, int, string, int) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.4.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.4.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringCompareIsCultureSpecific.5",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$, false)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.5.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.5.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringCompareIsCultureSpecific.6",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$, true)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.6.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringCompareIsCultureSpecific.6.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringCompareToIsCultureSpecific",
              "shortDescription": {
                "text": "String.CompareTo is culture-specific: String.CompareTo is culture-specific"
              },
              "fullDescription": {
                "text": "$s1$.CompareTo($s2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringCompareToIsCultureSpecific.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringCompareToIsCultureSpecific.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringEndsWithIsCultureSpecific",
              "shortDescription": {
                "text": "String.EndsWith is culture-specific: String.EndsWith(string) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.EndsWith($sarg$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringEndsWithIsCultureSpecific.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringEndsWithIsCultureSpecific.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringIndexOfIsCultureSpecific.1",
              "shortDescription": {
                "text": "String.IndexOf is culture-specific: String.IndexOf(string) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.IndexOf($sarg$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringIndexOfIsCultureSpecific.1.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringIndexOfIsCultureSpecific.1.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringIndexOfIsCultureSpecific.2",
              "shortDescription": {
                "text": "String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.IndexOf($sarg$, $iarg1$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringIndexOfIsCultureSpecific.2.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringIndexOfIsCultureSpecific.2.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringIndexOfIsCultureSpecific.3",
              "shortDescription": {
                "text": "String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.IndexOf($sarg$, $iarg1$, $iarg2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringIndexOfIsCultureSpecific.3.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringIndexOfIsCultureSpecific.3.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringLastIndexOfIsCultureSpecific.1",
              "shortDescription": {
                "text": "String.LastIndexOf is culture-specific: String.LastIndexOf(string) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.LastIndexOf($sarg$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringLastIndexOfIsCultureSpecific.1.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringLastIndexOfIsCultureSpecific.1.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringLastIndexOfIsCultureSpecific.2",
              "shortDescription": {
                "text": "String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.LastIndexOf($sarg$, $iarg1$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringLastIndexOfIsCultureSpecific.2.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringLastIndexOfIsCultureSpecific.2.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringLastIndexOfIsCultureSpecific.3",
              "shortDescription": {
                "text": "String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.LastIndexOf($sarg$, $iarg1$, $iarg2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringLastIndexOfIsCultureSpecific.3.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringLastIndexOfIsCultureSpecific.3.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringLiteralAsInterpolationArgument",
              "shortDescription": {
                "text": "String literal can be inlined"
              },
              "fullDescription": {
                "text": "String literal can be inlined into interpolation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringSpanComparison",
              "shortDescription": {
                "text": "Possibly wrong string comparison: spans are only equal when pointing to the same memory location"
              },
              "fullDescription": {
                "text": "Possibly wrong string comparison: spans are only equal when pointing to the same memory location. Spans from freshly created or static strings are unlikely to be equal to other spans, probably you want to compare chars/bytes instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringSpanComparison.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringSpanComparison.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StringStartsWithIsCultureSpecific",
              "shortDescription": {
                "text": "String.StartsWith is culture-specific: String.StartsWith(string) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.StartsWith($sarg$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StringStartsWithIsCultureSpecific.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StringStartsWithIsCultureSpecific.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StructCanBeMadeReadOnly",
              "shortDescription": {
                "text": "Struct can be made readonly"
              },
              "fullDescription": {
                "text": "Struct has no mutable members and can be made readonly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StructLacksIEquatable.Global",
              "shortDescription": {
                "text": "Struct lacks 'IEquatable' implementation: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Struct overrides equality members but lacks an 'IEquatable' implementation. To prevent boxing in a generic context, implement 'IEquatable'. This inspection only triggers when the struct or its containing type (such as record) is actually used for equality comparisons in the solution."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StructLacksIEquatable.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StructLacksIEquatable.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StructLacksIEquatable.Local",
              "shortDescription": {
                "text": "Struct lacks 'IEquatable' implementation: Private accessibility"
              },
              "fullDescription": {
                "text": "Struct overrides equality members but lacks an 'IEquatable' implementation. To prevent boxing in a generic context, implement 'IEquatable'. This inspection only triggers when the struct or its containing type (such as record) is actually used for equality comparisons in the solution."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StructLacksIEquatable.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StructLacksIEquatable.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StructMemberCanBeMadeReadOnly",
              "shortDescription": {
                "text": "Struct member can be made readonly"
              },
              "fullDescription": {
                "text": "Struct member does not change the containing struct through 'this' and can be made readonly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "StructuredMessageTemplateProblem",
              "shortDescription": {
                "text": "Structured message template problems"
              },
              "fullDescription": {
                "text": "Structured message template syntax errors (unescaped braces, unused arguments, etc.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/StructuredMessageTemplateProblem.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/StructuredMessageTemplateProblem.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuggestBaseTypeForParameter",
              "shortDescription": {
                "text": "Parameter can be declared with the base type"
              },
              "fullDescription": {
                "text": "Parameter can be declared with the base type. Note that when the base type is IEnumerable<T>, another inspection 'Parameter type can be IEnumerable<T>' will be applied."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuggestBaseTypeForParameterInConstructor",
              "shortDescription": {
                "text": "Parameter of the constructor can be declared with the base type"
              },
              "fullDescription": {
                "text": "Parameter can be declared with the base type. Note that when the base type is IEnumerable<T>, another inspection 'Parameter type can be IEnumerable<T>' will be applied."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuggestDiscardDeclarationVarStyle",
              "shortDescription": {
                "text": "Use preferred style for discard declaration"
              },
              "fullDescription": {
                "text": "Use preferred style for discard declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SuggestDiscardDeclarationVarStyle.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SuggestDiscardDeclarationVarStyle.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuggestVarOrType_BuiltInTypes",
              "shortDescription": {
                "text": "Use preferred 'var' style: For built-in types"
              },
              "fullDescription": {
                "text": "Convert if declaration is of a built-in type (e.g. string)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SuggestVarOrType_BuiltInTypes.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SuggestVarOrType_BuiltInTypes.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuggestVarOrType_DeconstructionDeclarations",
              "shortDescription": {
                "text": "Use preferred 'var' style: In deconstruction declarations"
              },
              "fullDescription": {
                "text": "Convert if declaration is a part of a deconstruction"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SuggestVarOrType_DeconstructionDeclarations.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SuggestVarOrType_DeconstructionDeclarations.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuggestVarOrType_Elsewhere",
              "shortDescription": {
                "text": "Use preferred 'var' style: Elsewhere"
              },
              "fullDescription": {
                "text": "Convert if declaration is not of a built-in or simple type and is not evident from the usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SuggestVarOrType_Elsewhere.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SuggestVarOrType_Elsewhere.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuggestVarOrType_SimpleTypes",
              "shortDescription": {
                "text": "Use preferred 'var' style: When type is simple"
              },
              "fullDescription": {
                "text": "Convert if simple type (not an array and does not have generic parameters)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SuggestVarOrType_SimpleTypes.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SuggestVarOrType_SimpleTypes.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuppressNullableWarningExpressionAsInvertedIsExpression",
              "shortDescription": {
                "text": "Nullable warning suppression operator might be confused with inverted 'is' expression"
              },
              "fullDescription": {
                "text": "'!is' looks like an inverted 'is' expression but instead applies nullable warning suppression operator to its operand"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuspiciousLockOverSynchronizationPrimitive",
              "shortDescription": {
                "text": "Suspicious locking over synchronization primitive"
              },
              "fullDescription": {
                "text": "Avoid using synchronization primitives as 'lock' objects"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuspiciousMathSignMethod",
              "shortDescription": {
                "text": "Math.Sign() method always gives the same result"
              },
              "fullDescription": {
                "text": "Math.Sign() method invocation can be replaced with a constant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuspiciousParameterNameInArgumentNullException",
              "shortDescription": {
                "text": "Suspicious parameter name in ArgumentNullException"
              },
              "fullDescription": {
                "text": "Argument name does not match the parameter that was checked"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SuspiciousTypeConversion.Global",
              "shortDescription": {
                "text": "Suspicious type conversion or check"
              },
              "fullDescription": {
                "text": "A type is converted into another one but there is no type in the solution which is inherited from both. This also applies to 'is' operator and '==' and '!=' comparisons."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SuspiciousTypeConversion.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SuspiciousTypeConversion.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SwapViaDeconstruction",
              "shortDescription": {
                "text": "Use deconstruction to swap variables"
              },
              "fullDescription": {
                "text": "Replace multiple assignments with single deconstructing assignment to perform swapping"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault",
              "shortDescription": {
                "text": "Some values of the enum are not processed inside 'switch' expression and are handled via exception in default arm"
              },
              "fullDescription": {
                "text": "Some values of the enum are not processed inside switch expression and fall into default arm. This might indicate unintentional handling of all enum values added after the switch was introduced, consider handling missing enum values explicitly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SwitchStatementForEnumMissesDefaultSection",
              "shortDescription": {
                "text": "Switch statement for enum values does not have default section"
              },
              "fullDescription": {
                "text": "Switch statement for enum values does not have default section. This might lead to unexpected behavior if new enum values will be introduced."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              }
            },
            {
              "id": "SwitchStatementHandlesSomeKnownEnumValuesWithDefault",
              "shortDescription": {
                "text": "Some values of the enum are not processed inside 'switch' statement and are handled via default section"
              },
              "fullDescription": {
                "text": "Some values of the enum are not processed inside 'switch' statement and fall into default section. This might indicate unintentional handling of all enum values added after the switch was introduced, consider handling missing enum values explicitly"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SwitchStatementHandlesSomeKnownEnumValuesWithDefault.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SwitchStatementHandlesSomeKnownEnumValuesWithDefault.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SwitchStatementMissingSomeEnumCasesNoDefault",
              "shortDescription": {
                "text": "Some values of the enum are not processed inside 'switch' statement"
              },
              "fullDescription": {
                "text": "Some values of the enum are not processed inside 'switch' statement"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SwitchStatementMissingSomeEnumCasesNoDefault.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SwitchStatementMissingSomeEnumCasesNoDefault.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SymbolFromNotCopiedLocallyReferenceUsedWarning",
              "shortDescription": {
                "text": "Symbol from module that might be missing at runtime"
              },
              "fullDescription": {
                "text": "Highlights symbols used from a referenced module that is not copied locally"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/SymbolFromNotCopiedLocallyReferenceUsedWarning.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/SymbolFromNotCopiedLocallyReferenceUsedWarning.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "TabsAndSpacesMismatch",
              "shortDescription": {
                "text": "Incorrect indent: Tabs/spaces mismatch"
              },
              "fullDescription": {
                "text": "Incorrect indent: Tabs/spaces mismatch"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/TabsAndSpacesMismatch.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/TabsAndSpacesMismatch.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "TabsAreDisallowed",
              "shortDescription": {
                "text": "Usage of tabulation character for indentation is prohibited"
              },
              "fullDescription": {
                "text": "Use this inspection to prohibit use of tabulation character for code indentation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/TabsAreDisallowed.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/TabsAreDisallowed.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "TabsOutsideIndent",
              "shortDescription": {
                "text": "Incorrect spacing: Tabs are prohibited here"
              },
              "fullDescription": {
                "text": "Incorrect spacing: Tabs are prohibited here"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/TabsOutsideIndent.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/TabsOutsideIndent.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "TailRecursiveCall",
              "shortDescription": {
                "text": "Tail recursive call can be replaced with loop"
              },
              "fullDescription": {
                "text": "Tail recursive calls can be replaced with loop for better performance and protection from possible stack overflows"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ThreadStaticAtInstanceField",
              "shortDescription": {
                "text": "[ThreadStatic] does not work with instance fields"
              },
              "fullDescription": {
                "text": "[ThreadStatic] does nothing with instance fields"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ThreadStaticAtInstanceField.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ThreadStaticAtInstanceField.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ThreadStaticFieldHasInitializer",
              "shortDescription": {
                "text": "Thread static field has initializer"
              },
              "fullDescription": {
                "text": "Thread static field has an initializer, which is invoked only once on the thread that is running when the static constructor executes"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ThreadStaticFieldHasInitializer.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ThreadStaticFieldHasInitializer.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "TooWideLocalVariableScope",
              "shortDescription": {
                "text": "Local variable has too wide declaration scope"
              },
              "fullDescription": {
                "text": "Local variable is declared in a wider scope than the scope of its actual use"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/TooWideLocalVariableScope.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/TooWideLocalVariableScope.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "TryCastAlwaysSucceeds",
              "shortDescription": {
                "text": "Safe cast expression always succeeds"
              },
              "fullDescription": {
                "text": "Safe cast expression always succeeds and can be replaced with a direct cast"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/TryCastAlwaysSucceeds.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/TryCastAlwaysSucceeds.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "TryStatementsCanBeMerged",
              "shortDescription": {
                "text": "try-catch and try-finally statements can be merged"
              },
              "fullDescription": {
                "text": "try-catch and try-finally statements can be merged"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "TypeParameterCanBeVariant",
              "shortDescription": {
                "text": "Type parameter could be declared as covariant or contravariant"
              },
              "fullDescription": {
                "text": "Type parameter could be declared as covariant or contravariant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "TypeWithSuspiciousEqualityIsUsedInRecord.Global",
              "shortDescription": {
                "text": "Type with suspicious equality is used in a record: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Type with suspicious equality is used as a member of a record type. This inspection only triggers when the record type is actually used for equality comparisons in the solution."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/TypeWithSuspiciousEqualityIsUsedInRecord.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/TypeWithSuspiciousEqualityIsUsedInRecord.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "TypeWithSuspiciousEqualityIsUsedInRecord.Local",
              "shortDescription": {
                "text": "Type with suspicious equality is used in a record: Private accessibility"
              },
              "fullDescription": {
                "text": "Type with suspicious equality is used as a member of a record type. This inspection only triggers when the record type is actually used for equality comparisons in the solution."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/TypeWithSuspiciousEqualityIsUsedInRecord.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/TypeWithSuspiciousEqualityIsUsedInRecord.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnassignedField.Compiler",
              "shortDescription": {
                "text": "Unassigned field"
              },
              "fullDescription": {
                "text": "Field is never assigned (compiler warning)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0649",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0649"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnassignedField.Global",
              "shortDescription": {
                "text": "Unassigned field: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Field is never assigned"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnassignedField.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnassignedField.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnassignedField.Local",
              "shortDescription": {
                "text": "Unassigned field: Private accessibility"
              },
              "fullDescription": {
                "text": "Field is never assigned"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnassignedField.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnassignedField.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnassignedGetOnlyAutoProperty",
              "shortDescription": {
                "text": "Get-only auto-property is never assigned"
              },
              "fullDescription": {
                "text": "Auto-property without setter has no initializer or is never assigned in constructor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnassignedGetOnlyAutoProperty.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnassignedGetOnlyAutoProperty.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnassignedReadonlyField",
              "shortDescription": {
                "text": "Unassigned readonly field"
              },
              "fullDescription": {
                "text": "Readonly field is never assigned"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnassignedReadonlyField.Compiler",
              "shortDescription": {
                "text": "Unassigned readonly field"
              },
              "fullDescription": {
                "text": "Readonly field is never assigned (compiler warning)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0649",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0649"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnclosedScript",
              "shortDescription": {
                "text": "Script tag errors: Unclosed <script>"
              },
              "fullDescription": {
                "text": "<([)script(]) $a1$>$c1$"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "HTML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnnecessaryWhitespace",
              "shortDescription": {
                "text": "Unnecessary whitespace at the end of line"
              },
              "fullDescription": {
                "text": "Remove unnecessary whitespace at the end of line"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnnecessaryWhitespace.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnnecessaryWhitespace.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeStyleIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnreachableSwitchArmDueToIntegerAnalysis",
              "shortDescription": {
                "text": "Heuristically unreachable switch arm according to integer analysis"
              },
              "fullDescription": {
                "text": "Heuristically unreachable switch arm according to integer analysis"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnreachableSwitchArmDueToIntegerAnalysis.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnreachableSwitchArmDueToIntegerAnalysis.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnreachableSwitchCaseDueToIntegerAnalysis",
              "shortDescription": {
                "text": "Heuristically unreachable case according to integer analysis"
              },
              "fullDescription": {
                "text": "Heuristically unreachable case label according to integer analysis"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnreachableSwitchCaseDueToIntegerAnalysis.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnreachableSwitchCaseDueToIntegerAnalysis.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnrealHeaderToolError",
              "shortDescription": {
                "text": "UnrealHeaderTool errors"
              },
              "fullDescription": {
                "text": "UnrealHeaderTool errors"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.UnrealHeaderTool"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnrealHeaderToolWarning",
              "shortDescription": {
                "text": "UnrealHeaderTool warnings"
              },
              "fullDescription": {
                "text": "UnrealHeaderTool warnings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CPP.UnrealHeaderTool"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnsupportedRequiredBaseType",
              "shortDescription": {
                "text": "BaseTypeRequired attribute supports only classes and interfaces"
              },
              "fullDescription": {
                "text": "Invalid type specified in '[BaseTypeRequired]' attribute usage. Only classes and interfaces are supported."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnsupportedRequiredBaseType.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnsupportedRequiredBaseType.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedAnonymousMethodSignature",
              "shortDescription": {
                "text": "Anonymous method signature is not necessary"
              },
              "fullDescription": {
                "text": "Specifying signature in an anonymous method is not necessary because none of its parameters are used in the body"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedAutoPropertyAccessor.Global",
              "shortDescription": {
                "text": "Auto-property accessor is never used: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Accessor in auto-property is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedAutoPropertyAccessor.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedAutoPropertyAccessor.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedAutoPropertyAccessor.Local",
              "shortDescription": {
                "text": "Auto-property accessor is never used: Private accessibility"
              },
              "fullDescription": {
                "text": "Accessor in auto-property is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedAutoPropertyAccessor.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedAutoPropertyAccessor.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedField.Compiler",
              "shortDescription": {
                "text": "Field is never used"
              },
              "fullDescription": {
                "text": "Field is never used (compiler warning)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0169",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0169"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedImportClause",
              "shortDescription": {
                "text": "Unused import clause"
              },
              "fullDescription": {
                "text": "Import clause is not used in the file and could be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "ASPX.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedLabel",
              "shortDescription": {
                "text": "Unused label"
              },
              "fullDescription": {
                "text": "Label is never referenced"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedLocalFunction",
              "shortDescription": {
                "text": "Local function is never used"
              },
              "fullDescription": {
                "text": "Local function is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedLocalFunction.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedLocalFunction.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedLocalFunction.Compiler",
              "shortDescription": {
                "text": "Local function is never used"
              },
              "fullDescription": {
                "text": "Local function is never used (compiler warning)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedLocalFunctionParameter",
              "shortDescription": {
                "text": "Unused parameter of local function"
              },
              "fullDescription": {
                "text": "Parameter of local function is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              }
            },
            {
              "id": "UnusedLocalFunctionReturnValue",
              "shortDescription": {
                "text": "Local function return value is never used"
              },
              "fullDescription": {
                "text": "Local function return value is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedMember.Global",
              "shortDescription": {
                "text": "Type member is never used: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Type member is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedMember.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedMember.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "XAML.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "ASXX.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "ASPX.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedMember.Local",
              "shortDescription": {
                "text": "Type member is never used: Private accessibility"
              },
              "fullDescription": {
                "text": "Type member is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedMember.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedMember.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "XAML.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedMemberHierarchy.Global",
              "shortDescription": {
                "text": "Type member is only used in overrides: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Type member is never used from outside of implementation hierarchy, it is only accessed from overrides through base call"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedMemberHierarchy.Local",
              "shortDescription": {
                "text": "Type member is only used in overrides: Private accessibility"
              },
              "fullDescription": {
                "text": "Type member is never used from outside of implementation hierarchy, it is only accessed from overrides through base call"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedMemberInSuper.Global",
              "shortDescription": {
                "text": "Type member is never accessed via base type: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Type member is never used with base type or interface, it is always accessed via more specific type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedMemberInSuper.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedMemberInSuper.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedMemberInSuper.Local",
              "shortDescription": {
                "text": "Type member is never accessed via base type: Private accessibility"
              },
              "fullDescription": {
                "text": "Type member is never used with base type or interface, it is always accessed via more specific type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedMemberInSuper.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedMemberInSuper.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedMethodReturnValue.Global",
              "shortDescription": {
                "text": "Method return value is never used: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Method return value is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedMethodReturnValue.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedMethodReturnValue.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedMethodReturnValue.Local",
              "shortDescription": {
                "text": "Method return value is never used: Private accessibility"
              },
              "fullDescription": {
                "text": "Method return value is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedMethodReturnValue.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedMethodReturnValue.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedNullableDirective",
              "shortDescription": {
                "text": "Unused nullable directive"
              },
              "fullDescription": {
                "text": "A nullable directive has no impact and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedParameter.Global",
              "shortDescription": {
                "text": "Unused parameter: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Parameter is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedParameter.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedParameter.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedParameter.Local",
              "shortDescription": {
                "text": "Unused parameter: Private accessibility"
              },
              "fullDescription": {
                "text": "Parameter is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedParameter.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedParameter.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedParameterInPartialMethod",
              "shortDescription": {
                "text": "Unused parameter in partial method"
              },
              "fullDescription": {
                "text": "Parameter of partial method is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedParameterInPartialMethod.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedParameterInPartialMethod.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedPositionalParameterCompiler",
              "shortDescription": {
                "text": "Unused positional parameter"
              },
              "fullDescription": {
                "text": "Parameter of the primary constructor is declared but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedTupleComponentInReturnValue",
              "shortDescription": {
                "text": "Component of the tuple is never used"
              },
              "fullDescription": {
                "text": "Component of the tuple is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedType.Global",
              "shortDescription": {
                "text": "Type is never used: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Type is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedType.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedType.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "XAML.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedType.Local",
              "shortDescription": {
                "text": "Type is never used: Private accessibility"
              },
              "fullDescription": {
                "text": "Type is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedType.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedType.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "XAML.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedTypeParameter",
              "shortDescription": {
                "text": "Unused type parameter"
              },
              "fullDescription": {
                "text": "Type parameter is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedVariable",
              "shortDescription": {
                "text": "Unused local variable"
              },
              "fullDescription": {
                "text": "Local variable is never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UnusedVariable.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UnusedVariable.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedVariable.Compiler",
              "shortDescription": {
                "text": "Unused local variable"
              },
              "fullDescription": {
                "text": "Local variable is never used (compiler warning)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0168",
              "help": {
                "text": "https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0168"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UsageOfDefaultStructEquality",
              "shortDescription": {
                "text": "Usage of default struct equality"
              },
              "fullDescription": {
                "text": "Default implementations of the 'Equals' and 'GetHashCode' methods of a struct are reflection-based and bad-performing"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UsageOfDefaultStructEquality.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UsageOfDefaultStructEquality.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseArrayCreationExpression.1",
              "shortDescription": {
                "text": "Use array creation expression: Use array creation expression"
              },
              "fullDescription": {
                "text": "Array.CreateInstance(typeof($T$), $long$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseArrayCreationExpression.2",
              "shortDescription": {
                "text": "Use array creation expression: Use array creation expression"
              },
              "fullDescription": {
                "text": "Array.CreateInstance(typeof($T$), $long$, $long2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseArrayEmptyMethod",
              "shortDescription": {
                "text": "Use 'Array.Empty<T>()'"
              },
              "fullDescription": {
                "text": "Replace an empty array allocation with a call of the predefined 'Array.Empty<T>()' method"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseAwaitUsing",
              "shortDescription": {
                "text": "Convert into 'await using' statement or declaration"
              },
              "fullDescription": {
                "text": "Replace 'using' statement or declaration with 'await using' form"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseAwaitUsing.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseAwaitUsing.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseCancellationTokenForIAsyncEnumerable",
              "shortDescription": {
                "text": "Use cancellation token"
              },
              "fullDescription": {
                "text": "IAsyncEnumerable<T> supports cancellation via 'WithCancellation' extension method"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseCollectionCountProperty",
              "shortDescription": {
                "text": "Use collection's count property"
              },
              "fullDescription": {
                "text": "Usage of 'Enumerable.Count()' method can be replaced with direct collection count property access"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseCollectionCountProperty.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseCollectionCountProperty.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseCollectionExpression",
              "shortDescription": {
                "text": "Use collection expression syntax"
              },
              "fullDescription": {
                "text": "Suggest to replace collection object construction and items additions with C# 12 collection expression syntax"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseCollectionExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseCollectionExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseConfigureAwaitFalse",
              "shortDescription": {
                "text": "Missing '.ConfigureAwait(false)' in library code"
              },
              "fullDescription": {
                "text": "It is recommended to use 'ConfigureAwait(false)' in your library code to prevent context capture in task continuations.\r\n        This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default.\r\n        Set 'ConfigureAwait analysis mode' project level property to 'Library' to analyze 'await' expressions and statements for missing 'ConfigureAwait(false)' calls."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseConfigureAwaitFalse.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseConfigureAwaitFalse.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseConfigureAwaitFalseForAsyncDisposable",
              "shortDescription": {
                "text": "Missing '.ConfigureAwait(false)' for async disposable in library code"
              },
              "fullDescription": {
                "text": "It is recommended to use 'ConfigureAwait(false)' in your library code to prevent context capture in task continuations.\r\n        This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default.\r\n        Set 'ConfigureAwait analysis mode' project level property to 'Library' to analyze 'await using' statements for missing 'ConfigureAwait(false)' calls."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseDeconstruction",
              "shortDescription": {
                "text": "Use deconstruction"
              },
              "fullDescription": {
                "text": "Decompose variable into positional components and replace variable usages with corresponding component variables"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseDiscardAssignment",
              "shortDescription": {
                "text": "Use discard assignment"
              },
              "fullDescription": {
                "text": "Replace intentionally ignored variable declaration 'var _ = ...' with discard assignment '_ = ...'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseDiscardAssignment.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseDiscardAssignment.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseEmptyTypesField",
              "shortDescription": {
                "text": "Use 'Type.EmptyTypes'"
              },
              "fullDescription": {
                "text": "Replace an empty array allocation with a use of the predefined 'Type.EmptyTypes' field"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseEventArgsEmptyField",
              "shortDescription": {
                "text": "Use 'EventArgs.Empty'"
              },
              "fullDescription": {
                "text": "Replace an empty 'EventArgs' allocation with a use of the predefined 'EventArgs.Empty' field"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseFormatSpecifierInFormatString",
              "shortDescription": {
                "text": "Use format specifier in format strings"
              },
              "fullDescription": {
                "text": "'.ToString()' call can be replaced with format specifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseFormatSpecifierInFormatString.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseFormatSpecifierInFormatString.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseImplicitByValModifier",
              "shortDescription": {
                "text": "Use implicit 'ByVal' modifier"
              },
              "fullDescription": {
                "text": "Use implicit 'ByVal' modifier in parameter declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseImplicitlyTypedVariable",
              "shortDescription": {
                "text": "Use implicitly typed variable declaration"
              },
              "fullDescription": {
                "text": "Use implicitly typed variable declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseImplicitlyTypedVariableEvident",
              "shortDescription": {
                "text": "Use implicitly typed variable declaration (evident)"
              },
              "fullDescription": {
                "text": "Use implicitly typed variable declaration when variable type is evident from initializer expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseIndexFromEndExpression",
              "shortDescription": {
                "text": "Use index from end expression"
              },
              "fullDescription": {
                "text": "Replace array indexer argument with index from end expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseIndexedProperty",
              "shortDescription": {
                "text": "Use indexed property"
              },
              "fullDescription": {
                "text": "Use indexed property in COM import types instead of the accessor usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseMethodAny.0",
              "shortDescription": {
                "text": "Use method Any(): Use method Any()"
              },
              "fullDescription": {
                "text": "$seq$.Count() > 0"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseMethodAny.0.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseMethodAny.0.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseMethodAny.1",
              "shortDescription": {
                "text": "Use method Any(): Use method Any()"
              },
              "fullDescription": {
                "text": "$seq$.Count() >= 1"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseMethodAny.2",
              "shortDescription": {
                "text": "Use method Any(): Use method Any()"
              },
              "fullDescription": {
                "text": "$seq$.Count() == 0"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseMethodAny.3",
              "shortDescription": {
                "text": "Use method Any(): Use method Any()"
              },
              "fullDescription": {
                "text": "$seq$.Count() <= 0"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseMethodAny.4",
              "shortDescription": {
                "text": "Use method Any(): Use method Any()"
              },
              "fullDescription": {
                "text": "$seq$.Count() < 1"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNameOfInsteadOfToString",
              "shortDescription": {
                "text": "Use 'nameof' expression to reference enum member name"
              },
              "fullDescription": {
                "text": "Replace 'SomeEnum.Member.ToString()' expression with constant 'nameof' expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseNameOfInsteadOfToString.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseNameOfInsteadOfToString.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNameOfInsteadOfTypeOf",
              "shortDescription": {
                "text": "Use 'nameof' expression to reference type name"
              },
              "fullDescription": {
                "text": "Replace 'typeof(T).Name' expression with constant 'nameof' expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNameofExpression",
              "shortDescription": {
                "text": "Use 'nameof' expression to reference name"
              },
              "fullDescription": {
                "text": "Replace string literal with statically typed 'nameof' expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseNameofExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseNameofExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNameofExpressionForPartOfTheString",
              "shortDescription": {
                "text": "Use 'nameof' expression to reference name in part of the string literal"
              },
              "fullDescription": {
                "text": "Replace part of the string literal with statically typed 'nameof' expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNameofForDependencyProperty",
              "shortDescription": {
                "text": "Use 'nameof' expression when registering a DependencyProperty"
              },
              "fullDescription": {
                "text": "Use 'nameof(ClrProperty)' when registering a DependencyProperty instead of a hardcoded name."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNegatedPatternInIsExpression",
              "shortDescription": {
                "text": "Convert negated 'is' expression into 'is' expression with negated pattern"
              },
              "fullDescription": {
                "text": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNegatedPatternMatching",
              "shortDescription": {
                "text": "Convert 'as' expression type check and the following null check into negated pattern matching"
              },
              "fullDescription": {
                "text": "Replace variable for 'as' expression type check and the following check for it being null with negated C# 7.0 pattern matching expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNullPropagation",
              "shortDescription": {
                "text": "Replace if statement with null-propagating code"
              },
              "fullDescription": {
                "text": "Replaces if statement with null-propagating code using ?. operator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseNullPropagation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseNullPropagation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNullableAnnotationInsteadOfAttribute",
              "shortDescription": {
                "text": "Use nullable annotation instead of an attribute"
              },
              "fullDescription": {
                "text": "An attribute is used to declare the nullability of a type. Nullable reference types' annotations might be used instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNullableAttributesSupportedByCompiler",
              "shortDescription": {
                "text": "Use compiler-supported nullable attributes"
              },
              "fullDescription": {
                "text": "Use compiler-supported attributes from System.Diagnostics.CodeAnalysis namespace to override annotations for nullable reference types"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseNullableReferenceTypesAnnotationSyntax",
              "shortDescription": {
                "text": "Use type annotation syntax"
              },
              "fullDescription": {
                "text": "Replace nullness attributes such as [CanBeNull] or [ItemCanBeNull] with nullable reference types' annotation syntax"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseObjectOrCollectionInitializer",
              "shortDescription": {
                "text": "Use object or collection initializer when possible"
              },
              "fullDescription": {
                "text": "Suggest to replace object sequential assignments to newly created object fields by object initializer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseObjectOrCollectionInitializer.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseObjectOrCollectionInitializer.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UsePatternMatching",
              "shortDescription": {
                "text": "Convert 'as' expression type check and the following null check into pattern matching"
              },
              "fullDescription": {
                "text": "Replace variable for 'as' expression type check and the following check for it being not null with C# 7.0 pattern matching expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UsePatternMatching.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UsePatternMatching.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UsePositionalDeconstructionPattern",
              "shortDescription": {
                "text": "Use positional deconstruction pattern"
              },
              "fullDescription": {
                "text": "Replace property pattern member(s) of recursive pattern with positional deconstruction patterns"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseRawString",
              "shortDescription": {
                "text": "Use raw string"
              },
              "fullDescription": {
                "text": "Use raw string to eliminate escape sequences and keep normal indentation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseStringInterpolation",
              "shortDescription": {
                "text": "Use string interpolation expression"
              },
              "fullDescription": {
                "text": "Replace string construction by 'String.Format()' method invocation with string interpolation expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseStringInterpolation.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseStringInterpolation.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseStringInterpolationWhenPossible",
              "shortDescription": {
                "text": "Use string interpolation expression when possible"
              },
              "fullDescription": {
                "text": "Replace string construction by 'String.Format()' method invocation with string interpolation expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              }
            },
            {
              "id": "UseSwitchCasePatternVariable",
              "shortDescription": {
                "text": "Type pattern and casts can be merged"
              },
              "fullDescription": {
                "text": "Type pattern in switch case label can be merged with direct cast(s) in switch section"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseSymbolAlias",
              "shortDescription": {
                "text": "Use alias"
              },
              "fullDescription": {
                "text": "Use available alias"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseThrowIfNullMethod",
              "shortDescription": {
                "text": "Use 'ArgumentNullException.ThrowIfNull'"
              },
              "fullDescription": {
                "text": "Replace throwing of 'ArgumentNullException' object with an invocation of the helper method"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseUnsignedRightShiftOperator",
              "shortDescription": {
                "text": "Use unsigned right shift operator '>>>'"
              },
              "fullDescription": {
                "text": "Use unsigned right shift operator '>>>' instead of manual casting and shifting"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseUnsignedRightShiftOperator.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseUnsignedRightShiftOperator.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseUtf8StringLiteral",
              "shortDescription": {
                "text": "Use UTF-8 string literal"
              },
              "fullDescription": {
                "text": "Byte array can be converted to a UTF-8 string literal"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UseUtf8StringLiteral.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UseUtf8StringLiteral.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseVerbatimString",
              "shortDescription": {
                "text": "Literal length can be reduced by using verbatim string"
              },
              "fullDescription": {
                "text": "String literal length can be reduced by using verbatim string"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseWithExpressionToCopyAnonymousObject",
              "shortDescription": {
                "text": "Use 'with' expression to copy anonymous object"
              },
              "fullDescription": {
                "text": "Use 'with' expression to create a modified copy of an anonymous object"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseWithExpressionToCopyRecord",
              "shortDescription": {
                "text": "Use 'with' expression to copy record"
              },
              "fullDescription": {
                "text": "Use 'with' expression to create a modified instance of a record"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseWithExpressionToCopyStruct",
              "shortDescription": {
                "text": "Use 'with' expression to copy struct"
              },
              "fullDescription": {
                "text": "Use 'with' expression to create a modified instance of a struct"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UseWithExpressionToCopyTuple",
              "shortDescription": {
                "text": "Use 'with' expression to copy tuple"
              },
              "fullDescription": {
                "text": "Use 'with' expression to create a modified copy of a tuple"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.LanguageUsage"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UselessBinaryOperation",
              "shortDescription": {
                "text": "Useless arithmetical operation"
              },
              "fullDescription": {
                "text": "Useless arithmetical operation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UselessComparisonToIntegralConstant",
              "shortDescription": {
                "text": "Comparison to integral constant is useless"
              },
              "fullDescription": {
                "text": "Comparison to integral constant is useless; the constant is outside the range of the target type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UsingStatementResourceInitialization",
              "shortDescription": {
                "text": "Do not use object initializer for 'using' variable: Do not use object initializer for 'using' variable"
              },
              "fullDescription": {
                "text": "Initialize object properties inside the 'using' statement to ensure that the object is disposed if an exception is thrown during initialization"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UsingStatementResourceInitialization.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UsingStatementResourceInitialization.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UsingStatementResourceInitializationExpression",
              "shortDescription": {
                "text": "Do not use object initializer for 'using' variable: Object initializer expression may throw exception while initializing 'using' variable"
              },
              "fullDescription": {
                "text": "Calculate object properties before the 'using' statement to ensure that no exception is thrown during initialization, which leaves the object not disposed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/UsingStatementResourceInitializationExpression.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/UsingStatementResourceInitializationExpression.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBCheckForReferenceEqualityInstead.1",
              "shortDescription": {
                "text": "Check for reference equality instead: Check for reference equality instead"
              },
              "fullDescription": {
                "text": "$type$.Equals($type2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBCheckForReferenceEqualityInstead.2",
              "shortDescription": {
                "text": "Check for reference equality instead: Check for reference equality instead"
              },
              "fullDescription": {
                "text": "Equals($type$,$type2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBPossibleMistakenArgument",
              "shortDescription": {
                "text": "Possible mistaken argument: Possible mistaken argument"
              },
              "fullDescription": {
                "text": "$type$.IsInstanceOfType($type$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBPossibleMistakenCallToGetType.1",
              "shortDescription": {
                "text": "Possible mistaken call to GetType(): Possible mistaken call to GetType()"
              },
              "fullDescription": {
                "text": "$type$.IsInstanceOfType($expr$.GetType())"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBPossibleMistakenCallToGetType.2",
              "shortDescription": {
                "text": "Possible mistaken call to GetType(): Possible mistaken call to GetType()"
              },
              "fullDescription": {
                "text": "$type$.GetType()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBRemoveToList.1",
              "shortDescription": {
                "text": "Remove ToList(): Remove ToList()"
              },
              "fullDescription": {
                "text": "$seq$.ToList().ToArray()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBRemoveToList.2",
              "shortDescription": {
                "text": "Remove ToList(): Remove ToList()"
              },
              "fullDescription": {
                "text": "$seq$.ToList().Count"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithFirstOrDefault",
              "shortDescription": {
                "text": "Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)"
              },
              "fullDescription": {
                "text": "If ($seq$.Any($args$), $seq$.First($args$), Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithLastOrDefault",
              "shortDescription": {
                "text": "Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)"
              },
              "fullDescription": {
                "text": "If ($seq$.Any($args$), $seq$.Last($args$), Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.1",
              "shortDescription": {
                "text": "Replace with OfType<T>(): Replace with OfType(Of ..)()"
              },
              "fullDescription": {
                "text": "$seq$.Where(Function ($x$) TypeOf $x$ Is $T$).Select(Function ($y$) TryCast($y$, $T$))"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.2",
              "shortDescription": {
                "text": "Replace with OfType<T>(): Replace with OfType(Of ..)()"
              },
              "fullDescription": {
                "text": "$seq$.Where(Function ($x$) TypeOf $x$ Is $T$).Select(Function ($y$) DirectCast($y$, $T$))"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.Any.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().Any(): Replace with OfType(Of ..)().Any()"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Any(Function ($y$) $y$ IsNot Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.Any.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().Any(): Replace with OfType(Of ..)().Any(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Any(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.Count.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().Count(): Replace with OfType(Of ..)().Count()"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Count(Function ($y$) $y$ IsNot Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.Count.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().Count(): Replace with OfType(Of ..)().Count(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Count(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.First.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().First(): Replace with OfType(Of ..)().First()"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).First(Function ($y$) $y$ IsNot Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.First.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().First(): Replace with OfType(Of ..)().First(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).First(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.FirstOrDefault.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().FirstOrDefault(): Replace with OfType(Of ..)().FirstOrDefault()"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).FirstOrDefault(Function ($y$) $y$ IsNot Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.FirstOrDefault.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().FirstOrDefault(): Replace with OfType(Of ..)().FirstOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).FirstOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.Last.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().Last(): Replace with OfType(Of ..)().Last()"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Last(Function ($y$) $y$ IsNot Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.Last.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().Last(): Replace with OfType(Of ..)().Last(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Last(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.LastOrDefault.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().LastOrDefault(): Replace with OfType(Of ..)().LastOrDefault()"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).LastOrDefault(Function ($y$) $y$ IsNot Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.LastOrDefault.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().LastOrDefault(): Replace with OfType(Of ..)().LastOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).LastOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.Single.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().Single(): Replace with OfType(Of ..)().Single()"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Single(Function ($y$) $y$ IsNot Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.Single.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().Single(): Replace with OfType(Of ..)().Single(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Single(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.SingleOrDefault.1",
              "shortDescription": {
                "text": "Replace with OfType<T>().SingleOrDefault(): Replace with OfType(Of ..)().SingleOrDefault()"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).SingleOrDefault(Function ($y$) $y$ IsNot Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.SingleOrDefault.2",
              "shortDescription": {
                "text": "Replace with OfType<T>().SingleOrDefault(): Replace with OfType(Of ..)().SingleOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).SingleOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithOfType.Where",
              "shortDescription": {
                "text": "Replace with OfType<T>().Where(): Replace with OfType(Of ..)().Where(..)"
              },
              "fullDescription": {
                "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Where(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleAssignment.1",
              "shortDescription": {
                "text": "Replace with single assignment: Replace with single assignment"
              },
              "fullDescription": {
                "text": "Dim $x$ = False\r\nIf($bool1$) Then $x$ = True\r\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleAssignment.2",
              "shortDescription": {
                "text": "Replace with single assignment: Replace with single assignment"
              },
              "fullDescription": {
                "text": "Dim $x$ = True\r\nIf($bool1$) Then $x$ = False\r\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleCallToAny",
              "shortDescription": {
                "text": "Replace with single call to Any(..): Replace with single call to Any(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where(Function ($x$) $expr$).Any()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleCallToCount",
              "shortDescription": {
                "text": "Replace with single call to Count(..): Replace with single call to Count(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where(Function ($x$) $expr$).Count()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleCallToFirst",
              "shortDescription": {
                "text": "Replace with single call to First(..): Replace with single call to First(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where(Function ($x$) $expr$).First()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleCallToFirstOrDefault",
              "shortDescription": {
                "text": "Replace with single call to FirstOrDefault(..): Replace with single call to FirstOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where(Function ($x$) $expr$).FirstOrDefault()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleCallToLast",
              "shortDescription": {
                "text": "Replace with single call to Last(..): Replace with single call to Last(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where(Function ($x$) $expr$).Last()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleCallToLastOrDefault",
              "shortDescription": {
                "text": "Replace with single call to LastOrDefault(..): Replace with single call to LastOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where(Function ($x$) $expr$).LastOrDefault()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleCallToSingle",
              "shortDescription": {
                "text": "Replace with single call to Single(..): Replace with single call to Single(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where(Function ($x$) $expr$).Single()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleCallToSingleOrDefault",
              "shortDescription": {
                "text": "Replace with single call to SingleOrDefault(..): Replace with single call to SingleOrDefault(..)"
              },
              "fullDescription": {
                "text": "$seq$.Where(Function ($x$) $expr$).SingleOrDefault()"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBReplaceWithSingleOrDefault",
              "shortDescription": {
                "text": "Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)"
              },
              "fullDescription": {
                "text": "If ($seq$.Any($args$), $seq$.Single($args$), Nothing)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBSimplifyLinqExpression.1",
              "shortDescription": {
                "text": "Simplify expression: Simplify expression"
              },
              "fullDescription": {
                "text": "!$seq$.Any(Function ($x$) Not $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBSimplifyLinqExpression.10",
              "shortDescription": {
                "text": "Simplify expression: Simplify expression"
              },
              "fullDescription": {
                "text": "!$seq$.All(Function ($x$) $expr$ = $expr2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBSimplifyLinqExpression.2",
              "shortDescription": {
                "text": "Simplify expression: Simplify expression"
              },
              "fullDescription": {
                "text": "!$seq$.All(Function ($x$) Not $expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBSimplifyLinqExpression.3",
              "shortDescription": {
                "text": "Simplify expression: Simplify expression"
              },
              "fullDescription": {
                "text": "!$seq$.Any(Function ($x$) $expr$ IsNot $expr2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBSimplifyLinqExpression.4",
              "shortDescription": {
                "text": "Simplify expression: Simplify expression"
              },
              "fullDescription": {
                "text": "!$seq$.Any(Function ($x$) $expr$ <> $expr2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBSimplifyLinqExpression.5",
              "shortDescription": {
                "text": "Simplify expression: Simplify expression"
              },
              "fullDescription": {
                "text": "!$seq$.All(Function ($x$) $expr$ IsNot $expr2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBSimplifyLinqExpression.6",
              "shortDescription": {
                "text": "Simplify expression: Simplify expression"
              },
              "fullDescription": {
                "text": "!$seq$.All(Function ($x$) $expr$ <> $expr2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBSimplifyLinqExpression.7",
              "shortDescription": {
                "text": "Simplify expression: Simplify expression"
              },
              "fullDescription": {
                "text": "!$seq$.Any(Function ($x$) $expr$ Is $expr2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBSimplifyLinqExpression.8",
              "shortDescription": {
                "text": "Simplify expression: Simplify expression"
              },
              "fullDescription": {
                "text": "!$seq$.Any(Function ($x$) $expr$ = $expr2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBSimplifyLinqExpression.9",
              "shortDescription": {
                "text": "Simplify expression: Simplify expression"
              },
              "fullDescription": {
                "text": "!$seq$.All(Function ($x$) $expr$ Is $expr2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringCompareIsCultureSpecific.1",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, string) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.Compare($s1$, $s2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringCompareIsCultureSpecific.2",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific"
              },
              "fullDescription": {
                "text": "$string$.Compare($s1$, $s2$, false)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringCompareIsCultureSpecific.3",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific"
              },
              "fullDescription": {
                "text": "$string$.Compare($s1$, $s2$, true)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringCompareIsCultureSpecific.4",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, int, string, int) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringCompareIsCultureSpecific.5",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$, false)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringCompareIsCultureSpecific.6",
              "shortDescription": {
                "text": "String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$, true)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringCompareToIsCultureSpecific",
              "shortDescription": {
                "text": "String.CompareTo is culture-specific: String.CompareTo is culture-specific"
              },
              "fullDescription": {
                "text": "$s1$.CompareTo($s2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringEndsWithIsCultureSpecific",
              "shortDescription": {
                "text": "String.EndsWith is culture-specific: String.EndsWith(string) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.EndsWith($sarg$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringIndexOfIsCultureSpecific.1",
              "shortDescription": {
                "text": "String.IndexOf is culture-specific: String.IndexOf(string) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.IndexOf($sarg$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringIndexOfIsCultureSpecific.2",
              "shortDescription": {
                "text": "String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.IndexOf($sarg$, $iarg1$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringIndexOfIsCultureSpecific.3",
              "shortDescription": {
                "text": "String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.IndexOf($sarg$, $iarg1$, $iarg2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringLastIndexOfIsCultureSpecific.1",
              "shortDescription": {
                "text": "String.LastIndexOf is culture-specific: String.LastIndexOf(string) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.LastIndexOf($sarg$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringLastIndexOfIsCultureSpecific.2",
              "shortDescription": {
                "text": "String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.LastIndexOf($sarg$, $iarg1$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringLastIndexOfIsCultureSpecific.3",
              "shortDescription": {
                "text": "String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.LastIndexOf($sarg$, $iarg1$, $iarg2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBStringStartsWithIsCultureSpecific",
              "shortDescription": {
                "text": "String.StartsWith is culture-specific: String.StartsWith(string) is culture-specific"
              },
              "fullDescription": {
                "text": "$s$.StartsWith($sarg$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseArrayCreationExpression.1",
              "shortDescription": {
                "text": "Use array creation expression: Use array creation expression"
              },
              "fullDescription": {
                "text": "Array.CreateInstance(GetType($T$), $long$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseArrayCreationExpression.2",
              "shortDescription": {
                "text": "Use array creation expression: Use array creation expression"
              },
              "fullDescription": {
                "text": "Array.CreateInstance(GetType($T$), $long$, $long2$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseFirstInstead",
              "shortDescription": {
                "text": "Use First() instead: Use First() instead"
              },
              "fullDescription": {
                "text": "$enumerable$.FirstOrDefault().$method$(...)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseMethodAny.1",
              "shortDescription": {
                "text": "Use method Any(): Use method Any()"
              },
              "fullDescription": {
                "text": "$seq$.Count() > 0"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseMethodAny.2",
              "shortDescription": {
                "text": "Use method Any(): Use method Any()"
              },
              "fullDescription": {
                "text": "$seq$.Count() >= 1"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseMethodAny.3",
              "shortDescription": {
                "text": "Use method Any(): Use method Any()"
              },
              "fullDescription": {
                "text": "$seq$.Count() = 0"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseMethodAny.4",
              "shortDescription": {
                "text": "Use method Any(): Use method Any()"
              },
              "fullDescription": {
                "text": "$seq$.Count() <= 0"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseMethodAny.5",
              "shortDescription": {
                "text": "Use method Any(): Use method Any()"
              },
              "fullDescription": {
                "text": "$seq$.Count() < 1"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseMethodIsInstanceOfType",
              "shortDescription": {
                "text": "Use method IsInstanceOfType(..): Use method IsInstanceOfType(..)"
              },
              "fullDescription": {
                "text": "$type$.IsAssignableFrom($expr$.GetType())"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseTypeOfIsOperator.1",
              "shortDescription": {
                "text": "Use 'TypeOf .. Is ..' operator: Use 'TypeOf .. Is ..' operator"
              },
              "fullDescription": {
                "text": "GetType($T$).IsAssignableFrom($expr$.GetType())"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBUseTypeOfIsOperator.2",
              "shortDescription": {
                "text": "Use 'TypeOf .. Is ..' operator: Use 'TypeOf .. Is ..' operator"
              },
              "fullDescription": {
                "text": "GetType($T$).IsInstanceOfType($expr$)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.BestPractice"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC40000",
              "shortDescription": {
                "text": "Use obsolete member"
              },
              "fullDescription": {
                "text": "Use obsolete member"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC400005",
              "shortDescription": {
                "text": "Member shadows an overriable member"
              },
              "fullDescription": {
                "text": "Member shadows an overriable member"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/fs06ef5d.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/fs06ef5d.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC40008",
              "shortDescription": {
                "text": "Use obsolete member (without message)"
              },
              "fullDescription": {
                "text": "Use obsolete member (without message)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/s5f0ewa6.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/s5f0ewa6.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC40056",
              "shortDescription": {
                "text": "Namespace or type specified in the Imports 'name' doesn't contain any public member or cannot be found"
              },
              "fullDescription": {
                "text": "Namespace or type specified in the Imports 'name' doesn't contain any public member or cannot be found"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/ms234657.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/ms234657.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42016",
              "shortDescription": {
                "text": "Runtime errors might occur when converting X to Y"
              },
              "fullDescription": {
                "text": "Runtime errors might occur when converting X to Y"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/56k670kt.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/56k670kt.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42025",
              "shortDescription": {
                "text": "Access of shared member through an instance"
              },
              "fullDescription": {
                "text": "Access of shared member through an instance"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/y6t76186.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/y6t76186.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42104",
              "shortDescription": {
                "text": "Variable is used before it has been assigned a value"
              },
              "fullDescription": {
                "text": "Variable is used before it has been assigned a value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/3fdk625a.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/3fdk625a.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42105,BC42106,BC42107",
              "shortDescription": {
                "text": "Function doesn't return a reference type value on all code paths"
              },
              "fullDescription": {
                "text": "Function doesn't return a reference type value on all code paths"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/VBWarnings_BC42105_BC42106_BC42107.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/VBWarnings_BC42105_BC42106_BC42107.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42304",
              "shortDescription": {
                "text": "Syntax error in XML comment"
              },
              "fullDescription": {
                "text": "Syntax error in XML comment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://docs.microsoft.com/en-us/dotnet/visual-basic/misc/bc42304",
              "help": {
                "text": "https://docs.microsoft.com/en-us/dotnet/visual-basic/misc/bc42304"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42309",
              "shortDescription": {
                "text": "XML comment has a tag with a 'cref' attribute that could not be resolved"
              },
              "fullDescription": {
                "text": "XML comment has a tag with a 'cref' attribute that could not be resolved"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://docs.microsoft.com/en-us/dotnet/visual-basic/misc/bc42309",
              "help": {
                "text": "https://docs.microsoft.com/en-us/dotnet/visual-basic/misc/bc42309"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42322",
              "shortDescription": {
                "text": "Runtime errors are likely to occur when converting X to Y"
              },
              "fullDescription": {
                "text": "Runtime errors are likely to occur when converting X to Y"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://docs.microsoft.com/en-us/dotnet/visual-basic/misc/bc42322",
              "help": {
                "text": "https://docs.microsoft.com/en-us/dotnet/visual-basic/misc/bc42322"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42349",
              "shortDescription": {
                "text": "Redundant DirectCast to the equals value type"
              },
              "fullDescription": {
                "text": "Redundant DirectCast to the equals value type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42353,BC42354,BC42355",
              "shortDescription": {
                "text": "Function doesn't return a struct value on all code paths"
              },
              "fullDescription": {
                "text": "Function doesn't return a struct value on all code paths"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/VBWarnings_BC42353_BC42354_BC42355.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/VBWarnings_BC42353_BC42354_BC42355.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42356",
              "shortDescription": {
                "text": "Async method lacks 'Await' operators"
              },
              "fullDescription": {
                "text": "Async method lacks 'Await' operators"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42358",
              "shortDescription": {
                "text": "Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'Await' operator to the result of the call."
              },
              "fullDescription": {
                "text": "Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'Await' operator to the result of the call."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://msdn.microsoft.com/en-us/library/hh965065.aspx",
              "help": {
                "text": "https://msdn.microsoft.com/en-us/library/hh965065.aspx"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42380",
              "shortDescription": {
                "text": "Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed."
              },
              "fullDescription": {
                "text": "Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42504",
              "shortDescription": {
                "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential"
              },
              "fullDescription": {
                "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::BC42505",
              "shortDescription": {
                "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect. It is applied with an invalid parameter name."
              },
              "fullDescription": {
                "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect. It is applied with an invalid parameter name."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBWarnings::WME006",
              "shortDescription": {
                "text": "Namespace should be default namespace of this project"
              },
              "fullDescription": {
                "text": "Namespace should be default namespace of this project"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CompilerWarnings"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ValueParameterNotUsed",
              "shortDescription": {
                "text": "'value' parameter is not used"
              },
              "fullDescription": {
                "text": "The setter of a property or indexer does not use its 'value' parameter. This also applies to adders and removers of events."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ValueParameterNotUsed.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ValueParameterNotUsed.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ValueRangeAttributeViolation",
              "shortDescription": {
                "text": "Possible violation of 'ValueRange'/'NonNegativeValue' attribute"
              },
              "fullDescription": {
                "text": "Integer value assigned to this entity doesn't lie in the interval specified in the attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VariableCanBeNotNullable",
              "shortDescription": {
                "text": "Variable can be declared as non-nullable"
              },
              "fullDescription": {
                "text": "Variable is declared as nullable, but it never contains a null value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VariableHidesOuterVariable",
              "shortDescription": {
                "text": "Variable in local function hides variable from outer scope"
              },
              "fullDescription": {
                "text": "Variable in local function hides variable from outer scope"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VariableLengthStringHexEscapeSequence",
              "shortDescription": {
                "text": "Avoid mixing of variable-length escape sequences and text"
              },
              "fullDescription": {
                "text": "The '\\x' escape sequence can interpret up to four hexadecimal digits. To prevent confusion when multiple digits follow, consider using a fixed-length sequence, e.g.: '\\u001A' instead of '\\x1A'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/VariableLengthStringHexEscapeSequence.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/VariableLengthStringHexEscapeSequence.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VbUnreachableCode",
              "shortDescription": {
                "text": "Unreachable code"
              },
              "fullDescription": {
                "text": "Code is unreachable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VirtualMemberCallInConstructor",
              "shortDescription": {
                "text": "Virtual member call in constructor"
              },
              "fullDescription": {
                "text": "When a virtual method is called, the actual type that executes the method\r\n          is not selected until run time. When a constructor calls a virtual method,\r\n          it is possible that the constructor for the instance that invokes the method\r\n          has not executed. See <a href='http://msdn2.microsoft.com/en-us/library/ms182331.aspx'>http://msdn2.microsoft.com/en-us/library/ms182331.aspx</a>."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/VirtualMemberCallInConstructor.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/VirtualMemberCallInConstructor.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VirtualMemberNeverOverridden.Global",
              "shortDescription": {
                "text": "Virtual (overridable) member is never overridden: Non-private accessibility"
              },
              "fullDescription": {
                "text": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/VirtualMemberNeverOverridden.Global.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/VirtualMemberNeverOverridden.Global.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VirtualMemberNeverOverridden.Local",
              "shortDescription": {
                "text": "Virtual (overridable) member is never overridden: Private accessibility"
              },
              "fullDescription": {
                "text": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/VirtualMemberNeverOverridden.Local.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/VirtualMemberNeverOverridden.Local.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "VBASIC.DeclarationRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VoidMethodWithMustDisposeResourceAttribute",
              "shortDescription": {
                "text": "'void' method is annotated with the [MustDisposeResource] attribute"
              },
              "fullDescription": {
                "text": "Annotating a 'void' method with [MustDisposeResource] is meaningless"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VoidMethodWithMustUseReturnValueAttribute",
              "shortDescription": {
                "text": "'void' method is annotated with the [MustUseReturnValue] attribute"
              },
              "fullDescription": {
                "text": "It is meaningless to annotate a 'void' method with the [MustUseReturnValue] attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VulnerableApi",
              "shortDescription": {
                "text": "Vulnerable API usage"
              },
              "fullDescription": {
                "text": "Reports usages of Vulnerable APIs in imported dependencies"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/VulnerableApi.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/VulnerableApi.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.Security"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Web.IgnoredPath",
              "shortDescription": {
                "text": "Ignored path"
              },
              "fullDescription": {
                "text": "Path is ignored in project settings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "HTML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Web.MappedPath",
              "shortDescription": {
                "text": "Mapped path"
              },
              "fullDescription": {
                "text": "Path is mapped to a different path in project settings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "HTML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.ModuleNotResolved",
              "shortDescription": {
                "text": "Cannot resolve module"
              },
              "fullDescription": {
                "text": "Cannot resolve module"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.ModuleQualificationResolve",
              "shortDescription": {
                "text": "Module qualification required"
              },
              "fullDescription": {
                "text": "Module qualification required for type resolution"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.RedundantAddNamespaceTag",
              "shortDescription": {
                "text": "Redundant add namespace element"
              },
              "fullDescription": {
                "text": "Add namespace element is redundant because it duplicates another element of is cleared later and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.RedundantLocationTag",
              "shortDescription": {
                "text": "Redundant location element"
              },
              "fullDescription": {
                "text": "Location element does not correspond to any path in the web site and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.TagPrefixRedundand",
              "shortDescription": {
                "text": "Redundant tagPrefix declaration"
              },
              "fullDescription": {
                "text": "Tag prefix does not declare any new alias and can be removed safely"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.TypeNotResolved",
              "shortDescription": {
                "text": "Cannot resolve symbol"
              },
              "fullDescription": {
                "text": "Cannot resolve symbol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.UnusedAddTag",
              "shortDescription": {
                "text": "Redundant add element"
              },
              "fullDescription": {
                "text": "Add element is redundant because it is cleared later and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.UnusedElementDueToConfigSourceAttribute",
              "shortDescription": {
                "text": "Redundant element or attribute because of 'configSource' attribute"
              },
              "fullDescription": {
                "text": "Element or attribute is not applied because of 'configSource' attribute and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.UnusedRemoveOrClearTag",
              "shortDescription": {
                "text": "Redundant remove or clear element"
              },
              "fullDescription": {
                "text": "Element does not clear anything and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.WebConfigPathWarning",
              "shortDescription": {
                "text": "Referenced path cannot be found in the website"
              },
              "fullDescription": {
                "text": "Referenced path cannot be found in the website"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WebConfig.WrongModule",
              "shortDescription": {
                "text": "Wrong module"
              },
              "fullDescription": {
                "text": "Wrong module"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WithExpressionInsteadOfInitializer",
              "shortDescription": {
                "text": "'with' expression is used instead of object initializer"
              },
              "fullDescription": {
                "text": "'with' expression applied to a newly created object instance results in unnecessary clone creation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WithExpressionModifiesAllMembers",
              "shortDescription": {
                "text": "'with' expression modifies all accessible instance members"
              },
              "fullDescription": {
                "text": "'with' expression modifies all accessible instance members. Unless it is an unintentional mistake, it should make more sense to create an entirely new instance."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "WrongIndentSize",
              "shortDescription": {
                "text": "Incorrect indent: Incorrect indent size"
              },
              "fullDescription": {
                "text": "Incorrect indent: Incorrect indent size"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/WrongIndentSize.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/WrongIndentSize.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.FormattingIssues"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.AssignNullToNotNullAttribute",
              "shortDescription": {
                "text": "Possible 'null' assignment to non-nullable entity"
              },
              "fullDescription": {
                "text": "An expression which can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.ConstraintViolation"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.AvaloniaWrongBindingModeForStreamBindingOperator",
              "shortDescription": {
                "text": "Using stream binding operator in TwoWay or OneWayToSource binding modes"
              },
              "fullDescription": {
                "text": "Using stream binding operator in TwoWay or OneWayToSource binding modes may cause runtime errors"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.BindingWithContextNotResolved",
              "shortDescription": {
                "text": "Unresolved binding path when DataContext is known"
              },
              "fullDescription": {
                "text": "Unresolved binding path when DataContext for data binding is specified, but symbol cannot be found"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.BindingWithoutContextNotResolved",
              "shortDescription": {
                "text": "Unresolved binding path when DataContext is unknown"
              },
              "fullDescription": {
                "text": "Unresolved binding path when DataContext for data binding is not specified"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.CompiledBindingMissingDataTypeErrorHighlighting",
              "shortDescription": {
                "text": "x:DataType not specified for CompiledBinding"
              },
              "fullDescription": {
                "text": "x:DataType not specified for CompiledBinding"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.ConstructorWarning",
              "shortDescription": {
                "text": "Constructor not resolved"
              },
              "fullDescription": {
                "text": "Constructor not resolved"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.DecimalParsingIsCultureDependent",
              "shortDescription": {
                "text": "Decimal numbers parsed depending on current machine culture"
              },
              "fullDescription": {
                "text": "Decimal numbers parsed depending on current machine culture"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.DependencyPropertyResolveError",
              "shortDescription": {
                "text": "Dependency property descriptor field missing"
              },
              "fullDescription": {
                "text": "Dependency property descriptor field missing or implementation does not comply with Microsoft style guide"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.DuplicateStyleSetter",
              "shortDescription": {
                "text": "Duplicate style property/event setter"
              },
              "fullDescription": {
                "text": "Duplicate style property/event setter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.DynamicResourceError",
              "shortDescription": {
                "text": "{DynamicResource} can only be used with dependency property"
              },
              "fullDescription": {
                "text": "{DynamicResource} can only be used with DependencyProperty of a DependencyObject"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.ElementNameReferenceNotResolved",
              "shortDescription": {
                "text": "Element name reference is not resolved"
              },
              "fullDescription": {
                "text": "Element name reference is not resolved to any of the named elements in scope"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.EmptyGridLengthDefinition",
              "shortDescription": {
                "text": "Grid length definition must not be empty"
              },
              "fullDescription": {
                "text": "Grid length definition must not be empty"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.FieldModifierRequiresNameAttribute",
              "shortDescription": {
                "text": "x:FieldModifier attribute requires x:Name attribute"
              },
              "fullDescription": {
                "text": "x:FieldModifier attribute requires x:Name attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.GridDefinitionsCanBeConvertedToAttribute",
              "shortDescription": {
                "text": "Grid columns/rows definitions can be converted to attribute"
              },
              "fullDescription": {
                "text": "Grid columns/rows definitions can be converted to attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.IgnoredPathHighlighting",
              "shortDescription": {
                "text": "Ignored path"
              },
              "fullDescription": {
                "text": "Path is ignored in project settings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.IndexOutOfGridDefinition",
              "shortDescription": {
                "text": "Grid element column/row index is out of grid definition range"
              },
              "fullDescription": {
                "text": "Grid element column/row index is out of grid definition range"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.InvalidDynamicResourceType",
              "shortDescription": {
                "text": "XAML dynamic resource of invalid type"
              },
              "fullDescription": {
                "text": "XAML dynamic resource of invalid type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.InvalidMemberType",
              "shortDescription": {
                "text": "Member of invalid type"
              },
              "fullDescription": {
                "text": "Member of invalid type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.InvalidResourceTargetType",
              "shortDescription": {
                "text": "XAML style of invalid target type"
              },
              "fullDescription": {
                "text": "XAML style of invalid target type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.InvalidResourceType",
              "shortDescription": {
                "text": "XAML resource of invalid type"
              },
              "fullDescription": {
                "text": "XAML resource of invalid type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.InvalidType",
              "shortDescription": {
                "text": "Object/markup extension of invalid type"
              },
              "fullDescription": {
                "text": "Object/markup extension of invalid type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.LanguageLevel",
              "shortDescription": {
                "text": "XAML language level error"
              },
              "fullDescription": {
                "text": "XAML 2009 language construct is not allowed here"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.MappedPathHighlighting",
              "shortDescription": {
                "text": "Mapped path"
              },
              "fullDescription": {
                "text": "Path is mapped to a different path in project settings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.MethodArgumentsWillBeIgnored",
              "shortDescription": {
                "text": "Method arguments will be replaced by event's arguments in generated code"
              },
              "fullDescription": {
                "text": "Method arguments will be replaced by event's arguments in generated code"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.MissingGridIndex",
              "shortDescription": {
                "text": "Missing grid column/row setter for non-first child"
              },
              "fullDescription": {
                "text": "Missing grid column/row setter for non-first child inside non-trivial grid"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.OverloadsCollision",
              "shortDescription": {
                "text": "Multiple overloads with same arguments count found"
              },
              "fullDescription": {
                "text": "Multiple overloads with same arguments count found"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.ParentIsOutOfCurrentComponentTree",
              "shortDescription": {
                "text": "Parent is outside the current component tree"
              },
              "fullDescription": {
                "text": "Parent is outside the current component tree"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.PathError",
              "shortDescription": {
                "text": "Path error"
              },
              "fullDescription": {
                "text": "Path error"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.PossibleNullReferenceException",
              "shortDescription": {
                "text": "Possible 'null' value in the path of binding without fallback value"
              },
              "fullDescription": {
                "text": "Dereferencing an expression which can have 'null' value in binding without specified fallback value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantAttachedProperty",
              "shortDescription": {
                "text": "Remove redundant attached property setter"
              },
              "fullDescription": {
                "text": "Attached property setter has no effect in the current context and can be removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantBindingModeAttribute",
              "shortDescription": {
                "text": "Binding mode is equal to default"
              },
              "fullDescription": {
                "text": "Binding mode is equal to default"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantCollectionProperty",
              "shortDescription": {
                "text": "Redundant empty collection property setter"
              },
              "fullDescription": {
                "text": "Empty collection property setter is redundant and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantFreezeAttribute",
              "shortDescription": {
                "text": "Redundant 'Freeze' attribute"
              },
              "fullDescription": {
                "text": "Freeze attribute is not used and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantGridDefinitions",
              "shortDescription": {
                "text": "Single grid row/column definition is redundant"
              },
              "fullDescription": {
                "text": "Single grid row/column definition is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantGridSpan",
              "shortDescription": {
                "text": "Single-cell grid column/row span is redundant"
              },
              "fullDescription": {
                "text": "Single-cell grid column/row span is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantModifiersAttribute",
              "shortDescription": {
                "text": "Redundant modifiers attribute"
              },
              "fullDescription": {
                "text": "Accessibility set by attribute coincides with the default one, thus the attribute can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantNameAttribute",
              "shortDescription": {
                "text": "Redundant name attribute"
              },
              "fullDescription": {
                "text": "Name attribute in resource declaration is negligible and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantNamespaceAlias",
              "shortDescription": {
                "text": "Redundant namespace alias"
              },
              "fullDescription": {
                "text": "Namespace alias is not required by code and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantPropertyTypeQualifier",
              "shortDescription": {
                "text": "Redundant property type qualifier"
              },
              "fullDescription": {
                "text": "Property owner type qualifier is redundant and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantResource",
              "shortDescription": {
                "text": "Redundant resource"
              },
              "fullDescription": {
                "text": "Resource is not used and can be safely removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantStyledValue",
              "shortDescription": {
                "text": "Property value is equal to style-provided"
              },
              "fullDescription": {
                "text": "Property value is equal to the value provided by explicit style and can be removed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantUpdateSourceTriggerAttribute",
              "shortDescription": {
                "text": "UpdateSourceTrigger=Default is redundant"
              },
              "fullDescription": {
                "text": "UpdateSourceTrigger=Default is redundant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeRedundancy"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RedundantXamarinFormsClassDeclaration",
              "shortDescription": {
                "text": "Resource cannot be accessed by class name because of x:Key attribute"
              },
              "fullDescription": {
                "text": "Resource cannot be accessed by class name because of x:Key attribute"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.ResourceFilePathCaseMismatch",
              "shortDescription": {
                "text": "Path to resource is case-sensitive"
              },
              "fullDescription": {
                "text": "Path to resource is case-sensitive"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.RoutedEventResolveError",
              "shortDescription": {
                "text": "Routed event descriptor field missing"
              },
              "fullDescription": {
                "text": "Routed event descriptor field missing or implementation does not comply with Microsoft style guide"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.StaticResourceNotResolved",
              "shortDescription": {
                "text": "Static resource not resolved"
              },
              "fullDescription": {
                "text": "Static resource not resolved"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.StyleClassNotFound",
              "shortDescription": {
                "text": "Style class not found"
              },
              "fullDescription": {
                "text": "Style class not found"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeInfo"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.StyleInvalidTargetType",
              "shortDescription": {
                "text": "Style target type is not convertible to base type"
              },
              "fullDescription": {
                "text": "Style declaration target type is not convertible to style base type"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.UnexpectedElement",
              "shortDescription": {
                "text": "Unexpected element error"
              },
              "fullDescription": {
                "text": "Unexpected element error"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.UnexpectedTextToken",
              "shortDescription": {
                "text": "Unexpected text token error"
              },
              "fullDescription": {
                "text": "Unexpected text token error"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.XKeyAttributeDisallowed",
              "shortDescription": {
                "text": "x:Key is allowed for resources and dictionary elements only"
              },
              "fullDescription": {
                "text": "x:Key is allowed for resources and dictionary elements only"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.XamlDuplicateDeviceFamilyTypeViewHighlighting",
              "shortDescription": {
                "text": "Duplicate device family view"
              },
              "fullDescription": {
                "text": "Duplicate device family view"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.XamlMismatchedDeviceFamilyViewClrNameHighlighting",
              "shortDescription": {
                "text": "DeviceFamily-specific view type name does not match generic type name"
              },
              "fullDescription": {
                "text": "DeviceFamily-specific view type name does not match generic type name"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.XamlRelativeSourceDefaultModeWarningHighlighting",
              "shortDescription": {
                "text": "RelativeSourceMode is not set explicitly"
              },
              "fullDescription": {
                "text": "Default RelativeSourceMode value is platform-specific, explicit specification is required to process RelativeSource usage unambiguously"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.XamlUnknownDeviceFamilyTypeHighlighting",
              "shortDescription": {
                "text": "Unknown DeviceFamily"
              },
              "fullDescription": {
                "text": "Unknown DeviceFamily"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xaml.XamlXamarinFormsDataTypeAndBindingContextTypeMismatchedHighlighting",
              "shortDescription": {
                "text": "Types in x:DataType and BindingContext mismatch"
              },
              "fullDescription": {
                "text": "Types in x:DataType and BindingContext are different"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "XAML.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ZeroIndexFromEnd",
              "shortDescription": {
                "text": "Index from end must be greater than zero; use '^1' to refer to the last element"
              },
              "fullDescription": {
                "text": "Using '^0' in the index expression causes 'System.ArgumentOutOfRangeException'; use '^1' to refer to the last element"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://www.jetbrains.com/help/resharper/ZeroIndexFromEnd.html",
              "help": {
                "text": "https://www.jetbrains.com/help/resharper/ZeroIndexFromEnd.html"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP.CodeSmell"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            }
          ],
          "taxa": [
            {
              "id": ".AspErrors",
              "name": "ASP Errors",
              "relationships": [
                {
                  "target": {
                    "id": "ASPX"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".AsxxErrors",
              "name": "Asxx Errors",
              "relationships": [
                {
                  "target": {
                    "id": "ASXX"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".BlockShadersErrors",
              "name": "Block Shaders Errors",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".CSharpErrors",
              "name": "C# Compiler Errors",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".CodeSmellStatic",
              "name": "Code Smell"
            },
            {
              "id": ".CppCompilerErrors",
              "name": "C++ Compiler Errors",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".CppUE4BuildErrors",
              "name": "C++ UE4 Build Errors",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".HtmlErrors",
              "name": "HTML Errors",
              "relationships": [
                {
                  "target": {
                    "id": "HTML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".RazorErrors",
              "name": "Razor Errors",
              "relationships": [
                {
                  "target": {
                    "id": "Razor"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".RazorWarnings",
              "name": "Razor Warnings",
              "relationships": [
                {
                  "target": {
                    "id": "Razor"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".RegExpErrors",
              "name": "Regular Expression Errors",
              "relationships": [
                {
                  "target": {
                    "id": "REGULAR_EXPRESSION"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".RoslynAnalyzers",
              "name": "Roslyn Analyzers"
            },
            {
              "id": ".SWEAFileErrors",
              "name": "Solution-Wide Analysis Errors"
            },
            {
              "id": ".UEIniErrors",
              "name": "Unreal Engine .ini Errors"
            },
            {
              "id": ".VBErrors",
              "name": "VB Compiler Errors",
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".WebConfigErrors",
              "name": "WebConfig Errors",
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".XAMLErrors",
              "name": "XAML Errors",
              "relationships": [
                {
                  "target": {
                    "id": "XAML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".XMLErrors",
              "name": "XML Errors",
              "relationships": [
                {
                  "target": {
                    "id": "XML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": ".XMLWarnings",
              "name": "XML Warnings",
              "relationships": [
                {
                  "target": {
                    "id": "XML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ASPX",
              "name": "Aspx"
            },
            {
              "id": "ASPX.BestPractice",
              "name": "Common Practices and Code Improvements",
              "relationships": [
                {
                  "target": {
                    "id": "ASPX"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ASPX.CodeRedundancy",
              "name": "Redundancies in Code",
              "relationships": [
                {
                  "target": {
                    "id": "ASPX"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ASPX.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "ASPX"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ASPX.DeclarationRedundancy",
              "name": "Redundancies in Symbol Declarations",
              "relationships": [
                {
                  "target": {
                    "id": "ASPX"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ASXX",
              "name": "HttpHandler or WebService"
            },
            {
              "id": "ASXX.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "ASXX"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ASXX.DeclarationRedundancy",
              "name": "Redundancies in Symbol Declarations",
              "relationships": [
                {
                  "target": {
                    "id": "ASXX"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Angular2HTML",
              "name": "Angular 2 HTML"
            },
            {
              "id": "Angular2HTML.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "Angular2HTML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Blazor",
              "name": "Blazor"
            },
            {
              "id": "Blazor.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "Blazor"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP",
              "name": "C/C++"
            },
            {
              "id": "CPP..NET Core",
              "name": ".NET Core",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.BestPractice",
              "name": "Common Practices and Code Improvements",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.Clang",
              "name": "Clang Diagnostics",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.ClangStaticAnalyzer",
              "name": "Clang Static Analyzer Checks",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.ClangTidy",
              "name": "Clang-Tidy Checks",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.CodeRedundancy",
              "name": "Redundancies in Code",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.CodeStyleIssues",
              "name": "Syntax Style",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.CompilerWarnings",
              "name": "Compiler Warnings",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.ConstraintViolation",
              "name": "Constraints Violations",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.FormattingIssues",
              "name": "Formatting",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.Unreal Engine",
              "name": "Unreal Engine",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CPP.UnrealHeaderTool",
              "name": "UnrealHeaderTool",
              "relationships": [
                {
                  "target": {
                    "id": "CPP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP",
              "name": "C#"
            },
            {
              "id": "CSHARP.BestPractice",
              "name": "Common Practices and Code Improvements",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.CodeInfo",
              "name": "Code Notification",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.CodeRedundancy",
              "name": "Redundancies in Code",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.CodeStyleIssues",
              "name": "Syntax Style",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.CompilerWarnings",
              "name": "Compiler Warnings",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.ConstraintViolation",
              "name": "Constraints Violations",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.DeclarationRedundancy",
              "name": "Redundancies in Symbol Declarations",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.FormattingIssues",
              "name": "Formatting",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.LanguageUsage",
              "name": "Language Usage Opportunities",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.Security",
              "name": "Security",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSHARP.Unreal Build System",
              "name": "Unreal Build System",
              "relationships": [
                {
                  "target": {
                    "id": "CSHARP"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "HTML.BestPractice",
              "name": "Common Practices and Code Improvements",
              "relationships": [
                {
                  "target": {
                    "id": "HTML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "HTML.CodeInfo",
              "name": "Code Notification",
              "relationships": [
                {
                  "target": {
                    "id": "HTML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "HTML.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "HTML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "REGULAR_EXPRESSION",
              "name": "RegExpBase"
            },
            {
              "id": "REGULAR_EXPRESSION.LanguageUsage",
              "name": "Language Usage Opportunities",
              "relationships": [
                {
                  "target": {
                    "id": "REGULAR_EXPRESSION"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RESX",
              "name": "ResX"
            },
            {
              "id": "RESX.CodeRedundancy",
              "name": "Redundancies in Code",
              "relationships": [
                {
                  "target": {
                    "id": "RESX"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RESX.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "RESX"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Razor",
              "name": "Razor"
            },
            {
              "id": "Razor.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "Razor"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RouteTemplate",
              "name": "ASP.NET route templates"
            },
            {
              "id": "RouteTemplate.CodeInfo",
              "name": "Code Notification",
              "relationships": [
                {
                  "target": {
                    "id": "RouteTemplate"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBASIC",
              "name": "VB.NET"
            },
            {
              "id": "VBASIC.BestPractice",
              "name": "Common Practices and Code Improvements",
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBASIC.CodeInfo",
              "name": "Code Notification",
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBASIC.CodeRedundancy",
              "name": "Redundancies in Code",
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBASIC.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBASIC.CompilerWarnings",
              "name": "Compiler Warnings",
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBASIC.ConstraintViolation",
              "name": "Constraints Violations",
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBASIC.DeclarationRedundancy",
              "name": "Redundancies in Symbol Declarations",
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VBASIC.LanguageUsage",
              "name": "Language Usage Opportunities",
              "relationships": [
                {
                  "target": {
                    "id": "VBASIC"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Web.Config",
              "name": "Web.Config"
            },
            {
              "id": "Web.Config.CodeInfo",
              "name": "Code Notification",
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Web.Config.CodeRedundancy",
              "name": "Redundancies in Code",
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Web.Config.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "Web.Config"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XAML",
              "name": "XAML"
            },
            {
              "id": "XAML.BestPractice",
              "name": "Common Practices and Code Improvements",
              "relationships": [
                {
                  "target": {
                    "id": "XAML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XAML.CodeInfo",
              "name": "Code Notification",
              "relationships": [
                {
                  "target": {
                    "id": "XAML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XAML.CodeRedundancy",
              "name": "Redundancies in Code",
              "relationships": [
                {
                  "target": {
                    "id": "XAML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XAML.CodeSmell",
              "name": "Potential Code Quality Issues",
              "relationships": [
                {
                  "target": {
                    "id": "XAML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XAML.CompilerWarnings",
              "name": "Compiler Warnings",
              "relationships": [
                {
                  "target": {
                    "id": "XAML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XAML.ConstraintViolation",
              "name": "Constraints Violations",
              "relationships": [
                {
                  "target": {
                    "id": "XAML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XAML.DeclarationRedundancy",
              "name": "Redundancies in Symbol Declarations",
              "relationships": [
                {
                  "target": {
                    "id": "XAML"
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XML",
              "name": "XML"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "invocations": [
        {
          "exitCode": 0,
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/henrikwidlund/unfoldedcircle-firetv.git",
          "revisionId": "88dd484e248cc178af359e4a526a082b798f12a3",
          "branch": "main",
          "properties": {
            "repoUrl": "https://github.com/henrikwidlund/unfoldedcircle-firetv.git",
            "lastAuthorName": "Henrik Widlund",
            "vcsType": "Git",
            "lastAuthorEmail": "4659350+henrikwidlund@users.noreply.github.com"
          }
        }
      ],
      "originalUriBaseIds": {},
      "artifacts": [
        {
          "location": {
            "uri": "src/Dns/EdnsDAUOption.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/EdnsDHUOption.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/EdnsN3UOption.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/NSEC3Record.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/NSECRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/OPTRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/TXTRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Mdns/MulticastService.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Mdns/RecentMessages.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Mdns/ServiceProfile.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/UnfoldedCircle.Models/Sync/AuthRequestMsgData.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/UnfoldedCircle.Models/Sync/MediaPlayerEntityCommandParams.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Mdns/MulticastClient.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Mdns/ServiceDiscovery.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/Message.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/DnsType.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/AAAARecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/AFSDBRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/DnsClass.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/MessageStatus.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/CNAMERecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/EdsnOptionType.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/SecurityAlgorithm.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/DNAMERecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/DNSKEYRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/ExtendedDNSError.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/DSRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/ResourceRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/EdnsNSIDOption.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/TSIGRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/DigestType.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/HINFORecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/IPAddressExtensions.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/WireWriter.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/MXRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/NSEC3PARAMRecord%20.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/NSEC3s.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/NSRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/NULLRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/RRSIGRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/PTRRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/UpdateMessage.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/RPRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/PresentationReader.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/WireReader.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/SOARecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/SRVRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/TKEYRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/PresentationWriter.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/AddressRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/DnsObject.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/Resolving/ConcurrentSet.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/UpdateResourceList.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/Resolving/NameServer.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/DomainName.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/UpdatePrerequisiteList.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/Resolving/CachedNameServer.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/EdnsOptionRegistry%20.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/UnknownEdnsOption.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/UnknownRecord.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/EdnsErrorOption.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/EdnsPaddingOption.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/EdnsKeepaliveOption.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/EdnsOption.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/Resolving/Node.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/SecurityAlgorithmRegistry.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/DigestRegistry.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/UnfoldedCircle.FireTV/FireTVClientFactory.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/UnfoldedCircle.Server/Configuration/ConfigurationService.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/UnfoldedCircle.Server/WebSocket/UnfoldedCircleMiddleware.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/UnfoldedCircle.Server/WebSocket/UnfoldedCircleWebSocketHandler.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/UnfoldedCircle.Generators.Attributes/EnumJsonConverterAttribute.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Mdns/NetworkInterfaceEventArgs.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Mdns/ServiceInstanceDiscoveryEventArgs.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Mdns/ServiceInstanceShutdownEventArgs.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/KeyExchangeMode.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/MessageOperation.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Mdns/IServiceDiscovery.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/Resolving/Catalog.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/ResourceRegistry.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Mdns/IMulticastService.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/IPresentationSerializer.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/IWireSerializer.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/Dns/IResolver.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/UnfoldedCircle.Models/Sync/AuthRequestMsg.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        },
        {
          "location": {
            "uri": "src/UnfoldedCircle.Models/Sync/EntityCommandMsg.cs",
            "uriBaseId": "solutionDir"
          },
          "hashes": {}
        }
      ],
      "results": [
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsDAUOption.cs",
                  "uriBaseId": "solutionDir"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 54,
                  "endLine": 29,
                  "endColumn": 58,
                  "charOffset": 792,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 1,
                  "charOffset": 722,
                  "charLength": 77,
                  "snippet": {
                    "text": "    /// </value>\n    public List<SecurityAlgorithm> Algorithms { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8C20A08D0E51935CEDBE4689D5346BBEB2B6497A234DEC5D2A2826820C15F39B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsDHUOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 47,
                  "endLine": 30,
                  "endColumn": 51,
                  "charOffset": 808,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 1,
                  "charOffset": 745,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </value>\n    public List<DigestType> Algorithms { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F4EFB2599C0E88B3F1969648D0055A274FB96A75BD8EEEDBC871946282C47CE7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsDHUOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 47,
                  "endLine": 30,
                  "endColumn": 51,
                  "charOffset": 808,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 1,
                  "charOffset": 745,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </value>\n    public List<DigestType> Algorithms { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F4EFB2599C0E88B3F1969648D0055A274FB96A75BD8EEEDBC871946282C47CE7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3Record.cs",
                  "uriBaseId": "solutionDir",
                  "index": 3
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 39,
                  "endLine": 53,
                  "endColumn": 43,
                  "charOffset": 1675,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 1,
                  "charOffset": 1620,
                  "charLength": 68,
                  "snippet": {
                    "text": "    /// </value>\n    public List<DnsType> Types { get; set; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7E11F1C567096077E4896E0440A71D121BDA5762A1DCDDF70A31D5B5824DD8FD"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3Record.cs",
                  "uriBaseId": "solutionDir",
                  "index": 3
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 39,
                  "endLine": 53,
                  "endColumn": 43,
                  "charOffset": 1675,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 1,
                  "charOffset": 1620,
                  "charLength": 68,
                  "snippet": {
                    "text": "    /// </value>\n    public List<DnsType> Types { get; set; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7E11F1C567096077E4896E0440A71D121BDA5762A1DCDDF70A31D5B5824DD8FD"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/OPTRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 5
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 44,
                  "endLine": 125,
                  "endColumn": 48,
                  "charOffset": 3974,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "endLine": 126,
                  "endColumn": 1,
                  "charOffset": 3914,
                  "charLength": 73,
                  "snippet": {
                    "text": "    /// </value>\n    public List<EdnsOption> Options { get; set; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6B23EDFA48D51368C77F95A2C6D6A6EBEE73AC32BDC308ECE60D46B66718EA2E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TXTRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 6
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 40,
                  "endLine": 22,
                  "endColumn": 44,
                  "charOffset": 553,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 495,
                  "charLength": 71,
                  "snippet": {
                    "text": "    /// </summary>\n    public List<string> Strings { get; set; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25FDCB0CEBF7C01EF323B3535F3A5816D13D4F64DFD1BB5D202ECD769A8F80D6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/MulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 7
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 52,
                  "endLine": 191,
                  "endColumn": 56,
                  "charOffset": 6712,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "endLine": 192,
                  "endColumn": 1,
                  "charOffset": 6628,
                  "charLength": 99,
                  "snippet": {
                    "text": "    /// Defaults to <b>true</b>.\n    public static bool EnableUnicastAnswers { get; set; } = true;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5F19100134746173B447A232A3BEB42A14E6BACD1C45EFEA0A3F16BB4721B453"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/RecentMessages.cs",
                  "uriBaseId": "solutionDir",
                  "index": 8
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 37,
                  "endLine": 38,
                  "endColumn": 42,
                  "charOffset": 1156,
                  "charLength": 5,
                  "snippet": {
                    "text": "init;"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 5,
                  "charOffset": 1101,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// </summary>\n    public TimeSpan Interval { get; init; } = TimeSpan.FromSeconds(1);\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "118154C401C809E533E14FD6B6523A3AD9805C167634850763FAC988689B3CCE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceProfile.cs",
                  "uriBaseId": "solutionDir",
                  "index": 9
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 50,
                  "endLine": 237,
                  "endColumn": 54,
                  "charOffset": 8366,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 236,
                  "startColumn": 1,
                  "endLine": 238,
                  "endColumn": 1,
                  "charOffset": 8298,
                  "charLength": 81,
                  "snippet": {
                    "text": "    /// </remarks>\n    public List<ResourceRecord> Resources { get; set; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0E963B4C2E977645BF0C8A865E88A67B7EEDC09A0B4B63F2AD14CD9D9D629E99"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceProfile.cs",
                  "uriBaseId": "solutionDir",
                  "index": 9
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 41,
                  "endLine": 246,
                  "endColumn": 45,
                  "charOffset": 8678,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "endLine": 247,
                  "endColumn": 1,
                  "charOffset": 8564,
                  "charLength": 127,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc6763#section-7.1\"/>\n    public List<string> Subtypes { get; set; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CEF0EA3DF066D9498EAA47FBDB5ACE5719CB73D294BAB32A46A20F976D969DB6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceProfile.cs",
                  "uriBaseId": "solutionDir",
                  "index": 9
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 38,
                  "endLine": 252,
                  "endColumn": 42,
                  "charOffset": 8897,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "endLine": 253,
                  "endColumn": 1,
                  "charOffset": 8841,
                  "charLength": 63,
                  "snippet": {
                    "text": "    /// </summary>\n    public bool SharedProfile { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6555F5FB26BAC59BA3298FA5547DD326D14BFBAAEFA09BFC3293DAC307147E81"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ClassNeverInstantiated.Global",
          "ruleIndex": 329,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Record 'AuthRequestMsgData' is never instantiated"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/AuthRequestMsgData.cs",
                  "uriBaseId": "solutionDir",
                  "index": 10
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 15,
                  "endLine": 3,
                  "endColumn": 33,
                  "charOffset": 53,
                  "charLength": 18,
                  "snippet": {
                    "text": "AuthRequestMsgData"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 2,
                  "charOffset": 38,
                  "charLength": 35,
                  "snippet": {
                    "text": "\npublic record AuthRequestMsgData\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D5454B9779E4967E6799D1E7053C02ACD9325A039A22A414044BC364111C16F7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ClassNeverInstantiated.Global",
          "ruleIndex": 329,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Record 'MediaPlayerEntityCommandParams' is never instantiated"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/MediaPlayerEntityCommandParams.cs",
                  "uriBaseId": "solutionDir",
                  "index": 11
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 15,
                  "endLine": 5,
                  "endColumn": 45,
                  "charOffset": 90,
                  "charLength": 30,
                  "snippet": {
                    "text": "MediaPlayerEntityCommandParams"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 2,
                  "charOffset": 75,
                  "charLength": 47,
                  "snippet": {
                    "text": "\npublic record MediaPlayerEntityCommandParams\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4C30AF4C39DE9DFA7128905CA97AA401B64446CD9D7F2D817521CBEFF15EEE0F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ClassWithVirtualMembersNeverInherited.Global",
          "ruleIndex": 331,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class 'MulticastClient' has some virtual members but no inheritors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/MulticastClient.cs",
                  "uriBaseId": "solutionDir",
                  "index": 12
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 16,
                  "endLine": 19,
                  "endColumn": 31,
                  "charOffset": 431,
                  "charLength": 15,
                  "snippet": {
                    "text": "MulticastClient"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 2,
                  "charOffset": 401,
                  "charLength": 61,
                  "snippet": {
                    "text": "/// </summary>\ninternal class MulticastClient : IDisposable\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43C0DCA23B22ED1CCC98D65B1525F124EDF39A039EF857234AD3752717C62B0D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ClassWithVirtualMembersNeverInherited.Global",
          "ruleIndex": 331,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class 'MulticastService' has some virtual members but no inheritors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/MulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 7
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 14,
                  "endLine": 27,
                  "endColumn": 30,
                  "charOffset": 789,
                  "charLength": 16,
                  "snippet": {
                    "text": "MulticastService"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 2,
                  "charOffset": 761,
                  "charLength": 66,
                  "snippet": {
                    "text": "/// </remarks>\npublic class MulticastService : IMulticastService\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63B7FD351E02FC9E1716690455B5B33EBC50451ADE72521E0671C76B9C82945E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ClassWithVirtualMembersNeverInherited.Global",
          "ruleIndex": 331,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class 'ServiceDiscovery' has some virtual members but no inheritors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 13
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 14,
                  "endLine": 17,
                  "endColumn": 30,
                  "charOffset": 518,
                  "charLength": 16,
                  "snippet": {
                    "text": "ServiceDiscovery"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 2,
                  "charOffset": 402,
                  "charLength": 154,
                  "snippet": {
                    "text": "/// <seealso href=\"https://tools.ietf.org/html/rfc6763\">RFC 6763 DNS-Based Service Discovery</seealso>\npublic class ServiceDiscovery : IServiceDiscovery\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "98CE66187EADBFBE494FF5B93F4FC95E1F87597400EB159375998B586F5A6CCE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceProfile.cs",
                  "uriBaseId": "solutionDir",
                  "index": 9
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 41,
                  "endLine": 246,
                  "endColumn": 45,
                  "charOffset": 8678,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "endLine": 247,
                  "endColumn": 1,
                  "charOffset": 8564,
                  "charLength": 127,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc6763#section-7.1\"/>\n    public List<string> Subtypes { get; set; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CEF0EA3DF066D9498EAA47FBDB5ACE5719CB73D294BAB32A46A20F976D969DB6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'AA' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Aa'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 17,
                  "endLine": 140,
                  "endColumn": 19,
                  "charOffset": 4556,
                  "charLength": 2,
                  "snippet": {
                    "text": "AA"
                  }
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "endLine": 141,
                  "endColumn": 1,
                  "charOffset": 4523,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// </value>\n    public bool AA { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C12D2EC27B450A3BD1C78BB79BD71A3DD608282AFECC6BDFBF3ADC9323A6ACCB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'AAAA' does not match rule 'Enum members'. Suggested name is 'Aaaa'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 5,
                  "endLine": 194,
                  "endColumn": 9,
                  "charOffset": 5768,
                  "charLength": 4,
                  "snippet": {
                    "text": "AAAA"
                  }
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "endLine": 195,
                  "endColumn": 1,
                  "charOffset": 5727,
                  "charLength": 52,
                  "snippet": {
                    "text": "    /// <seealso cref=\"AAAARecord\"/>\n    AAAA = 28,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C6C651E6EFAC00C674E41BC9FAE82D54CC0E1060D97472A465CFF2DA49A708F9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'AAAARecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'AaaaRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/AAAARecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 16
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 14,
                  "endLine": 6,
                  "endColumn": 24,
                  "charOffset": 122,
                  "charLength": 10,
                  "snippet": {
                    "text": "AAAARecord"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 2,
                  "charOffset": 94,
                  "charLength": 56,
                  "snippet": {
                    "text": "/// </summary>\npublic class AAAARecord : AddressRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16A0F09C65EDFC8E8EF0E553F21463C47CB6DCE08C1527DFCA3ECB5FFDC7D021"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'AD' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Ad'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 17,
                  "endLine": 195,
                  "endColumn": 19,
                  "charOffset": 6394,
                  "charLength": 2,
                  "snippet": {
                    "text": "AD"
                  }
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "endLine": 196,
                  "endColumn": 1,
                  "charOffset": 6359,
                  "charLength": 52,
                  "snippet": {
                    "text": "    /// </remarks>\n    public bool AD { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "479640108F02691FDDD2ECDE3217D33749A25133E67038102FA08B48390CFC1B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'AFSDB' does not match rule 'Enum members'. Suggested name is 'Afsdb'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 5,
                  "endLine": 133,
                  "endColumn": 10,
                  "charOffset": 4162,
                  "charLength": 5,
                  "snippet": {
                    "text": "AFSDB"
                  }
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "endLine": 134,
                  "endColumn": 1,
                  "charOffset": 4120,
                  "charLength": 54,
                  "snippet": {
                    "text": "    /// <seealso cref=\"AFSDBRecord\"/>\n    AFSDB = 18,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A416089B951A2F98585C7C863D5AE9169824FBB5AAC013B70A5C6C8BE904F1C1"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'AFSDBRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'AfsdbRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/AFSDBRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 17
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 14,
                  "endLine": 10,
                  "endColumn": 25,
                  "charOffset": 258,
                  "charLength": 11,
                  "snippet": {
                    "text": "AFSDBRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 2,
                  "charOffset": 187,
                  "charLength": 101,
                  "snippet": {
                    "text": "/// <seealso href=\"https://tools.ietf.org/html/rfc1183\"/>\npublic class AFSDBRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "994990BEB834C87B383AFEABD66292259EFB41CB5D10474379BCE9A97ED02EBE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ANY' does not match rule 'Enum members'. Suggested name is 'Any'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsClass.cs",
                  "uriBaseId": "solutionDir",
                  "index": 18
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "endLine": 42,
                  "endColumn": 8,
                  "charOffset": 947,
                  "charLength": 3,
                  "snippet": {
                    "text": "ANY"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 2,
                  "charOffset": 902,
                  "charLength": 56,
                  "snippet": {
                    "text": "    /// <seealso cref=\"Question.Class\"/>\n    ANY = 255\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C52158AC84C381B0BA0633078B806722BEFC5C6F8452EB5DB7F731D1504BFB04"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ANY' does not match rule 'Enum members'. Suggested name is 'Any'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 5,
                  "endLine": 302,
                  "endColumn": 8,
                  "charOffset": 9035,
                  "charLength": 3,
                  "snippet": {
                    "text": "ANY"
                  }
                },
                "contextRegion": {
                  "startLine": 301,
                  "startColumn": 1,
                  "endLine": 303,
                  "endColumn": 1,
                  "charOffset": 8952,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1035\">RFC 1035</seealso>\n    ANY = 255,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8130AEF4E5334BD1E4D5F696F7EA924142196BB29F8457E2557E1D4149A4F0C7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'AXFR' does not match rule 'Enum members'. Suggested name is 'Axfr'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 5,
                  "endLine": 283,
                  "endColumn": 9,
                  "charOffset": 8449,
                  "charLength": 4,
                  "snippet": {
                    "text": "AXFR"
                  }
                },
                "contextRegion": {
                  "startLine": 282,
                  "startColumn": 1,
                  "endLine": 284,
                  "endColumn": 1,
                  "charOffset": 8366,
                  "charLength": 95,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1035\">RFC 1035</seealso>\n    AXFR = 252,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D9C2C97B95E786175B0637B9EFFF3DBE80659309AFEDD7D10C8BDB4C38A64D26"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'BADALG' does not match rule 'Enum members'. Suggested name is 'Badalg'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MessageStatus.cs",
                  "uriBaseId": "solutionDir",
                  "index": 19
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 5,
                  "endLine": 101,
                  "endColumn": 11,
                  "charOffset": 2311,
                  "charLength": 6,
                  "snippet": {
                    "text": "BADALG"
                  }
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "endLine": 102,
                  "endColumn": 2,
                  "charOffset": 2288,
                  "charLength": 36,
                  "snippet": {
                    "text": "    /// </summary>\n    BADALG = 21\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1B7D302ECADBABF2DAAB6B94613EAC82FF9BD5A458932B498DDC8D47FCD6A624"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'BADMODE' does not match rule 'Enum members'. Suggested name is 'Badmode'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MessageStatus.cs",
                  "uriBaseId": "solutionDir",
                  "index": 19
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 5,
                  "endLine": 91,
                  "endColumn": 12,
                  "charOffset": 2120,
                  "charLength": 7,
                  "snippet": {
                    "text": "BADMODE"
                  }
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "endLine": 92,
                  "endColumn": 1,
                  "charOffset": 2097,
                  "charLength": 37,
                  "snippet": {
                    "text": "    /// </summary>\n    BADMODE = 19,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7EE220B994CEED823AFD7981AAE31DCF24B66310EFBDED9DD367A8D08A4CC21E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'BADNAME' does not match rule 'Enum members'. Suggested name is 'Badname'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MessageStatus.cs",
                  "uriBaseId": "solutionDir",
                  "index": 19
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "endLine": 96,
                  "endColumn": 12,
                  "charOffset": 2213,
                  "charLength": 7,
                  "snippet": {
                    "text": "BADNAME"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 97,
                  "endColumn": 1,
                  "charOffset": 2190,
                  "charLength": 37,
                  "snippet": {
                    "text": "    /// </summary>\n    BADNAME = 20,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "DD4AB5709CC1DE7366CD54A19DCBDC632BA4EC66A1C7D81CC7B4C8B566CEB784"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'CAA' does not match rule 'Enum members'. Suggested name is 'Caa'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 5,
                  "endLine": 314,
                  "endColumn": 8,
                  "charOffset": 9409,
                  "charLength": 3,
                  "snippet": {
                    "text": "CAA"
                  }
                },
                "contextRegion": {
                  "startLine": 313,
                  "startColumn": 1,
                  "endLine": 315,
                  "endColumn": 2,
                  "charOffset": 9326,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc6844\">RFC 6844</seealso>\n    CAA = 257\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8D2CB654C0E34224E57A3981D8293AAB88F713DE44A7468DC27A4DEA771B3A92"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'CD' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Cd'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 17,
                  "endLine": 208,
                  "endColumn": 19,
                  "charOffset": 6836,
                  "charLength": 2,
                  "snippet": {
                    "text": "CD"
                  }
                },
                "contextRegion": {
                  "startLine": 207,
                  "startColumn": 1,
                  "endLine": 209,
                  "endColumn": 1,
                  "charOffset": 6801,
                  "charLength": 52,
                  "snippet": {
                    "text": "    /// </remarks>\n    public bool CD { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54023948E5249C337C6DEA351081058F38B5ACE70BE72C3651475F7CBD295B28"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'CH' does not match rule 'Enum members'. Suggested name is 'Ch'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsClass.cs",
                  "uriBaseId": "solutionDir",
                  "index": 18
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 5,
                  "endLine": 26,
                  "endColumn": 7,
                  "charOffset": 640,
                  "charLength": 2,
                  "snippet": {
                    "text": "CH"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 1,
                  "charOffset": 617,
                  "charLength": 31,
                  "snippet": {
                    "text": "    /// </summary>\n    CH = 3,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ABBBBBA3751A2E36061D95ECB7CA3FCBA45314D347A8ABA7ECDCC876AD8D580D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'CNAME' does not match rule 'Enum members'. Suggested name is 'Cname'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "endLine": 43,
                  "endColumn": 10,
                  "charOffset": 1219,
                  "charLength": 5,
                  "snippet": {
                    "text": "CNAME"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 1,
                  "charOffset": 1177,
                  "charLength": 53,
                  "snippet": {
                    "text": "    /// <seealso cref=\"CNAMERecord\"/>\n    CNAME = 5,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93A018DDD1E914C67231A7CABAFCBD99C4835FABF0CC1CA4DC4FBEECE0197ACB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'CNAMERecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'CnameRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/CNAMERecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 20
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 14,
                  "endLine": 11,
                  "endColumn": 25,
                  "charOffset": 359,
                  "charLength": 11,
                  "snippet": {
                    "text": "CNAMERecord"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 2,
                  "charOffset": 331,
                  "charLength": 58,
                  "snippet": {
                    "text": "/// </remarks>\npublic class CNAMERecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8DD75D33320383A62F170AE2BBF994BA2858B830C9CAE66477E6BEE9B3C7A4AD"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'CS' does not match rule 'Enum members'. Suggested name is 'Cs'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsClass.cs",
                  "uriBaseId": "solutionDir",
                  "index": 18
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "endLine": 21,
                  "endColumn": 7,
                  "charOffset": 563,
                  "charLength": 2,
                  "snippet": {
                    "text": "CS"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 1,
                  "charOffset": 540,
                  "charLength": 31,
                  "snippet": {
                    "text": "    /// </summary>\n    CS = 2,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "715F962A849DAA67A87DDF7B5A8E065E9AE8AA825BDB7E68897BDB035E766337"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DAU' does not match rule 'Enum members'. Suggested name is 'Dau'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "endLine": 31,
                  "endColumn": 8,
                  "charOffset": 942,
                  "charLength": 3,
                  "snippet": {
                    "text": "DAU"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 1,
                  "charOffset": 876,
                  "charLength": 75,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc6975\"/>\n    DAU = 5,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3B103D446E179D31CEB1BB62CBA73C01A2F53871EC712819EB1693BE6A4026FF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DELETE' does not match rule 'Enum members'. Suggested name is 'Delete'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 11,
                  "charOffset": 575,
                  "charLength": 6,
                  "snippet": {
                    "text": "DELETE"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 1,
                  "charOffset": 552,
                  "charLength": 35,
                  "snippet": {
                    "text": "    /// </summary>\n    DELETE = 0,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6B3C1843083B10344F17BD3D60F4E1F1A5BABCD56E0DE91F7B9ED1B4EFF6FB2D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DH' does not match rule 'Enum members'. Suggested name is 'Dh'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "endLine": 31,
                  "endColumn": 7,
                  "charOffset": 886,
                  "charLength": 2,
                  "snippet": {
                    "text": "DH"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 1,
                  "charOffset": 863,
                  "charLength": 31,
                  "snippet": {
                    "text": "    /// </summary>\n    DH = 2,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00373DBF42E57B9D9722B7CE02D12DF6C26F57E55D8179AA7E82EB574B4C7014"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DHU' does not match rule 'Enum members'. Suggested name is 'Dhu'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "endLine": 37,
                  "endColumn": 8,
                  "charOffset": 1085,
                  "charLength": 3,
                  "snippet": {
                    "text": "DHU"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 1,
                  "charOffset": 1019,
                  "charLength": 75,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc6975\"/>\n    DHU = 6,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40499579D4EE320E5153151B441035C4AC7E6FA8D07D781BFDA519BDBC0F63D9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DNAME' does not match rule 'Enum members'. Suggested name is 'Dname'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 5,
                  "endLine": 214,
                  "endColumn": 10,
                  "charOffset": 6407,
                  "charLength": 5,
                  "snippet": {
                    "text": "DNAME"
                  }
                },
                "contextRegion": {
                  "startLine": 213,
                  "startColumn": 1,
                  "endLine": 215,
                  "endColumn": 1,
                  "charOffset": 6369,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// <see cref=\"DNAMERecord\"/>\n    DNAME = 39,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F9BFEB2BC859BEA9C9A88D50613E37963DAAE82CE5E71EAADF32CA6899138A42"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DNAMERecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'DnameRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DNAMERecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 23
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 14,
                  "endLine": 11,
                  "endColumn": 25,
                  "charOffset": 366,
                  "charLength": 11,
                  "snippet": {
                    "text": "DNAMERecord"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 2,
                  "charOffset": 338,
                  "charLength": 58,
                  "snippet": {
                    "text": "/// </remarks>\npublic class DNAMERecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1D031C502F67A47AC1D5A63BB7E681A0454FD4A7F9EFF6E7C0204B75CBF4BC1C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DNSKEY' does not match rule 'Enum members'. Suggested name is 'Dnskey'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 5,
                  "endLine": 249,
                  "endColumn": 11,
                  "charOffset": 7437,
                  "charLength": 6,
                  "snippet": {
                    "text": "DNSKEY"
                  }
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "endLine": 250,
                  "endColumn": 1,
                  "charOffset": 7394,
                  "charLength": 56,
                  "snippet": {
                    "text": "    /// <seealso cref=\"DNSKEYRecord\"/>\n    DNSKEY = 48,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "EA8B22862CE02852C868034EB3C241C84E069B9BEED1E7993ACE29B2DCE9DECE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DNSKEYRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'DnskeyRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DNSKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 24
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 14,
                  "endLine": 8,
                  "endColumn": 26,
                  "charOffset": 177,
                  "charLength": 12,
                  "snippet": {
                    "text": "DNSKEYRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 2,
                  "charOffset": 149,
                  "charLength": 59,
                  "snippet": {
                    "text": "/// </summary>\npublic class DNSKEYRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34B206C064BD18287EE6B44AD3EBADBE580F682951D3D7B3816D8A40ACD0B4F1"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DNSKeyMissing' does not match rule 'Enum members'. Suggested name is 'DnsKeyMissing'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "endLine": 58,
                  "endColumn": 18,
                  "charOffset": 2226,
                  "charLength": 13,
                  "snippet": {
                    "text": "DNSKeyMissing"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 1,
                  "charOffset": 2203,
                  "charLength": 44,
                  "snippet": {
                    "text": "    /// </summary>\n    DNSKeyMissing = 0x9,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E98E7CA747C69CFC42B13D7A55E4F64DCBCAD74028F7D4DF530CADC431DFE165"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DNSSECBogus' does not match rule 'Enum members'. Suggested name is 'DnssecBogus'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "endLine": 43,
                  "endColumn": 16,
                  "charOffset": 1649,
                  "charLength": 11,
                  "snippet": {
                    "text": "DNSSECBogus"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 1,
                  "charOffset": 1626,
                  "charLength": 42,
                  "snippet": {
                    "text": "    /// </summary>\n    DNSSECBogus = 0x6,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "173E9D19EF62F2F808AEDA7731315C01B9736CDE52D8256EE23C066524705F24"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DNSSECIndeterminate' does not match rule 'Enum members'. Suggested name is 'DnssecIndeterminate'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 24,
                  "charOffset": 1478,
                  "charLength": 19,
                  "snippet": {
                    "text": "DNSSECIndeterminate"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 1,
                  "charOffset": 1455,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// </summary>\n    DNSSECIndeterminate = 0x5,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F29428B326A40FD22B2595FE22C212D07396E292E19C1F3F13F6DA05383EED68"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DO' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Do'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 17,
                  "endLine": 222,
                  "endColumn": 19,
                  "charOffset": 7398,
                  "charLength": 2,
                  "snippet": {
                    "text": "DO"
                  }
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 1,
                  "endLine": 223,
                  "endColumn": 6,
                  "charOffset": 7320,
                  "charLength": 86,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc3225\"/>\n    public bool DO\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D6D9E5675329756DDE1DF10BAB87EE538E515EF7C86CF1FD01E5D575B28E93BE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DO' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Do'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 17,
                  "endLine": 222,
                  "endColumn": 19,
                  "charOffset": 7398,
                  "charLength": 2,
                  "snippet": {
                    "text": "DO"
                  }
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 1,
                  "endLine": 223,
                  "endColumn": 6,
                  "charOffset": 7320,
                  "charLength": 86,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc3225\"/>\n    public bool DO\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D6D9E5675329756DDE1DF10BAB87EE538E515EF7C86CF1FD01E5D575B28E93BE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DS' does not match rule 'Enum members'. Suggested name is 'Ds'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 5,
                  "endLine": 228,
                  "endColumn": 7,
                  "charOffset": 6779,
                  "charLength": 2,
                  "snippet": {
                    "text": "DS"
                  }
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 1,
                  "endLine": 229,
                  "endColumn": 1,
                  "charOffset": 6744,
                  "charLength": 44,
                  "snippet": {
                    "text": "    /// <see cref=\"DSRecord\"/>\n    DS = 43,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D12918A87D12415086E489C67EC7A44D567A6A0791693EDCEE42B465B28374B5"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DSA' does not match rule 'Enum members'. Suggested name is 'Dsa'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 5,
                  "endLine": 36,
                  "endColumn": 8,
                  "charOffset": 954,
                  "charLength": 3,
                  "snippet": {
                    "text": "DSA"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 1,
                  "charOffset": 931,
                  "charLength": 32,
                  "snippet": {
                    "text": "    /// </summary>\n    DSA = 3,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "42D7899E7D31C4944C9E21898B2BE1D1ECC900AE27CF5038A3C6795BC548944B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DSANSEC3SHA1' does not match rule 'Enum members'. Suggested name is 'Dsansec3Sha1'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 5,
                  "endLine": 46,
                  "endColumn": 17,
                  "charOffset": 1103,
                  "charLength": 12,
                  "snippet": {
                    "text": "DSANSEC3SHA1"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 1,
                  "charOffset": 1080,
                  "charLength": 41,
                  "snippet": {
                    "text": "    /// </summary>\n    DSANSEC3SHA1 = 6,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B92F4687E01E55E5C0C1E58E6A2D79DD8E81D9C2FD7AC8DC2E3508BEBCABE595"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DSRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'DsRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DSRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 26
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 14,
                  "endLine": 11,
                  "endColumn": 22,
                  "charOffset": 242,
                  "charLength": 8,
                  "snippet": {
                    "text": "DSRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 2,
                  "charOffset": 214,
                  "charLength": 55,
                  "snippet": {
                    "text": "/// </remarks>\npublic class DSRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "202151507E4DF4778EA3A54A1CCE761F57A6F06062DA9830981CFE99840B0F98"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DefaultHostTTL' does not match rule 'public_static_readonly_fields_should_be_pascalcase'. Suggested name is 'DefaultHostTtl'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 27
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 37,
                  "endLine": 31,
                  "endColumn": 51,
                  "charOffset": 1024,
                  "charLength": 14,
                  "snippet": {
                    "text": "DefaultHostTTL"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 1,
                  "charOffset": 969,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// </remarks>\n    public static readonly TimeSpan DefaultHostTTL = TimeSpan.FromDays(1);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F2402F8F8E6743EA27324B2FBF6B7C3A30BE77B17E138BBE07BD3DC287D429E4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DefaultTTL' does not match rule 'public_static_readonly_fields_should_be_pascalcase'. Suggested name is 'DefaultTtl'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 27
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 37,
                  "endLine": 19,
                  "endColumn": 47,
                  "charOffset": 654,
                  "charLength": 10,
                  "snippet": {
                    "text": "DefaultTTL"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 1,
                  "charOffset": 601,
                  "charLength": 88,
                  "snippet": {
                    "text": "    /// </value>\n    public static readonly TimeSpan DefaultTTL = TimeSpan.FromDays(1);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "DF555D87BEE102D7205484A2AA1BB4306D784871EC10FBAD74D57D49074FEDCE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ECCGOST' does not match rule 'Enum members'. Suggested name is 'Eccgost'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 5,
                  "endLine": 66,
                  "endColumn": 12,
                  "charOffset": 1439,
                  "charLength": 7,
                  "snippet": {
                    "text": "ECCGOST"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 1,
                  "charOffset": 1416,
                  "charLength": 37,
                  "snippet": {
                    "text": "    /// </summary>\n    ECCGOST = 12,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15439F73955480C5AC0E0FFE5EE16BCC3DFA341758F4C622301F2B069425310D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ECDSAP256SHA256' does not match rule 'Enum members'. Suggested name is 'Ecdsap256Sha256'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 5,
                  "endLine": 71,
                  "endColumn": 20,
                  "charOffset": 1535,
                  "charLength": 15,
                  "snippet": {
                    "text": "ECDSAP256SHA256"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 1,
                  "charOffset": 1512,
                  "charLength": 45,
                  "snippet": {
                    "text": "    /// </summary>\n    ECDSAP256SHA256 = 13,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F77E41439F1A6F230E605D8743D2D8C58780E35C3EF398485EDBD084A38D2FD7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ECDSAP384SHA384' does not match rule 'Enum members'. Suggested name is 'Ecdsap384Sha384'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 5,
                  "endLine": 76,
                  "endColumn": 20,
                  "charOffset": 1639,
                  "charLength": 15,
                  "snippet": {
                    "text": "ECDSAP384SHA384"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "endLine": 77,
                  "endColumn": 1,
                  "charOffset": 1616,
                  "charLength": 45,
                  "snippet": {
                    "text": "    /// </summary>\n    ECDSAP384SHA384 = 14,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5F295D72A89E71C566739035EE331B595AF6A5A88339224C8D89A5BF057FB6D1"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ED25519' does not match rule 'Enum members'. Suggested name is 'Ed25519'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 5,
                  "endLine": 81,
                  "endColumn": 12,
                  "charOffset": 1720,
                  "charLength": 7,
                  "snippet": {
                    "text": "ED25519"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 1,
                  "charOffset": 1697,
                  "charLength": 37,
                  "snippet": {
                    "text": "    /// </summary>\n    ED25519 = 15,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E03F5BBBFD2F7AFEDE0315F86D3379965B47E89EF62534062E7EBBB9C6DFFB36"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ED448' does not match rule 'Enum members'. Suggested name is 'Ed448'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 5,
                  "endLine": 86,
                  "endColumn": 10,
                  "charOffset": 1791,
                  "charLength": 5,
                  "snippet": {
                    "text": "ED448"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 1,
                  "charOffset": 1768,
                  "charLength": 35,
                  "snippet": {
                    "text": "    /// </summary>\n    ED448 = 16,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7FB7EE4306BB069719CC65D7EE78311D2D329939F863ECB995182183F3DFE0DF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'EdnsDAUOption' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'EdnsDauOption'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsDAUOption.cs",
                  "uriBaseId": "solutionDir"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 14,
                  "endLine": 12,
                  "endColumn": 27,
                  "charOffset": 326,
                  "charLength": 13,
                  "snippet": {
                    "text": "EdnsDAUOption"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 2,
                  "charOffset": 298,
                  "charLength": 56,
                  "snippet": {
                    "text": "/// </remarks>\npublic class EdnsDAUOption : EdnsOption\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "BEEFC6FF36E9D4060BD5FB7562B1A28FA26FBE201E02154ED1EED9E0D1B35B86"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'EdnsDHUOption' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'EdnsDhuOption'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsDHUOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 1
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 14,
                  "endLine": 13,
                  "endColumn": 27,
                  "charOffset": 348,
                  "charLength": 13,
                  "snippet": {
                    "text": "EdnsDHUOption"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 2,
                  "charOffset": 304,
                  "charLength": 72,
                  "snippet": {
                    "text": "/// <seealso cref=\"DSRecord\"/>\npublic class EdnsDHUOption : EdnsOption\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E118AEECA65E41453FD08C07EF667B74A3302BCCC1F20CD9277C0D162F4236B0"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'EdnsNSIDOption' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'EdnsNsidOption'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsNSIDOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 28
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 14,
                  "endLine": 10,
                  "endColumn": 28,
                  "charOffset": 214,
                  "charLength": 14,
                  "snippet": {
                    "text": "EdnsNSIDOption"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 2,
                  "charOffset": 143,
                  "charLength": 100,
                  "snippet": {
                    "text": "/// <seealso href=\"https://tools.ietf.org/html/rfc5001\"/>\npublic class EdnsNSIDOption : EdnsOption\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C675EB6085B8270A4C8B6F705705025055F5A7360E6AF82C468247D3D92C5EF6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ExtendedDNSError' does not match rule 'Enum members'. Suggested name is 'ExtendedDnsError'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 5,
                  "endLine": 93,
                  "endColumn": 21,
                  "charOffset": 2612,
                  "charLength": 16,
                  "snippet": {
                    "text": "ExtendedDNSError"
                  }
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 1,
                  "charOffset": 2546,
                  "charLength": 89,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc8914\"/>\n    ExtendedDNSError = 15,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "DCE248A3D9A133C36710D27D3EF834F129E982074386C8B3052257CD330A2096"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ExtendedDNSError' does not match rule 'enums_should_be_pascalcase'. Suggested name is 'ExtendedDnsError'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 13,
                  "endLine": 6,
                  "endColumn": 29,
                  "charOffset": 79,
                  "charLength": 16,
                  "snippet": {
                    "text": "ExtendedDNSError"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 2,
                  "charOffset": 52,
                  "charLength": 54,
                  "snippet": {
                    "text": "/// </summary>\npublic enum ExtendedDNSError : ushort\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4655CCA3781D196CA0960DDE786BB4633CAD8C95D0086D9D0B1DE1984067EB91"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'GPOS' does not match rule 'Enum members'. Suggested name is 'Gpos'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 5,
                  "endLine": 187,
                  "endColumn": 9,
                  "charOffset": 5557,
                  "charLength": 4,
                  "snippet": {
                    "text": "GPOS"
                  }
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "endLine": 188,
                  "endColumn": 1,
                  "charOffset": 5474,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1712\">RFC 1712</seealso>\n    GPOS = 27,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A1507EE7CF58D5D80A1E06D286047BA0201CF1948134FA83AA65A9723FA4F0C8"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'GSSTSIG' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Gsstsig'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 25,
                  "endLine": 19,
                  "endColumn": 32,
                  "charOffset": 507,
                  "charLength": 7,
                  "snippet": {
                    "text": "GSSTSIG"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 1,
                  "charOffset": 464,
                  "charLength": 65,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string GSSTSIG = \"gss-tsig\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "DFD32887A5FC62CB3BF6A0F58294C8BEEBAD7822CD93B3D8AF8F213BD09E710E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'GetIPAddresses' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'GetIpAddresses'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/MulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 7
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 42,
                  "endLine": 244,
                  "endColumn": 56,
                  "charOffset": 8997,
                  "charLength": 14,
                  "snippet": {
                    "text": "GetIPAddresses"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "endLine": 245,
                  "endColumn": 6,
                  "charOffset": 8937,
                  "charLength": 82,
                  "snippet": {
                    "text": "    /// </remarks>\n    public static IEnumerable<IPAddress> GetIPAddresses()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8D76D668CB9E0F0CD429B74E21748848FE6882E5CF2D0C30EEA0C8B612BA1AC2"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'GostR34_11_94' does not match rule 'Enum members'. Suggested name is 'GostR341194'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DigestType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 30
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 29,
                  "endColumn": 18,
                  "charOffset": 764,
                  "charLength": 13,
                  "snippet": {
                    "text": "GostR34_11_94"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 1,
                  "charOffset": 741,
                  "charLength": 42,
                  "snippet": {
                    "text": "    /// </summary>\n    GostR34_11_94 = 3,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "BF6FDF06B706474729A3DA7D797CA41E6179576D4596A17B54B93E6B346476A2"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HINFO' does not match rule 'Enum members'. Suggested name is 'Hinfo'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "endLine": 96,
                  "endColumn": 10,
                  "charOffset": 2926,
                  "charLength": 5,
                  "snippet": {
                    "text": "HINFO"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 97,
                  "endColumn": 1,
                  "charOffset": 2884,
                  "charLength": 54,
                  "snippet": {
                    "text": "    /// <seealso cref=\"HINFORecord\"/>\n    HINFO = 13,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4992B9E5D96C208999A68D06D9DA14A9ADAA103175AB928A4D861F744062C46F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HINFORecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'HinfoRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/HINFORecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 31
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 14,
                  "endLine": 13,
                  "endColumn": 25,
                  "charOffset": 419,
                  "charLength": 11,
                  "snippet": {
                    "text": "HINFORecord"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 2,
                  "charOffset": 391,
                  "charLength": 58,
                  "snippet": {
                    "text": "/// </remarks>\npublic class HINFORecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8F8974FDE0156A7A0D82829681B7C48F526B7CE7317A315BED7D1BCF54DFD12D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACMD5' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacmd5'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 25,
                  "endLine": 14,
                  "endColumn": 32,
                  "charOffset": 352,
                  "charLength": 7,
                  "snippet": {
                    "text": "HMACMD5"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 1,
                  "charOffset": 309,
                  "charLength": 81,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACMD5 = \"HMAC-MD5.SIG-ALG.REG.INT\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "EA256241610806F855D6A3BA2629E98C0E3DBEDC49F6EB90C78ADC73C9E9E87A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACSHA1' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacsha1'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 25,
                  "endLine": 24,
                  "endColumn": 33,
                  "charOffset": 647,
                  "charLength": 8,
                  "snippet": {
                    "text": "HMACSHA1"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 1,
                  "charOffset": 604,
                  "charLength": 67,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACSHA1 = \"hmac-sha1\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7FD4BDC6230F833381D9FC46CBDEFD8EBFD2A470693A6C0D4B00E3DDECB2B393"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACSHA224' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacsha224'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 25,
                  "endLine": 29,
                  "endColumn": 35,
                  "charOffset": 791,
                  "charLength": 10,
                  "snippet": {
                    "text": "HMACSHA224"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 1,
                  "charOffset": 748,
                  "charLength": 71,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACSHA224 = \"hmac-sha224\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4CBC1E5B645835A2E2FE9353ABBE96297F5A0029471E877A1E63DCA3EC55F68E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACSHA256' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacsha256'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 25,
                  "endLine": 34,
                  "endColumn": 35,
                  "charOffset": 939,
                  "charLength": 10,
                  "snippet": {
                    "text": "HMACSHA256"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 1,
                  "charOffset": 896,
                  "charLength": 71,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACSHA256 = \"hmac-sha256\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6C9A3A2FE6E3422784EFDA4B22ED978A610E13E118920C4BC05FEAD544DAF102"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACSHA384' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacsha384'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 25,
                  "endLine": 39,
                  "endColumn": 35,
                  "charOffset": 1087,
                  "charLength": 10,
                  "snippet": {
                    "text": "HMACSHA384"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 1,
                  "charOffset": 1044,
                  "charLength": 71,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACSHA384 = \"hmac-sha384\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0FCB9D0167AB9D25B83577F6013D031D4E07B55C73DB1D9E938F7740AC9EF9E5"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACSHA512' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacsha512'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 25,
                  "endLine": 44,
                  "endColumn": 35,
                  "charOffset": 1235,
                  "charLength": 10,
                  "snippet": {
                    "text": "HMACSHA512"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 1192,
                  "charLength": 71,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACSHA512 = \"hmac-sha512\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52BE346A565D3ABB23C8E7AFC8A625D1A91314CBC878ADA127D7BBA470493197"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HS' does not match rule 'Enum members'. Suggested name is 'Hs'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsClass.cs",
                  "uriBaseId": "solutionDir",
                  "index": 18
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "endLine": 31,
                  "endColumn": 7,
                  "charOffset": 717,
                  "charLength": 2,
                  "snippet": {
                    "text": "HS"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 1,
                  "charOffset": 694,
                  "charLength": 31,
                  "snippet": {
                    "text": "    /// </summary>\n    HS = 4,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "751ACB0A38E89CA7276229CEF83619A25D4FC5D49D30779C8C460D1D94CA9D83"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HostRecordTTL' does not match rule 'public_static_readonly_fields_should_be_pascalcase'. Suggested name is 'HostRecordTtl'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/MulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 7
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 37,
                  "endLine": 197,
                  "endColumn": 50,
                  "charOffset": 6956,
                  "charLength": 13,
                  "snippet": {
                    "text": "HostRecordTTL"
                  }
                },
                "contextRegion": {
                  "startLine": 196,
                  "startColumn": 1,
                  "endLine": 198,
                  "endColumn": 18,
                  "charOffset": 6901,
                  "charLength": 115,
                  "snippet": {
                    "text": "    /// </summary>\n    public static readonly TimeSpan HostRecordTTL = TimeSpan.FromSeconds(120);\n    /// <summary>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6C48CC7E589BFBF3197694F47F86788391C4F87FA61A9CBC413A6577C81FDDAC"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'IN' does not match rule 'Enum members'. Suggested name is 'In'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsClass.cs",
                  "uriBaseId": "solutionDir",
                  "index": 18
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "endLine": 16,
                  "endColumn": 7,
                  "charOffset": 429,
                  "charLength": 2,
                  "snippet": {
                    "text": "IN"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 1,
                  "charOffset": 406,
                  "charLength": 31,
                  "snippet": {
                    "text": "    /// </summary>\n    IN = 1,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E149738237E2BA9E717284E4EACC34EC65F5496AEBF1AD01DEB2111A45429266"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'INDIRECT' does not match rule 'Enum members'. Suggested name is 'Indirect'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 5,
                  "endLine": 91,
                  "endColumn": 13,
                  "charOffset": 1868,
                  "charLength": 8,
                  "snippet": {
                    "text": "INDIRECT"
                  }
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "endLine": 92,
                  "endColumn": 1,
                  "charOffset": 1845,
                  "charLength": 39,
                  "snippet": {
                    "text": "    /// </summary>\n    INDIRECT = 252,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "440A306E30B15A1A3F3F500F272494F848DE0D00EEC12F283D5466E09BE7D37A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'IPAddressExtensions' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'IpAddressExtensions'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/IPAddressExtensions.cs",
                  "uriBaseId": "solutionDir",
                  "index": 32
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 21,
                  "endLine": 13,
                  "endColumn": 40,
                  "charOffset": 354,
                  "charLength": 19,
                  "snippet": {
                    "text": "IPAddressExtensions"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 2,
                  "charOffset": 319,
                  "charLength": 56,
                  "snippet": {
                    "text": "/// </remarks>\npublic static class IPAddressExtensions\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6261A64834219E7E9324487641F387110CECF74658C5CACFDC2D53BBEEFB2261"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ISDN' does not match rule 'Enum members'. Suggested name is 'Isdn'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 5,
                  "endLine": 145,
                  "endColumn": 9,
                  "charOffset": 4497,
                  "charLength": 4,
                  "snippet": {
                    "text": "ISDN"
                  }
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "endLine": 146,
                  "endColumn": 1,
                  "charOffset": 4404,
                  "charLength": 104,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1183#section-1\">RFC 1183</seealso>\n    ISDN = 20,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19FFD3B464E5C7DD595C4B35292484F603B0FDD85718DF024538E455E57EDB45"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'KEY' does not match rule 'Enum members'. Suggested name is 'Key'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 5,
                  "endLine": 175,
                  "endColumn": 8,
                  "charOffset": 5227,
                  "charLength": 3,
                  "snippet": {
                    "text": "KEY"
                  }
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "endLine": 176,
                  "endColumn": 1,
                  "charOffset": 5144,
                  "charLength": 93,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc4034\">RFC 4034</seealso>\n    KEY = 25,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "BF249EF61BDE2A92C2066D2CFEC2BA552F67AB6152EDDCD29585AE080E028E4A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'LLQ' does not match rule 'Enum members'. Suggested name is 'Llq'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 8,
                  "charOffset": 579,
                  "charLength": 3,
                  "snippet": {
                    "text": "LLQ"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 5,
                  "charOffset": 513,
                  "charLength": 79,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc8764\"/>\n    LLQ = 1,\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FEA7289BA0ECA8CF878DC71E4B74903251ABAFC29BDE5BAE34168CDDD58D0B50"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'LOC' does not match rule 'Enum members'. Suggested name is 'Loc'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 5,
                  "endLine": 200,
                  "endColumn": 8,
                  "charOffset": 5929,
                  "charLength": 3,
                  "snippet": {
                    "text": "LOC"
                  }
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "endLine": 201,
                  "endColumn": 1,
                  "charOffset": 5846,
                  "charLength": 93,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1876\">RFC 1876</seealso>\n    LOC = 29,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2C585A15CA685F40323EE4E244FD95667DEDB7E89C2CCD96B1A1A13048960568"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MAC' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Mac'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 20,
                  "endLine": 88,
                  "endColumn": 23,
                  "charOffset": 2637,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAC"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 1,
                  "charOffset": 2599,
                  "charLength": 56,
                  "snippet": {
                    "text": "    /// </remarks>\n    public byte[]? MAC { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15A5FFAB30F782F55967A4BB9C0A464EDB8C554299542311A18782097D9ECF2E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MAILA' does not match rule 'Enum members'. Suggested name is 'Maila'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 5,
                  "endLine": 296,
                  "endColumn": 10,
                  "charOffset": 8863,
                  "charLength": 5,
                  "snippet": {
                    "text": "MAILA"
                  }
                },
                "contextRegion": {
                  "startLine": 295,
                  "startColumn": 1,
                  "endLine": 297,
                  "endColumn": 1,
                  "charOffset": 8834,
                  "charLength": 42,
                  "snippet": {
                    "text": "    [Obsolete(\"Use MX\")]\n    MAILA = 254,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79C5CF142C858CD106E1D7BB487D1458393F39FE1225DD7608A743756AE74F12"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MAILB' does not match rule 'Enum members'. Suggested name is 'Mailb'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 5,
                  "endLine": 289,
                  "endColumn": 10,
                  "charOffset": 8645,
                  "charLength": 5,
                  "snippet": {
                    "text": "MAILB"
                  }
                },
                "contextRegion": {
                  "startLine": 288,
                  "startColumn": 1,
                  "endLine": 290,
                  "endColumn": 1,
                  "charOffset": 8562,
                  "charLength": 96,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1035\">RFC 1035</seealso>\n    MAILB = 253,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "BA97C67C28F9917EAEA8665CF2781DBA4D2832CC1B4DAA9E0A4B5FC969AB9888"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MB' does not match rule 'Enum members'. Suggested name is 'Mb'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "endLine": 56,
                  "endColumn": 7,
                  "charOffset": 1640,
                  "charLength": 2,
                  "snippet": {
                    "text": "MB"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 1,
                  "charOffset": 1543,
                  "charLength": 105,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1035#section-3.3.3\">RFC 1035</seealso>\n    MB = 7,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A25CA75CBB5D9B37EB238D50D98CFB623523C806239ACB86548A5B84B960FD5D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MD' does not match rule 'Enum members'. Suggested name is 'Md'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 29,
                  "endColumn": 7,
                  "charOffset": 797,
                  "charLength": 2,
                  "snippet": {
                    "text": "MD"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 1,
                  "charOffset": 768,
                  "charLength": 37,
                  "snippet": {
                    "text": "    [Obsolete(\"Use MX\")]\n    MD = 3,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FD84054288CF7A49BFB340BAD1974915519E81C46258C4383BBCFFB8C8A33BB5"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MF' does not match rule 'Enum members'. Suggested name is 'Mf'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 5,
                  "endLine": 36,
                  "endColumn": 7,
                  "charOffset": 997,
                  "charLength": 2,
                  "snippet": {
                    "text": "MF"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 1,
                  "charOffset": 968,
                  "charLength": 37,
                  "snippet": {
                    "text": "    [Obsolete(\"Use MX\")]\n    MF = 4,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CB424F07F4241D3DFCB254D1ED2232D4C0884BB09DDB77A903B916C31FFE321D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MG' does not match rule 'Enum members'. Suggested name is 'Mg'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "endLine": 62,
                  "endColumn": 7,
                  "charOffset": 1827,
                  "charLength": 2,
                  "snippet": {
                    "text": "MG"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 1,
                  "charOffset": 1730,
                  "charLength": 105,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1035#section-3.3.6\">RFC 1035</seealso>\n    MG = 8,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "41911B706F7D82F023195263A5589AA32B881EF7E8CB25D0A5DB6A59AC6154BA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MINFO' does not match rule 'Enum members'. Suggested name is 'Minfo'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 5,
                  "endLine": 102,
                  "endColumn": 10,
                  "charOffset": 3116,
                  "charLength": 5,
                  "snippet": {
                    "text": "MINFO"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "endLine": 103,
                  "endColumn": 1,
                  "charOffset": 3018,
                  "charLength": 110,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1035#section-3.3.11\">RFC 1035</seealso>\n    MINFO = 14,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3B234F4F3006DF886A41F95A055903F371C06B298B95CE572DE121DD183514EC"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MR' does not match rule 'Enum members'. Suggested name is 'Mr'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 5,
                  "endLine": 68,
                  "endColumn": 7,
                  "charOffset": 2023,
                  "charLength": 2,
                  "snippet": {
                    "text": "MR"
                  }
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 69,
                  "endColumn": 1,
                  "charOffset": 1926,
                  "charLength": 105,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1035#section-3.3.8\">RFC 1035</seealso>\n    MR = 9,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58FAFCA823373FF1E941826D7A0562A2E954A9711FE9DBFAAAA43CF7395463D9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MSB' does not match rule 'parameters_should_be_camelcase'. Suggested name is 'msb'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireWriter.cs",
                  "uriBaseId": "solutionDir",
                  "index": 33
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 66,
                  "endLine": 445,
                  "endColumn": 69,
                  "charOffset": 14290,
                  "charLength": 3,
                  "snippet": {
                    "text": "MSB"
                  }
                },
                "contextRegion": {
                  "startLine": 444,
                  "startColumn": 1,
                  "endLine": 446,
                  "endColumn": 6,
                  "charOffset": 14224,
                  "charLength": 84,
                  "snippet": {
                    "text": "\n    private static IEnumerable<byte> ToBytes(BitArray bits, bool MSB = false)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9D90261F1180172899B65F6F5EA5E8D2EB1F7AA1F27DE89D05DD581F3311EB6B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MX' does not match rule 'Enum members'. Suggested name is 'Mx'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 5,
                  "endLine": 110,
                  "endColumn": 7,
                  "charOffset": 3398,
                  "charLength": 2,
                  "snippet": {
                    "text": "MX"
                  }
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 1,
                  "charOffset": 3359,
                  "charLength": 48,
                  "snippet": {
                    "text": "    /// <seealso cref=\"MXRecord\"/>\n    MX = 15,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07916EC50210967631E974A90F5F8459D78B8BFAB1C4FD3D79F1A3B9BBE2F301"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MXRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'MxRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MXRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 34
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 14,
                  "endLine": 11,
                  "endColumn": 22,
                  "charOffset": 279,
                  "charLength": 8,
                  "snippet": {
                    "text": "MXRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 2,
                  "charOffset": 251,
                  "charLength": 55,
                  "snippet": {
                    "text": "/// </remarks>\npublic class MXRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59CABCB4358BC2C1D2B918830BEA4E1A78DF89BE8073A4395E07E6C2F378EC25"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NS' does not match rule 'Enum members'. Suggested name is 'Ns'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 5,
                  "endLine": 22,
                  "endColumn": 7,
                  "charOffset": 595,
                  "charLength": 2,
                  "snippet": {
                    "text": "NS"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 556,
                  "charLength": 47,
                  "snippet": {
                    "text": "    /// <seealso cref=\"NSRecord\"/>\n    NS = 2,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C9CB5009413D01CF1334E85083E41134A6A881C6D930BDB29AE1CABDE5B459BC"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSAP' does not match rule 'Enum members'. Suggested name is 'Nsap'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 5,
                  "endLine": 157,
                  "endColumn": 9,
                  "charOffset": 4781,
                  "charLength": 4,
                  "snippet": {
                    "text": "NSAP"
                  }
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "endLine": 158,
                  "endColumn": 1,
                  "charOffset": 4750,
                  "charLength": 42,
                  "snippet": {
                    "text": "    [Obsolete(\"Historic\")]\n    NSAP = 22,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2A9F8E921DB48CFE95DAD13DD7DA9206E99F83288C8F885697C566E159FC082C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSAPPTR' does not match rule 'Enum members'. Suggested name is 'Nsapptr'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 5,
                  "endLine": 163,
                  "endColumn": 12,
                  "charOffset": 4913,
                  "charLength": 7,
                  "snippet": {
                    "text": "NSAPPTR"
                  }
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "endLine": 164,
                  "endColumn": 1,
                  "charOffset": 4882,
                  "charLength": 45,
                  "snippet": {
                    "text": "    [Obsolete(\"Historic\")]\n    NSAPPTR = 23,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B71BF2E3F5C26CA1D03EEE2EB19A31F12348A2FBBB84C14D0F8965144874300E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSEC' does not match rule 'Enum members'. Suggested name is 'Nsec'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 5,
                  "endLine": 242,
                  "endColumn": 9,
                  "charOffset": 7194,
                  "charLength": 4,
                  "snippet": {
                    "text": "NSEC"
                  }
                },
                "contextRegion": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 243,
                  "endColumn": 1,
                  "charOffset": 7153,
                  "charLength": 52,
                  "snippet": {
                    "text": "    /// <seealso cref=\"NSECRecord\"/>\n    NSEC = 47,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0A18EBBEA1F54EA3BF4266EE96E6C0D17C093E855F254B1EC114C74141EF0807"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSEC3' does not match rule 'Enum members'. Suggested name is 'Nsec3'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 5,
                  "endLine": 256,
                  "endColumn": 10,
                  "charOffset": 7635,
                  "charLength": 5,
                  "snippet": {
                    "text": "NSEC3"
                  }
                },
                "contextRegion": {
                  "startLine": 255,
                  "startColumn": 1,
                  "endLine": 257,
                  "endColumn": 1,
                  "charOffset": 7593,
                  "charLength": 54,
                  "snippet": {
                    "text": "    /// <seealso cref=\"NSEC3Record\"/>\n    NSEC3 = 50,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "EACBC232C6F22B4146FC1C438E55FDE5978BFD25D07DF98E02CFA81039F1538F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSEC3PARAM' does not match rule 'Enum members'. Suggested name is 'Nsec3Param'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 5,
                  "endLine": 263,
                  "endColumn": 15,
                  "charOffset": 7890,
                  "charLength": 10,
                  "snippet": {
                    "text": "NSEC3PARAM"
                  }
                },
                "contextRegion": {
                  "startLine": 262,
                  "startColumn": 1,
                  "endLine": 264,
                  "endColumn": 1,
                  "charOffset": 7843,
                  "charLength": 64,
                  "snippet": {
                    "text": "    /// <seealso cref=\"NSEC3PARAMRecord\"/>\n    NSEC3PARAM = 51,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6A782E7C4580ED5D3870A562DC61DC4CE436548C7D30A405694FECC21F384942"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSEC3PARAMRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'Nsec3ParamRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3PARAMRecord%20.cs",
                  "uriBaseId": "solutionDir",
                  "index": 35
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 9,
                  "endColumn": 30,
                  "charOffset": 334,
                  "charLength": 16,
                  "snippet": {
                    "text": "NSEC3PARAMRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 2,
                  "charOffset": 306,
                  "charLength": 63,
                  "snippet": {
                    "text": "/// </remarks>\npublic class NSEC3PARAMRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "311078A5544ED9B866DAD2CA8F11C0F273E9BE1783C5FAEFBD69EA793B042659"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSEC3Record' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'Nsec3Record'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3Record.cs",
                  "uriBaseId": "solutionDir",
                  "index": 3
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 9,
                  "endColumn": 25,
                  "charOffset": 322,
                  "charLength": 11,
                  "snippet": {
                    "text": "NSEC3Record"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 2,
                  "charOffset": 294,
                  "charLength": 58,
                  "snippet": {
                    "text": "/// </remarks>\npublic class NSEC3Record : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15D2B16AD4302F821D58CDBC0721661D2FDB691579CB9BAE5F1F1A4182F56D75"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSEC3s' does not match rule 'enums_should_be_pascalcase'. Suggested name is 'Nsec3S'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3s.cs",
                  "uriBaseId": "solutionDir",
                  "index": 36
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 13,
                  "endLine": 10,
                  "endColumn": 19,
                  "charOffset": 324,
                  "charLength": 6,
                  "snippet": {
                    "text": "NSEC3s"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 2,
                  "charOffset": 304,
                  "charLength": 35,
                  "snippet": {
                    "text": "[Flags]\npublic enum NSEC3s : byte\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D64D414D0382C9D85F5F3EF5CF004047D13F36207568F5FE55470CBD78593027"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSECMissing' does not match rule 'Enum members'. Suggested name is 'NsecMissing'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 5,
                  "endLine": 73,
                  "endColumn": 16,
                  "charOffset": 2803,
                  "charLength": 11,
                  "snippet": {
                    "text": "NSECMissing"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 74,
                  "endColumn": 1,
                  "charOffset": 2780,
                  "charLength": 42,
                  "snippet": {
                    "text": "    /// </summary>\n    NSECMissing = 0xC,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72798E6EEFE9D50C60257C4FDF52141389A7BD2C8D23D2718D09B7722B3BE056"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSECRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'NsecRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSECRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 4
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 24,
                  "charOffset": 183,
                  "charLength": 10,
                  "snippet": {
                    "text": "NSECRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 2,
                  "charOffset": 155,
                  "charLength": 57,
                  "snippet": {
                    "text": "/// </summary>\npublic class NSECRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E195DCFB2D7F6373EDC0AAA899D812ACFF84B9449DBEB4B9FDF7C65A5B5F6A73"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSID' does not match rule 'Enum members'. Suggested name is 'Nsid'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 5,
                  "endLine": 25,
                  "endColumn": 9,
                  "charOffset": 789,
                  "charLength": 4,
                  "snippet": {
                    "text": "NSID"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 1,
                  "charOffset": 723,
                  "charLength": 76,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc5001\"/>\n    NSID = 3,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0694C16F934773F4C4B57FA14DDF1C5C465CDB6796BF7CD9EA6DAC8C1C25B9B0"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'NsRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 37
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 14,
                  "endLine": 18,
                  "endColumn": 22,
                  "charOffset": 797,
                  "charLength": 8,
                  "snippet": {
                    "text": "NSRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 2,
                  "charOffset": 769,
                  "charLength": 55,
                  "snippet": {
                    "text": "/// </remarks>\npublic class NSRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "739B7AD3466100A574A3DF96BF846BBEF2868A45312CE49813BEB97BFA69F377"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NULL' does not match rule 'Enum members'. Suggested name is 'Null'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "endLine": 75,
                  "endColumn": 9,
                  "charOffset": 2250,
                  "charLength": 4,
                  "snippet": {
                    "text": "NULL"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 1,
                  "charOffset": 2209,
                  "charLength": 52,
                  "snippet": {
                    "text": "    /// <seealso cref=\"NULLRecord\"/>\n    NULL = 10,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0CB6F5331E72CE50ED4684AC92FFD2EB45A046C718372F1E35A115F490B4FEF5"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NULLRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'NullRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NULLRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 38
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 14,
                  "endLine": 11,
                  "endColumn": 24,
                  "charOffset": 314,
                  "charLength": 10,
                  "snippet": {
                    "text": "NULLRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 2,
                  "charOffset": 286,
                  "charLength": 57,
                  "snippet": {
                    "text": "/// </remarks>\npublic class NULLRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73FF9AAB89A2A27072CDAACCC1B77E29E7A97FC5EE75C2230EDC8527DD323093"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NXRRSet' does not match rule 'Enum members'. Suggested name is 'NxrrSet'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MessageStatus.cs",
                  "uriBaseId": "solutionDir",
                  "index": 19
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 5,
                  "endLine": 55,
                  "endColumn": 12,
                  "charOffset": 1343,
                  "charLength": 7,
                  "snippet": {
                    "text": "NXRRSet"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 1,
                  "charOffset": 1320,
                  "charLength": 36,
                  "snippet": {
                    "text": "    /// </summary>\n    NXRRSet = 8,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5529798D5AAA21D06C2C9447328BEA8566EDD9CD35B6635A87FFA722550625EB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NonHostTTL' does not match rule 'public_static_readonly_fields_should_be_pascalcase'. Suggested name is 'NonHostTtl'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/MulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 7
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 37,
                  "endLine": 202,
                  "endColumn": 47,
                  "charOffset": 7232,
                  "charLength": 10,
                  "snippet": {
                    "text": "NonHostTTL"
                  }
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "endLine": 203,
                  "endColumn": 1,
                  "charOffset": 7177,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// </summary>\n    public static readonly TimeSpan NonHostTTL = TimeSpan.FromMinutes(75);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "449DF5C9BB70A73256047619DEE4E5D94DB99197F57FA39CE75AD8B71D987A8F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'OPT' does not match rule 'Enum members'. Suggested name is 'Opt'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 5,
                  "endLine": 221,
                  "endColumn": 8,
                  "charOffset": 6595,
                  "charLength": 3,
                  "snippet": {
                    "text": "OPT"
                  }
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "endLine": 222,
                  "endColumn": 1,
                  "charOffset": 6559,
                  "charLength": 46,
                  "snippet": {
                    "text": "    /// <see cref=\"OPTRecord\"/>\n    OPT = 41,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B064917F1D895E81F0A19B3CD2E24C6EB9562AF32DFF53C5BED1B07B900ECEEE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'OPTRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'OptRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/OPTRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 5
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 14,
                  "endLine": 27,
                  "endColumn": 23,
                  "charOffset": 956,
                  "charLength": 9,
                  "snippet": {
                    "text": "OPTRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 2,
                  "charOffset": 885,
                  "charLength": 99,
                  "snippet": {
                    "text": "/// <seealso href=\"https://tools.ietf.org/html/rfc6891\"/>\npublic class OPTRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81D5DC13E3D71F7AC624B04FBA98C3AE14F47BE916104A0D691B8F29EFE5B25E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'OS' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Os'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/HINFORecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 31
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 20,
                  "endLine": 28,
                  "endColumn": 22,
                  "charOffset": 793,
                  "charLength": 2,
                  "snippet": {
                    "text": "OS"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 1,
                  "charOffset": 755,
                  "charLength": 55,
                  "snippet": {
                    "text": "    /// </summary>\n    public string? OS { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FD25C7F74D93376E08BA50A686C0FDB97C2BEC7DB6058958A70FF493FA4185D8"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'OriginalTTL' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'OriginalTtl'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21,
                  "endLine": 49,
                  "endColumn": 32,
                  "charOffset": 1538,
                  "charLength": 11,
                  "snippet": {
                    "text": "OriginalTTL"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 1,
                  "charOffset": 1501,
                  "charLength": 63,
                  "snippet": {
                    "text": "    /// </value>\n    public TimeSpan OriginalTTL { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CF901EFC121505A3F4A5FFE53AEF4E3FDE43EAEB5C9B52BF9E479EA02D347471"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'PRIVATEDNS' does not match rule 'Enum members'. Suggested name is 'Privatedns'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "endLine": 96,
                  "endColumn": 15,
                  "charOffset": 1953,
                  "charLength": 10,
                  "snippet": {
                    "text": "PRIVATEDNS"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 97,
                  "endColumn": 1,
                  "charOffset": 1930,
                  "charLength": 41,
                  "snippet": {
                    "text": "    /// </summary>\n    PRIVATEDNS = 253,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5F8EBCEA87E58D8AFDDC0749D0B5F2708421742BDE7695E951656685969FEDC6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'PRIVATEOID' does not match rule 'Enum members'. Suggested name is 'Privateoid'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 5,
                  "endLine": 101,
                  "endColumn": 15,
                  "charOffset": 2044,
                  "charLength": 10,
                  "snippet": {
                    "text": "PRIVATEOID"
                  }
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "endLine": 102,
                  "endColumn": 2,
                  "charOffset": 2021,
                  "charLength": 41,
                  "snippet": {
                    "text": "    /// </summary>\n    PRIVATEOID = 254\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "302849BEF8F53C7422B354B44B932BAA51281EBE2527E87FC9D5C56EA79E20EE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'PTR' does not match rule 'Enum members'. Suggested name is 'Ptr'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 5,
                  "endLine": 88,
                  "endColumn": 8,
                  "charOffset": 2637,
                  "charLength": 3,
                  "snippet": {
                    "text": "PTR"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 1,
                  "charOffset": 2597,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// <seealso cref=\"PTRRecord\"/>\n    PTR = 12,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B27687005E27B1C2300FD9C76F36E509E081BEC2E2C403149CBC501B9F9C3F85"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'PTRRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'PtrRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/PTRRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 40
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 14,
                  "endLine": 13,
                  "endColumn": 23,
                  "charOffset": 488,
                  "charLength": 9,
                  "snippet": {
                    "text": "PTRRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 2,
                  "charOffset": 460,
                  "charLength": 56,
                  "snippet": {
                    "text": "/// </remarks>\npublic class PTRRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F38EFDABCD16418442B534F0C6725C811DCB8DFBED1FF1CC185551783ABC34BA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'PX' does not match rule 'Enum members'. Suggested name is 'Px'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 5,
                  "endLine": 181,
                  "endColumn": 7,
                  "charOffset": 5397,
                  "charLength": 2,
                  "snippet": {
                    "text": "PX"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "endLine": 182,
                  "endColumn": 1,
                  "charOffset": 5314,
                  "charLength": 92,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc2163\">RFC 2163</seealso>\n    PX = 26,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7B3C4CFA83E06446C6F8EA17677EE4A6890CDAF02D662FA33138848805EC4400"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'QR' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Qr'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 17,
                  "endLine": 54,
                  "endColumn": 19,
                  "charOffset": 1616,
                  "charLength": 2,
                  "snippet": {
                    "text": "QR"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 1,
                  "charOffset": 1583,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// </value>\n    public bool QR { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "929F3A31C31FA5A9ECA6E97041CF6642E12713264A02AE29F033723013D36574"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'QR' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Qr'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "endLine": 48,
                  "endColumn": 19,
                  "charOffset": 1676,
                  "charLength": 2,
                  "snippet": {
                    "text": "QR"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 1,
                  "charOffset": 1623,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// <seealso cref=\"IsResponse\"/>\n    public bool QR { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "69584A31A3A23720B703ECB8E858BCE3CC58FBA7C63DF158FA6385EB496E75CA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'QU' does not match rule 'local_variables_should_be_camelcase'. Suggested name is 'qu'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 13
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 13,
                  "endLine": 489,
                  "endColumn": 15,
                  "charOffset": 17171,
                  "charLength": 2,
                  "snippet": {
                    "text": "QU"
                  }
                },
                "contextRegion": {
                  "startLine": 488,
                  "startColumn": 1,
                  "endLine": 490,
                  "endColumn": 125,
                  "charOffset": 17123,
                  "charLength": 211,
                  "snippet": {
                    "text": "        // and normalise the Class.\n        var QU = false; // unicast query response?\n        foreach (var r in request.Questions.Where(static r => ((ushort)r.Class & MulticastService.UnicastResponseBit) != 0))"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9B077FF1F51F2E630F8B404756374E39337B905280626DB67DF8AD6CA3C5A304"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RA' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Ra'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 17,
                  "endLine": 173,
                  "endColumn": 19,
                  "charOffset": 5706,
                  "charLength": 2,
                  "snippet": {
                    "text": "RA"
                  }
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 1,
                  "endLine": 174,
                  "endColumn": 1,
                  "charOffset": 5673,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// </value>\n    public bool RA { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7E8E76EB8364910F273BB5F7B94663866B19765FA5CB9D2554FDE46D6F4ABE0C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RD' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Rd'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 17,
                  "endLine": 163,
                  "endColumn": 19,
                  "charOffset": 5355,
                  "charLength": 2,
                  "snippet": {
                    "text": "RD"
                  }
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "endLine": 164,
                  "endColumn": 1,
                  "charOffset": 5322,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// </value>\n    public bool RD { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "553A95D5C89CBDA95AC5F5D2DA08531A4FCAD6734A18323B323B7D15FC731DBA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RP' does not match rule 'Enum members'. Suggested name is 'Rp'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 5,
                  "endLine": 125,
                  "endColumn": 7,
                  "charOffset": 3873,
                  "charLength": 2,
                  "snippet": {
                    "text": "RP"
                  }
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "endLine": 126,
                  "endColumn": 1,
                  "charOffset": 3834,
                  "charLength": 48,
                  "snippet": {
                    "text": "    /// <seealso cref=\"RPRecord\"/>\n    RP = 17,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D7ADFB937FC87BF696DCDD79CD6DBB8A4A1179C4BC70B5D3D55A5BE09809AD99"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RPRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'RpRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RPRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 42
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 14,
                  "endLine": 10,
                  "endColumn": 22,
                  "charOffset": 262,
                  "charLength": 8,
                  "snippet": {
                    "text": "RPRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 2,
                  "charOffset": 191,
                  "charLength": 98,
                  "snippet": {
                    "text": "/// <seealso href=\"https://tools.ietf.org/html/rfc1183\"/>\npublic class RPRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "329C301AE80BD8201A97011CD1DCC86C85A447E6AADFA23321D5F0A77696F1AA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RRSIG' does not match rule 'Enum members'. Suggested name is 'Rrsig'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 5,
                  "endLine": 235,
                  "endColumn": 10,
                  "charOffset": 7011,
                  "charLength": 5,
                  "snippet": {
                    "text": "RRSIG"
                  }
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "endLine": 236,
                  "endColumn": 1,
                  "charOffset": 6969,
                  "charLength": 54,
                  "snippet": {
                    "text": "    /// <seealso cref=\"RRSIGRecord\"/>\n    RRSIG = 46,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "75D0F28E92B9ED8D84A6744871B1430C50CCF9809F22EE275FFF6507CFB91BEF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RRSIGRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'RrsigRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 9,
                  "endColumn": 25,
                  "charOffset": 266,
                  "charLength": 11,
                  "snippet": {
                    "text": "RRSIGRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 2,
                  "charOffset": 238,
                  "charLength": 58,
                  "snippet": {
                    "text": "/// </remarks>\npublic class RRSIGRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "562B8012AE343EB3BFD496B19F2940FBD84BF591D8A16A5A4C511C33470135C1"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RRSIGsMissing' does not match rule 'Enum members'. Suggested name is 'RrsiGsMissing'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 5,
                  "endLine": 63,
                  "endColumn": 18,
                  "charOffset": 2430,
                  "charLength": 13,
                  "snippet": {
                    "text": "RRSIGsMissing"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 1,
                  "charOffset": 2407,
                  "charLength": 44,
                  "snippet": {
                    "text": "    /// </summary>\n    RRSIGsMissing = 0xA,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D7FF7D1B9B65CC0810F243913E52A0F11D63B0F69DFD9CE9BFE715D9A3654FC2"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RSAMD5' does not match rule 'Enum members'. Suggested name is 'Rsamd5'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 5,
                  "endLine": 26,
                  "endColumn": 11,
                  "charOffset": 808,
                  "charLength": 6,
                  "snippet": {
                    "text": "RSAMD5"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 1,
                  "charOffset": 785,
                  "charLength": 35,
                  "snippet": {
                    "text": "    /// </remarks>\n    RSAMD5 = 1,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A066965724D79690B252A8A347E9A04A44A5C2FC1C9C620A612790965BFDB14F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RSASHA1' does not match rule 'Enum members'. Suggested name is 'Rsasha1'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 5,
                  "endLine": 41,
                  "endColumn": 12,
                  "charOffset": 1024,
                  "charLength": 7,
                  "snippet": {
                    "text": "RSASHA1"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 1,
                  "charOffset": 1001,
                  "charLength": 36,
                  "snippet": {
                    "text": "    /// </summary>\n    RSASHA1 = 5,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CB6DCD108913C343143A439CD7FCED493DC4E40FDE56D4C7150BF5A714E0D093"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RSASHA1NSEC3SHA1' does not match rule 'Enum members'. Suggested name is 'Rsasha1Nsec3Sha1'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "endLine": 51,
                  "endColumn": 21,
                  "charOffset": 1191,
                  "charLength": 16,
                  "snippet": {
                    "text": "RSASHA1NSEC3SHA1"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 1,
                  "charOffset": 1168,
                  "charLength": 45,
                  "snippet": {
                    "text": "    /// </summary>\n    RSASHA1NSEC3SHA1 = 7,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5905F40D36D9CA91AD069C5F730ABA13A5CDEE4FC9027BB3A0BFB7903534CE44"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RSASHA256' does not match rule 'Enum members'. Suggested name is 'Rsasha256'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "endLine": 56,
                  "endColumn": 14,
                  "charOffset": 1276,
                  "charLength": 9,
                  "snippet": {
                    "text": "RSASHA256"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 1,
                  "charOffset": 1253,
                  "charLength": 38,
                  "snippet": {
                    "text": "    /// </summary>\n    RSASHA256 = 8,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "EA131BB2EA6E0E72B43E79C25B6DC3F72C0CACCCE62A7E258E63E8CB20CA68F7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RSASHA512' does not match rule 'Enum members'. Suggested name is 'Rsasha512'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 5,
                  "endLine": 61,
                  "endColumn": 14,
                  "charOffset": 1354,
                  "charLength": 9,
                  "snippet": {
                    "text": "RSASHA512"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 1,
                  "charOffset": 1331,
                  "charLength": 39,
                  "snippet": {
                    "text": "    /// </summary>\n    RSASHA512 = 10,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7F9FEAB924D023810BDBA20D2B490AC5EC8D3BFBD83233CC1406A31CD7B79873"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RT' does not match rule 'Enum members'. Suggested name is 'Rt'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 5,
                  "endLine": 151,
                  "endColumn": 7,
                  "charOffset": 4663,
                  "charLength": 2,
                  "snippet": {
                    "text": "RT"
                  }
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "endLine": 152,
                  "endColumn": 1,
                  "charOffset": 4570,
                  "charLength": 102,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc1183#section-1\">RFC 1183</seealso>\n    RT = 21,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4E2BF050E4CC66218C338664F93A60DF973914FC9F0185BEBF0A04E84E976BD7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ReadIPAddress' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'ReadIpAddress'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/PresentationReader.cs",
                  "uriBaseId": "solutionDir",
                  "index": 43
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 22,
                  "endLine": 138,
                  "endColumn": 35,
                  "charOffset": 4035,
                  "charLength": 13,
                  "snippet": {
                    "text": "ReadIPAddress"
                  }
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "endLine": 139,
                  "endColumn": 1,
                  "charOffset": 3995,
                  "charLength": 103,
                  "snippet": {
                    "text": "    /// </returns>\n    public IPAddress ReadIPAddress(int length = 4) => IPAddress.Parse(ReadToken());\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E53AC334917A0E21B2711D451BFF314133BADBE3B12CF24D86D590E16CCED282"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ReadIPAddress' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'ReadIpAddress'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireReader.cs",
                  "uriBaseId": "solutionDir",
                  "index": 44
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 22,
                  "endLine": 306,
                  "endColumn": 35,
                  "charOffset": 8730,
                  "charLength": 13,
                  "snippet": {
                    "text": "ReadIPAddress"
                  }
                },
                "contextRegion": {
                  "startLine": 305,
                  "startColumn": 1,
                  "endLine": 307,
                  "endColumn": 6,
                  "charOffset": 8690,
                  "charLength": 75,
                  "snippet": {
                    "text": "    /// </remarks>\n    public IPAddress ReadIPAddress(int length = 4)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "613B21F33254DABB2365105BA4D743771054DC88AD591606C12479BFDB8F888B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ReadUTF8String' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'ReadUtf8String'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireReader.cs",
                  "uriBaseId": "solutionDir",
                  "index": 44
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 19,
                  "endLine": 249,
                  "endColumn": 33,
                  "charOffset": 6800,
                  "charLength": 14,
                  "snippet": {
                    "text": "ReadUTF8String"
                  }
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "endLine": 250,
                  "endColumn": 1,
                  "charOffset": 6761,
                  "charLength": 115,
                  "snippet": {
                    "text": "    /// </exception>\n    public string ReadUTF8String() => Encoding.UTF8.GetString(ReadByteLengthPrefixedBytes());\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A9D5775965F4449F9116E445CCF3C89BB6097B1D3FEE9DF818EE67CA8E9B3971"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ReadUTF8String' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'ReadUtf8String'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireReader.cs",
                  "uriBaseId": "solutionDir",
                  "index": 44
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 19,
                  "endLine": 263,
                  "endColumn": 33,
                  "charOffset": 7221,
                  "charLength": 14,
                  "snippet": {
                    "text": "ReadUTF8String"
                  }
                },
                "contextRegion": {
                  "startLine": 262,
                  "startColumn": 1,
                  "endLine": 264,
                  "endColumn": 1,
                  "charOffset": 7182,
                  "charLength": 142,
                  "snippet": {
                    "text": "    /// </exception>\n    public string ReadUTF8String(int length) => length == 0 ? string.Empty : Encoding.UTF8.GetString(ReadBytes(length));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3A6EA89D2108231579D209137017191EF442C252F1851937FE9DF7E9BA178CDC"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'SIG' does not match rule 'Enum members'. Suggested name is 'Sig'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 5,
                  "endLine": 169,
                  "endColumn": 8,
                  "charOffset": 5075,
                  "charLength": 3,
                  "snippet": {
                    "text": "SIG"
                  }
                },
                "contextRegion": {
                  "startLine": 168,
                  "startColumn": 1,
                  "endLine": 170,
                  "endColumn": 1,
                  "charOffset": 4992,
                  "charLength": 93,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc4034\">RFC 4034</seealso>\n    SIG = 24,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B27D4D7BE801ABA555401DC606E38C333122F241066D85211ED6EBD6AB626DFE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'SOA' does not match rule 'Enum members'. Suggested name is 'Soa'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 5,
                  "endLine": 50,
                  "endColumn": 8,
                  "charOffset": 1450,
                  "charLength": 3,
                  "snippet": {
                    "text": "SOA"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 1,
                  "charOffset": 1410,
                  "charLength": 49,
                  "snippet": {
                    "text": "    /// <seealso cref=\"SOARecord\"/>\n    SOA = 6,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1B7FA613A84E02E1711753EEB67319AB87F71DF4EDCF7DA6DA2A44AF21DC690A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'SOARecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'SoaRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SOARecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 45
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 14,
                  "endLine": 18,
                  "endColumn": 23,
                  "charOffset": 867,
                  "charLength": 9,
                  "snippet": {
                    "text": "SOARecord"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 2,
                  "charOffset": 839,
                  "charLength": 56,
                  "snippet": {
                    "text": "/// </remarks>\npublic class SOARecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8621FB5A51FF8FF1D0872E2473E88233A7ECEDDEF2ACE8E512427C912FE9951A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'SRV' does not match rule 'Enum members'. Suggested name is 'Srv'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 5,
                  "endLine": 207,
                  "endColumn": 8,
                  "charOffset": 6204,
                  "charLength": 3,
                  "snippet": {
                    "text": "SRV"
                  }
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "endLine": 208,
                  "endColumn": 1,
                  "charOffset": 6164,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// <seealso cref=\"SRVRecord\"/>\n    SRV = 33,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7CD0251685D075FFF12D7FD178C3404B98D707BA56621864E7FEFF78F609F699"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'SRVRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'SrvRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SRVRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 46
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 14,
                  "endLine": 6,
                  "endColumn": 23,
                  "charOffset": 139,
                  "charLength": 9,
                  "snippet": {
                    "text": "SRVRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 2,
                  "charOffset": 111,
                  "charLength": 56,
                  "snippet": {
                    "text": "/// </summary>\npublic class SRVRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B8FD3EB9325A92EDF9ABE7B8C47E44B3F81333A40EEF9F4B7DF7CE15CEEF428B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'StaleNXDOMAINAnswer' does not match rule 'Enum members'. Suggested name is 'StaleNxdomainAnswer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 5,
                  "endLine": 111,
                  "endColumn": 24,
                  "charOffset": 4303,
                  "charLength": 19,
                  "snippet": {
                    "text": "StaleNXDOMAINAnswer"
                  }
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 1,
                  "charOffset": 4280,
                  "charLength": 51,
                  "snippet": {
                    "text": "    /// </summary>\n    StaleNXDOMAINAnswer = 0x13,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F963D9C16FD07050C0325BFE59B9EA88106051F18D0E8FD4C55E956CA6F47D07"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'TC' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Tc'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 17,
                  "endLine": 151,
                  "endColumn": 19,
                  "charOffset": 4928,
                  "charLength": 2,
                  "snippet": {
                    "text": "TC"
                  }
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "endLine": 152,
                  "endColumn": 1,
                  "charOffset": 4872,
                  "charLength": 73,
                  "snippet": {
                    "text": "    /// <seealso cref=\"Truncate(int)\"/>\n    public bool TC { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3819FFE599035E5093EF9E5FFC0106C43259C1C888EB43DAC8FC6D543E7501A3"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'TKEY' does not match rule 'Enum members'. Suggested name is 'Tkey'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 5,
                  "endLine": 270,
                  "endColumn": 9,
                  "charOffset": 8077,
                  "charLength": 4,
                  "snippet": {
                    "text": "TKEY"
                  }
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "endLine": 271,
                  "endColumn": 1,
                  "charOffset": 8036,
                  "charLength": 53,
                  "snippet": {
                    "text": "    /// <seealso cref=\"TKEYRecord\"/>\n    TKEY = 249,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6EB6CB38E3C9855DCB689D03702C5B460B5D9A4DF87B191EE3DCFE43A96BD1C3"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'TKEYRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'TkeyRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 47
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 9,
                  "endColumn": 24,
                  "charOffset": 202,
                  "charLength": 10,
                  "snippet": {
                    "text": "TKEYRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 2,
                  "charOffset": 174,
                  "charLength": 57,
                  "snippet": {
                    "text": "/// </remarks>\npublic class TKEYRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68CE59E2DCC1C5AE838238ED5B45F5640820B64BD1D01F7F86B543D119A1B3E1"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'TSIG' does not match rule 'Enum members'. Suggested name is 'Tsig'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 5,
                  "endLine": 277,
                  "endColumn": 9,
                  "charOffset": 8264,
                  "charLength": 4,
                  "snippet": {
                    "text": "TSIG"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "startColumn": 1,
                  "endLine": 278,
                  "endColumn": 1,
                  "charOffset": 8223,
                  "charLength": 53,
                  "snippet": {
                    "text": "    /// <seealso cref=\"TSIGRecord\"/>\n    TSIG = 250,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2416670D1ADB5FB1971B41F98F3B593452C526B2F5EB97440C4EA683340A6A73"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'TSIGRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'TsigRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 9,
                  "endColumn": 24,
                  "charOffset": 206,
                  "charLength": 10,
                  "snippet": {
                    "text": "TSIGRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 2,
                  "charOffset": 178,
                  "charLength": 57,
                  "snippet": {
                    "text": "/// </remarks>\npublic class TSIGRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1B7F03FD04F000E34D5F9BFBD0DF3B466D50984D71C9BEA427B8D8F103845042"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'TTL' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Ttl'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 27
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 21,
                  "endLine": 77,
                  "endColumn": 24,
                  "charOffset": 2526,
                  "charLength": 3,
                  "snippet": {
                    "text": "TTL"
                  }
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 1,
                  "charOffset": 2469,
                  "charLength": 89,
                  "snippet": {
                    "text": "    /// <seealso cref=\"DefaultTTL\"/>\n    public TimeSpan TTL { get; set; } = DefaultTTL;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3E96AE5370D4D07795166F2C38568D481BBEE1D61C6AC26C09973E5321ED9C05"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'TXT' does not match rule 'Enum members'. Suggested name is 'Txt'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 5,
                  "endLine": 118,
                  "endColumn": 8,
                  "charOffset": 3679,
                  "charLength": 3,
                  "snippet": {
                    "text": "TXT"
                  }
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "endLine": 119,
                  "endColumn": 1,
                  "charOffset": 3639,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// <seealso cref=\"TXTRecord\"/>\n    TXT = 16,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E8A3A0D8576A036F76ED0C23425C07B0A19BFF3F8700AC992686B9CC6C8BA8DB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'TXTRecord' does not match rule 'types_and_namespaces_should_be_pascalcase'. Suggested name is 'TxtRecord'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TXTRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 6
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 14,
                  "endLine": 12,
                  "endColumn": 23,
                  "charOffset": 259,
                  "charLength": 9,
                  "snippet": {
                    "text": "TXTRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 2,
                  "charOffset": 231,
                  "charLength": 56,
                  "snippet": {
                    "text": "/// </remarks>\npublic class TXTRecord : ResourceRecord\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "819EA712654C23BBB4552668D56F73F73695C088A3EF0BC1023B847EBB5B12A4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'URI' does not match rule 'Enum members'. Suggested name is 'Uri'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 5,
                  "endLine": 308,
                  "endColumn": 8,
                  "charOffset": 9228,
                  "charLength": 3,
                  "snippet": {
                    "text": "URI"
                  }
                },
                "contextRegion": {
                  "startLine": 307,
                  "startColumn": 1,
                  "endLine": 309,
                  "endColumn": 1,
                  "charOffset": 9145,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc7553\">RFC 7553</seealso>\n    URI = 256,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A402D8FF21219BB3789B33637172F920507A5EF143152888F678FEB72D42ECB4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'UnsupportedDNSKeyAlgorithm' does not match rule 'Enum members'. Suggested name is 'UnsupportedDnsKeyAlgorithm'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "endLine": 17,
                  "endColumn": 31,
                  "charOffset": 544,
                  "charLength": 26,
                  "snippet": {
                    "text": "UnsupportedDNSKeyAlgorithm"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 1,
                  "charOffset": 521,
                  "charLength": 57,
                  "snippet": {
                    "text": "    /// </summary>\n    UnsupportedDNSKeyAlgorithm = 0x1,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FFED05C796EF16E628691E76766A70F9138A094EE84B526E8E95B6C294B52D72"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'UnsupportedDSDigestType' does not match rule 'Enum members'. Suggested name is 'UnsupportedDsDigestType'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 5,
                  "endLine": 22,
                  "endColumn": 28,
                  "charOffset": 737,
                  "charLength": 23,
                  "snippet": {
                    "text": "UnsupportedDSDigestType"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 714,
                  "charLength": 54,
                  "snippet": {
                    "text": "    /// </summary>\n    UnsupportedDSDigestType = 0x2,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C53AA53EF64A52C1CF1A9CF4BFF43A0EB52D19B8CC61D45FC3E6A97ACB552905"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'UpdateTTL' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'UpdateTtl'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/MulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 7
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 25,
                  "endLine": 649,
                  "endColumn": 34,
                  "charOffset": 22857,
                  "charLength": 9,
                  "snippet": {
                    "text": "UpdateTTL"
                  }
                },
                "contextRegion": {
                  "startLine": 648,
                  "startColumn": 1,
                  "endLine": 650,
                  "endColumn": 6,
                  "charOffset": 22832,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n    private static void UpdateTTL(Message msg, bool legacy)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16085F86D71354F94AEB80DA3F0D09FCC50B6FCC1F08AE6DF7664548690AB976"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'WKS' does not match rule 'Enum members'. Suggested name is 'Wks'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 15
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 5,
                  "endLine": 81,
                  "endColumn": 8,
                  "charOffset": 2424,
                  "charLength": 3,
                  "snippet": {
                    "text": "WKS"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 1,
                  "charOffset": 2341,
                  "charLength": 93,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc3232\">RFC 3232</seealso>\n    WKS = 11,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A6C53AC95D9E745C76678CC71CCBAAA156302FBBF0EAA97FD061762490FE7CF7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'WriteIPAddress' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'WriteIpAddress'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/PresentationWriter.cs",
                  "uriBaseId": "solutionDir",
                  "index": 48
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 17,
                  "endLine": 229,
                  "endColumn": 31,
                  "charOffset": 6335,
                  "charLength": 14,
                  "snippet": {
                    "text": "WriteIPAddress"
                  }
                },
                "contextRegion": {
                  "startLine": 228,
                  "startColumn": 1,
                  "endLine": 230,
                  "endColumn": 1,
                  "charOffset": 6302,
                  "charLength": 137,
                  "snippet": {
                    "text": "    /// </param>\n    public void WriteIPAddress(IPAddress value, bool appendSpace = true) => WriteString(value.ToString(), appendSpace);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B320509131AD2E589C824096D2313DEA7E3D127C863DB8456E2F791F77D17729"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'WriteIPAddress' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'WriteIpAddress'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireWriter.cs",
                  "uriBaseId": "solutionDir",
                  "index": 33
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 17,
                  "endLine": 398,
                  "endColumn": 31,
                  "charOffset": 12717,
                  "charLength": 14,
                  "snippet": {
                    "text": "WriteIPAddress"
                  }
                },
                "contextRegion": {
                  "startLine": 397,
                  "startColumn": 1,
                  "endLine": 399,
                  "endColumn": 1,
                  "charOffset": 12664,
                  "charLength": 125,
                  "snippet": {
                    "text": "    /// <param name=\"value\"></param>\n    public void WriteIPAddress(IPAddress value) => WriteBytes(value.GetAddressBytes());\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6EA4C36A5930BCEAE956D5311AC26B8C0CAB5DCA3A822522CCF96121C6C739E9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'WriteStringUTF8' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'WriteStringUtf8'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireWriter.cs",
                  "uriBaseId": "solutionDir",
                  "index": 33
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 17,
                  "endLine": 316,
                  "endColumn": 32,
                  "charOffset": 10008,
                  "charLength": 15,
                  "snippet": {
                    "text": "WriteStringUTF8"
                  }
                },
                "contextRegion": {
                  "startLine": 315,
                  "startColumn": 1,
                  "endLine": 317,
                  "endColumn": 6,
                  "charOffset": 9973,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </remarks>\n    public void WriteStringUTF8(string value)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44BD51DF715FF18F9E7EC3449ED6FEC85656A043F70109E998E5D984942ACF4D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'WriteStringUTF8Unprefixed' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'WriteStringUtf8Unprefixed'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireWriter.cs",
                  "uriBaseId": "solutionDir",
                  "index": 33
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 17,
                  "endLine": 328,
                  "endColumn": 42,
                  "charOffset": 10302,
                  "charLength": 25,
                  "snippet": {
                    "text": "WriteStringUTF8Unprefixed"
                  }
                },
                "contextRegion": {
                  "startLine": 327,
                  "startColumn": 1,
                  "endLine": 329,
                  "endColumn": 1,
                  "charOffset": 10267,
                  "charLength": 121,
                  "snippet": {
                    "text": "    /// </remarks>\n    public void WriteStringUTF8Unprefixed(string value) => WriteBytes(Encoding.UTF8.GetBytes(value));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "224DCC3C93B6DDEE66C81D6ABC02E5A9F1B4853C8EF2CE889E54153B8C88F8E4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'YXDomain' does not match rule 'Enum members'. Suggested name is 'YxDomain'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MessageStatus.cs",
                  "uriBaseId": "solutionDir",
                  "index": 19
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 5,
                  "endLine": 45,
                  "endColumn": 13,
                  "charOffset": 1116,
                  "charLength": 8,
                  "snippet": {
                    "text": "YXDomain"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 1,
                  "charOffset": 1093,
                  "charLength": 37,
                  "snippet": {
                    "text": "    /// </summary>\n    YXDomain = 6,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FFB0C349DF00932E553BEA1134B1F072E65DA62A313021D97228B7980D6FB647"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'YXRRSet' does not match rule 'Enum members'. Suggested name is 'YxrrSet'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MessageStatus.cs",
                  "uriBaseId": "solutionDir",
                  "index": 19
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 5,
                  "endLine": 50,
                  "endColumn": 12,
                  "charOffset": 1230,
                  "charLength": 7,
                  "snippet": {
                    "text": "YXRRSet"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 1,
                  "charOffset": 1207,
                  "charLength": 36,
                  "snippet": {
                    "text": "    /// </summary>\n    YXRRSet = 7,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2B9A91CB8B5CFBA858E3ED7C847C3E9FC974FDC732C794C1B1A565BAA2E92E93"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'Address.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/AddressRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 49
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 38,
                  "endLine": 17,
                  "endColumn": 41,
                  "charOffset": 366,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 1,
                  "charOffset": 312,
                  "charLength": 61,
                  "snippet": {
                    "text": "    /// </value>\n    public IPAddress? Address { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B89651FD6F60EC9EDAD1B2F6A8F5967A2338BC70C706D75F81CEEC62BDAA3D91"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'Algorithm.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DNSKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 24
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 48,
                  "endLine": 123,
                  "endColumn": 51,
                  "charOffset": 4436,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "endLine": 124,
                  "endColumn": 1,
                  "charOffset": 4370,
                  "charLength": 73,
                  "snippet": {
                    "text": "    /// </remarks>\n    public SecurityAlgorithm? Algorithm { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F2781F83206ACE2956F6DB241848BEF19D211A312F0BC7B0B70EA665967392C7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'Algorithm.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 41,
                  "endLine": 66,
                  "endColumn": 44,
                  "charOffset": 1942,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 1,
                  "charOffset": 1885,
                  "charLength": 64,
                  "snippet": {
                    "text": "    /// </value>\n    public DomainName? Algorithm { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ADCC908D0C313DD02B253F766204C1A53427ABF6872EA1AFC6887D8F505DDFCF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'Authority.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 37
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 41,
                  "endLine": 29,
                  "endColumn": 44,
                  "charOffset": 1177,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 5,
                  "charOffset": 1118,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </summary>\n    public DomainName? Authority { get; set; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D6E81D700ECEBE09241139307CB3EA30D5C250C55BF0B9FA351EB573D7081F6A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'CreationTime.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsObject.cs",
                  "uriBaseId": "solutionDir",
                  "index": 50
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 41,
                  "endLine": 21,
                  "endColumn": 44,
                  "charOffset": 552,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 1,
                  "charOffset": 493,
                  "charLength": 82,
                  "snippet": {
                    "text": "    /// </remarks>\n    public DateTime CreationTime { get; set; } = DateTime.Now;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "202429CC1B4BA2443D6547FC8BA1005BEEA1B607EE073AB4597B717F8CDB5A32"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'Flags.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DNSKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 24
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 34,
                  "endLine": 103,
                  "endColumn": 37,
                  "charOffset": 3890,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 1,
                  "charOffset": 3838,
                  "charLength": 59,
                  "snippet": {
                    "text": "    /// </summary>\n    public DnsKeys? Flags { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6D0815704E59860D50F0F7E07250ACA1F673FA7CE36B6BD7F1EB63D7DEC0B7C5"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'PrimaryName.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SOARecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 45
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 43,
                  "endLine": 36,
                  "endColumn": 46,
                  "charOffset": 1396,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 1,
                  "charOffset": 1335,
                  "charLength": 68,
                  "snippet": {
                    "text": "    /// </summary>\n    public DomainName? PrimaryName { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C7CABD8DE2300026E9D55C678D24AC6D1399C27FC66B8C2ED586FA3F4D7D5B9A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'Target.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/CNAMERecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 20
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 38,
                  "endLine": 22,
                  "endColumn": 41,
                  "charOffset": 746,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 5,
                  "charOffset": 690,
                  "charLength": 67,
                  "snippet": {
                    "text": "    /// </summary>\n    public DomainName? Target { get; set; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B11C9920F5C1A4826211E91AF2D9F3EAE5DEE612BBA46F63D64C6DA434496C3F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'TypeCovered.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 39,
                  "endLine": 22,
                  "endColumn": 42,
                  "charOffset": 684,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 629,
                  "charLength": 62,
                  "snippet": {
                    "text": "    /// </value>\n    public DnsType TypeCovered { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9F5130BB6CDDC2B8D146D2EC7AC58D6D6DCFB77E46689835514CAD0ADFB80334"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'Zone.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 33,
                  "endLine": 99,
                  "endColumn": 36,
                  "charOffset": 3171,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 6,
                  "charOffset": 3122,
                  "charLength": 69,
                  "snippet": {
                    "text": "    /// </value>\n    public Question Zone { get; set; } = new()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5E384F1499B4CE99C47351FD3FC7012A8C2953B2104795D2BE0BFC44EB5A8271"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Field 'ServiceName' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 13
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 5,
                  "endLine": 28,
                  "endColumn": 11,
                  "charOffset": 868,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 1,
                  "charOffset": 847,
                  "charLength": 106,
                  "snippet": {
                    "text": "    /// </value>\n    public static readonly DomainName ServiceName = new(\"_services._dns-sd._udp.local\");\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "69C0FB4068D70B80A82A836D62A6E0A31520114102E0713F496F19FD9A50288F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'AddRange' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/ConcurrentSet.cs",
                  "uriBaseId": "solutionDir",
                  "index": 51
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 5,
                  "endLine": 102,
                  "endColumn": 11,
                  "charOffset": 3520,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "endLine": 103,
                  "endColumn": 6,
                  "charOffset": 3497,
                  "charLength": 73,
                  "snippet": {
                    "text": "    /// </summary>\n    public void AddRange(IEnumerable<T>? values)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "345B7011772C063B83225D157BF232B28C798CF9FF73EF15BA73888514035EF4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'DeleteResource' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateResourceList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 52
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 5,
                  "endLine": 114,
                  "endColumn": 11,
                  "charOffset": 3889,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "endLine": 115,
                  "endColumn": 6,
                  "charOffset": 3829,
                  "charLength": 137,
                  "snippet": {
                    "text": "    /// <seealso cref=\"DeleteResource{T}(DomainName)\"/>\n    public UpdateResourceList DeleteResource(DomainName name, DnsType type)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3C7B217FDF87A60DEDB63DC6CEA9A9E152FEB3D81F35B9C39070D0F59D4071B9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'FindAnswerAsync' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/NameServer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 53
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 5,
                  "endLine": 136,
                  "endColumn": 14,
                  "charOffset": 4913,
                  "charLength": 9,
                  "snippet": {
                    "text": "protected"
                  }
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "endLine": 137,
                  "endColumn": 6,
                  "charOffset": 4890,
                  "charLength": 128,
                  "snippet": {
                    "text": "    /// </remarks>\n    protected Task<bool> FindAnswerAsync(Question question, Message response, CancellationToken cancel)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2A52F77CDBD58FA3F8D84302F747AAC43942D8A16B9E0CA42A9C08ACC6A03CA6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'GetEnumerator' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/ConcurrentSet.cs",
                  "uriBaseId": "solutionDir",
                  "index": 51
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 5,
                  "endLine": 155,
                  "endColumn": 11,
                  "charOffset": 4816,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "endLine": 156,
                  "endColumn": 6,
                  "charOffset": 4758,
                  "charLength": 100,
                  "snippet": {
                    "text": "    /// <returns>An enumerator for the set.</returns>\n    public KeyEnumerator GetEnumerator()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83F3093B929FC7E4B3E0575E62E0AE10C16F3AC499CF1685008B0D63A2EC0244"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'GetId' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/RecentMessages.cs",
                  "uriBaseId": "solutionDir",
                  "index": 8
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 5,
                  "endLine": 87,
                  "endColumn": 11,
                  "charOffset": 2760,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 2,
                  "charOffset": 2737,
                  "charLength": 118,
                  "snippet": {
                    "text": "    /// </returns>\n    public static string GetId(byte[] message) => Convert.ToBase64String(SHA1.HashData(message));\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54C2943F5F624E41A9836E5D1369C4F70EA21CBC48B4EAF6463C60D4A7C259CF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'GetNetworkInterfaces' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/MulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 7
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 5,
                  "endLine": 221,
                  "endColumn": 11,
                  "charOffset": 7903,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "endLine": 222,
                  "endColumn": 6,
                  "charOffset": 7880,
                  "charLength": 95,
                  "snippet": {
                    "text": "    /// </remarks>\n    public static IEnumerable<NetworkInterface> GetNetworkInterfaces()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B677F36F796DBD400478E552F40DE3CF46E48D872B9669F457ED30FD7A11B78E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'LabelsEqual' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DomainName.cs",
                  "uriBaseId": "solutionDir",
                  "index": 54
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 5,
                  "endLine": 315,
                  "endColumn": 11,
                  "charOffset": 9537,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 314,
                  "startColumn": 1,
                  "endLine": 316,
                  "endColumn": 2,
                  "charOffset": 9514,
                  "charLength": 144,
                  "snippet": {
                    "text": "    /// </remarks>\n    public static bool LabelsEqual(string a, string b) => string.Equals(a, b, StringComparison.InvariantCultureIgnoreCase);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "BFC6B707DEC2EF7A29CADDA32E0D98DBF9C8951E29A4412F075BC4B57D2A53D5"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'MustExist' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdatePrerequisiteList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 55
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 5,
                  "endLine": 34,
                  "endColumn": 11,
                  "charOffset": 1373,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 6,
                  "charOffset": 1350,
                  "charLength": 99,
                  "snippet": {
                    "text": "    /// </remarks>\n    public UpdatePrerequisiteList MustExist(DomainName name, DnsType type)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F12C6687924DD5528BB1A31AF1A934187CC6CB7401C93110D2C27E36FCF75BF6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'MustNotExist' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdatePrerequisiteList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 55
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 5,
                  "endLine": 129,
                  "endColumn": 11,
                  "charOffset": 5442,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "endLine": 130,
                  "endColumn": 6,
                  "charOffset": 5419,
                  "charLength": 102,
                  "snippet": {
                    "text": "    /// </remarks>\n    public UpdatePrerequisiteList MustNotExist(DomainName name, DnsType type)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E641C0EA3C1837A9460CDC1DDD58565CE36604F24A0E93E02999DBA6E60272BD"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Prune' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/CachedNameServer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 56
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 11,
                  "charOffset": 490,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 6,
                  "charOffset": 467,
                  "charLength": 68,
                  "snippet": {
                    "text": "    /// </remarks>\n    public void Prune(DateTime? now = null)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54015950CD1D76B278611870008F788AD46CB097158AFA1F695147E0A77F1D0C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Prune' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/RecentMessages.cs",
                  "uriBaseId": "solutionDir",
                  "index": 8
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 5,
                  "endLine": 71,
                  "endColumn": 11,
                  "charOffset": 2270,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 6,
                  "charOffset": 2247,
                  "charLength": 47,
                  "snippet": {
                    "text": "    /// </remarks>\n    public int Prune()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4CEC61CCEF5C4739ABB89CF1040034F851C722D4E163F8EBB737D380D7B056AE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Read' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsObject.cs",
                  "uriBaseId": "solutionDir",
                  "index": 50
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 5,
                  "endLine": 102,
                  "endColumn": 11,
                  "charOffset": 2798,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "endLine": 103,
                  "endColumn": 1,
                  "charOffset": 2777,
                  "charLength": 97,
                  "snippet": {
                    "text": "    /// </param>\n    public IWireSerializer Read(Stream stream) => Read(new WireReader(stream));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23185F71F138E1D43BD4B71AFFFF47E53D052849CA1BD87952017B01845EEDA9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'ReadUInt48' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireReader.cs",
                  "uriBaseId": "solutionDir",
                  "index": 44
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 5,
                  "endLine": 145,
                  "endColumn": 11,
                  "charOffset": 3778,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "endLine": 146,
                  "endColumn": 6,
                  "charOffset": 3753,
                  "charLength": 56,
                  "snippet": {
                    "text": "    /// </exception>\n    public ulong ReadUInt48()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E7BF18AB50940F7268CD7BFDCBAF440DAE2389EC81A851EE1AB9087F57A9C1E1"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Register' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsOptionRegistry%20.cs",
                  "uriBaseId": "solutionDir",
                  "index": 57
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 5,
                  "endLine": 36,
                  "endColumn": 11,
                  "charOffset": 1043,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 6,
                  "charOffset": 1018,
                  "charLength": 91,
                  "snippet": {
                    "text": "    /// </typeparam>\n    public static void Register<T>() where T : EdnsOption, new()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22E8744EEC352FE261A6B5D69D9205A807C07BA68E33FD8D801A3FD139729AB7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'ResolveAsync' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/NameServer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 53
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 5,
                  "endLine": 87,
                  "endColumn": 11,
                  "charOffset": 3048,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 6,
                  "charOffset": 3025,
                  "charLength": 149,
                  "snippet": {
                    "text": "    /// </remarks>\n    public async Task<Message> ResolveAsync(Question question, Message? response = null, CancellationToken cancel = default)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "379901856D7EEB030390D1A748823D3075474C4162CF69E04C9198818C20F37D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Write' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsObject.cs",
                  "uriBaseId": "solutionDir",
                  "index": 50
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 5,
                  "endLine": 126,
                  "endColumn": 11,
                  "charOffset": 3476,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "endLine": 127,
                  "endColumn": 1,
                  "charOffset": 3455,
                  "charLength": 88,
                  "snippet": {
                    "text": "    /// </param>\n    public void Write(Stream stream) => Write(new WireWriter(stream));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F031B4B6E5427919FCC7E341BC69ADFCFA141BCBBBD54C55ED8B45ACA5B5DCAF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'WriteUInt48' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireWriter.cs",
                  "uriBaseId": "solutionDir",
                  "index": 33
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 5,
                  "endLine": 174,
                  "endColumn": 11,
                  "charOffset": 5156,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "endLine": 175,
                  "endColumn": 6,
                  "charOffset": 5133,
                  "charLength": 65,
                  "snippet": {
                    "text": "    /// </summary>\n    public void WriteUInt48(ulong value)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0DC4CAAE1CDB3ADB0FE9DEAAAE086EB8E39C2CB181255E8C780238A0E4F10823"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'AdditionalResources' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 5,
                  "endLine": 136,
                  "endColumn": 11,
                  "charOffset": 4261,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "endLine": 137,
                  "endColumn": 1,
                  "charOffset": 4238,
                  "charLength": 86,
                  "snippet": {
                    "text": "    /// </remarks>\n    public List<ResourceRecord> AdditionalResources { get; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1D582BB823C875970A4D4FAC8DF7E90EFBF6E32673A5384C1CC93F492F5A45D9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Algorithm' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DSRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 26
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 5,
                  "endLine": 77,
                  "endColumn": 11,
                  "charOffset": 2530,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 1,
                  "charOffset": 2507,
                  "charLength": 72,
                  "snippet": {
                    "text": "    /// </summary>\n    public SecurityAlgorithm? Algorithm {get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "55C19B77CFE44D4F2A35A015B6903A393FD8C5AC9608EF3E5CEAB7016405976B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Algorithm' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "endLine": 31,
                  "endColumn": 11,
                  "charOffset": 946,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 1,
                  "charOffset": 925,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </value>\n    public SecurityAlgorithm Algorithm { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "315CEB80B576704D335395B39C7D672F018D4FAF427CAF7B052EE5FE001EF329"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Algorithm' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 47
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 5,
                  "endLine": 33,
                  "endColumn": 11,
                  "charOffset": 909,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 1,
                  "charOffset": 858,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// <seealso cref=\"TSIGRecord.Algorithm\"/>\n    public DomainName? Algorithm { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6153FA0433124C1A29D19D8799D8102A3B910F57888662BCC5571B6E898DAF72"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsDAUOption.cs",
                  "uriBaseId": "solutionDir"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 54,
                  "endLine": 29,
                  "endColumn": 58,
                  "charOffset": 792,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 1,
                  "charOffset": 722,
                  "charLength": 77,
                  "snippet": {
                    "text": "    /// </value>\n    public List<SecurityAlgorithm> Algorithms { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8C20A08D0E51935CEDBE4689D5346BBEB2B6497A234DEC5D2A2826820C15F39B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsDHUOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 47,
                  "endLine": 30,
                  "endColumn": 51,
                  "charOffset": 808,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 1,
                  "charOffset": 745,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </value>\n    public List<DigestType> Algorithms { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F4EFB2599C0E88B3F1969648D0055A274FB96A75BD8EEEDBC871946282C47CE7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsDHUOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 47,
                  "endLine": 30,
                  "endColumn": 51,
                  "charOffset": 808,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 1,
                  "charOffset": 745,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </value>\n    public List<DigestType> Algorithms { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F4EFB2599C0E88B3F1969648D0055A274FB96A75BD8EEEDBC871946282C47CE7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Cpu' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/HINFORecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 31
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "endLine": 23,
                  "endColumn": 11,
                  "charOffset": 671,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 1,
                  "charOffset": 648,
                  "charLength": 56,
                  "snippet": {
                    "text": "    /// </summary>\n    public string? Cpu { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8AAED7F698A058FC03282C8571A47097830A49843DF4D5C0F661617E5037180D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Data' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NULLRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 38
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "endLine": 21,
                  "endColumn": 11,
                  "charOffset": 585,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 1,
                  "charOffset": 562,
                  "charLength": 57,
                  "snippet": {
                    "text": "    /// </summary>\n    public byte[]? Data { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "403FF3F0928D394F2E92539F94851908B2101EF0B1C988F33CE157A7F2443E38"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Data' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NULLRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 38
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "endLine": 21,
                  "endColumn": 11,
                  "charOffset": 585,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 1,
                  "charOffset": 562,
                  "charLength": 57,
                  "snippet": {
                    "text": "    /// </summary>\n    public byte[]? Data { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "403FF3F0928D394F2E92539F94851908B2101EF0B1C988F33CE157A7F2443E38"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Data' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UnknownRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 59
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "endLine": 11,
                  "endColumn": 11,
                  "charOffset": 218,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 5,
                  "charOffset": 195,
                  "charLength": 61,
                  "snippet": {
                    "text": "    /// </summary>\n    public byte[]? Data { get; set; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44ED7B9D7EFD1E1C34BCECAD02028C12D6E70C4E906E59FC648D457B82489AD6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Digest' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DSRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 26
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 5,
                  "endLine": 94,
                  "endColumn": 11,
                  "charOffset": 3069,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "endLine": 95,
                  "endColumn": 1,
                  "charOffset": 3046,
                  "charLength": 59,
                  "snippet": {
                    "text": "    /// </remarks>\n    public byte[]? Digest { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F6BEABB2060C1D9FFB1E89DC37B8AEB55D80993766947F6608A4C834D923BF0A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Domain' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceProfile.cs",
                  "uriBaseId": "solutionDir",
                  "index": 9
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 5,
                  "endLine": 94,
                  "endColumn": 11,
                  "charOffset": 3247,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "endLine": 95,
                  "endColumn": 1,
                  "charOffset": 3226,
                  "charLength": 66,
                  "snippet": {
                    "text": "    /// </value>\n    public DomainName Domain { get; } = \"local\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9D75097AC74C9364A5B2F7C3F9A96901A0318C81779B4F475FAF0C8B9E195E40"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Error' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsErrorOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 60
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 5,
                  "endLine": 26,
                  "endColumn": 11,
                  "charOffset": 627,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 1,
                  "charOffset": 604,
                  "charLength": 67,
                  "snippet": {
                    "text": "    /// </summary>\n    public ExtendedDNSError Error { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8C625B8B037B4EE83A2C97CA8965E7ED87E29095F18E5C212A3B7BC3BBF170FB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Error' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 47
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "endLine": 62,
                  "endColumn": 11,
                  "charOffset": 1647,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 1,
                  "charOffset": 1624,
                  "charLength": 64,
                  "snippet": {
                    "text": "    /// </summary>\n    public MessageStatus Error { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "96A2B13180848367213B0B32C79BAA84FC09DC267FE1ADDE70746BA59C563EE6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Error' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 5,
                  "endLine": 110,
                  "endColumn": 11,
                  "charOffset": 3282,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 1,
                  "charOffset": 3261,
                  "charLength": 87,
                  "snippet": {
                    "text": "    /// </value>\n    public MessageStatus Error { get; set; } = MessageStatus.NoError;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "132F685E67B92C5C02A0D1AC0F32B1634E03762329E907850A08E182199E9083"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Exchange' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MXRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 34
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 5,
                  "endLine": 33,
                  "endColumn": 11,
                  "charOffset": 909,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 5,
                  "charOffset": 888,
                  "charLength": 67,
                  "snippet": {
                    "text": "    /// </value>\n    public DomainName? Exchange { get; set; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3ECFECFCCE1F1129C909E9A36A596A812BAD9FAC359877EB8A499C05DEB0D426"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Expiration' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 47
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "endLine": 49,
                  "endColumn": 11,
                  "charOffset": 1310,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 1,
                  "charOffset": 1289,
                  "charLength": 62,
                  "snippet": {
                    "text": "    /// </value>\n    public DateTime Expiration { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E79F62F2479346207677C236AB3687C73C61F67B200838332BF8B6DB86264AE7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Expire' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SOARecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 45
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 5,
                  "endLine": 70,
                  "endColumn": 11,
                  "charOffset": 2402,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "endLine": 71,
                  "endColumn": 1,
                  "charOffset": 2379,
                  "charLength": 60,
                  "snippet": {
                    "text": "    /// </summary>\n    public TimeSpan Expire { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FDE04FD9EB59AF490B11E7A81D017B0C6AD31BD23EEBE67694804476B4A6DA8F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Flags' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3PARAMRecord%20.cs",
                  "uriBaseId": "solutionDir",
                  "index": 35
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "endLine": 27,
                  "endColumn": 11,
                  "charOffset": 877,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 1,
                  "charOffset": 854,
                  "charLength": 56,
                  "snippet": {
                    "text": "    /// </summary>\n    public byte? Flags { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2894B77E5DFE06013864AC88331C92EA6D81605E62A89A3C533224764AF493D0"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Flags' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3Record.cs",
                  "uriBaseId": "solutionDir",
                  "index": 3
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "endLine": 27,
                  "endColumn": 11,
                  "charOffset": 868,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 1,
                  "charOffset": 845,
                  "charLength": 58,
                  "snippet": {
                    "text": "    /// </summary>\n    public NSEC3s? Flags { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "913DE1288A010A2BEC1F793618AF7B93356C9A73AC611E28022208C9F944FE60"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Fudge' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "endLine": 96,
                  "endColumn": 11,
                  "charOffset": 2821,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 97,
                  "endColumn": 1,
                  "charOffset": 2800,
                  "charLength": 57,
                  "snippet": {
                    "text": "    /// </value>\n    public TimeSpan Fudge { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5400A7EC68ED75CDC48B09804A8CD968EA8F3ADADB87082EFDECECAF55BCE6D5"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'HashAlgorithm' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DSRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 26
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 5,
                  "endLine": 86,
                  "endColumn": 11,
                  "charOffset": 2802,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 1,
                  "charOffset": 2781,
                  "charLength": 68,
                  "snippet": {
                    "text": "    /// </value>\n    public DigestType? HashAlgorithm { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7852F0EEBB8708429EBA4B188DF175C2D9B537AF4BD94B30447F65625A4BC4FA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'HashAlgorithm' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DSRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 26
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 5,
                  "endLine": 86,
                  "endColumn": 11,
                  "charOffset": 2802,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 1,
                  "charOffset": 2781,
                  "charLength": 68,
                  "snippet": {
                    "text": "    /// </value>\n    public DigestType? HashAlgorithm { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7852F0EEBB8708429EBA4B188DF175C2D9B537AF4BD94B30447F65625A4BC4FA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'HashAlgorithm' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DSRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 26
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 5,
                  "endLine": 86,
                  "endColumn": 11,
                  "charOffset": 2802,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 1,
                  "charOffset": 2781,
                  "charLength": 68,
                  "snippet": {
                    "text": "    /// </value>\n    public DigestType? HashAlgorithm { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7852F0EEBB8708429EBA4B188DF175C2D9B537AF4BD94B30447F65625A4BC4FA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Id' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsNSIDOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 28
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "endLine": 23,
                  "endColumn": 11,
                  "charOffset": 582,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 1,
                  "charOffset": 561,
                  "charLength": 53,
                  "snippet": {
                    "text": "    /// </value>\n    public byte[]? Id { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37D59B471EA6EC53852B23763F61C858B8A5AAF7FB582340BBBF03CE244392A6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Id' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 11,
                  "charOffset": 1347,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 1,
                  "charOffset": 1324,
                  "charLength": 54,
                  "snippet": {
                    "text": "    /// </remarks>\n    public ushort Id { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D8F36670B0A220F57416736D65F03142FCD884B7587F46A80C9113AD5EC584AB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Inception' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 47
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 5,
                  "endLine": 41,
                  "endColumn": 11,
                  "charOffset": 1112,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 1,
                  "charOffset": 1091,
                  "charLength": 61,
                  "snippet": {
                    "text": "    /// </value>\n    public DateTime Inception { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "EFD5145138F12DE5282B03F864D5F0497837D2436578B07F12B2E8CBCA3201A6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/RecentMessages.cs",
                  "uriBaseId": "solutionDir",
                  "index": 8
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 37,
                  "endLine": 38,
                  "endColumn": 42,
                  "charOffset": 1156,
                  "charLength": 5,
                  "snippet": {
                    "text": "init;"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 5,
                  "charOffset": 1101,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// </summary>\n    public TimeSpan Interval { get; init; } = TimeSpan.FromSeconds(1);\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "118154C401C809E533E14FD6B6523A3AD9805C167634850763FAC988689B3CCE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Iterations' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3PARAMRecord%20.cs",
                  "uriBaseId": "solutionDir",
                  "index": 35
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 11,
                  "charOffset": 1022,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 1,
                  "charOffset": 999,
                  "charLength": 63,
                  "snippet": {
                    "text": "    /// </summary>\n    public ushort? Iterations { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5D24DB38004FA4D607E790F3F541DDCD5BC8287F3AF5A7154C83ACBD53CA3992"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Iterations' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3PARAMRecord%20.cs",
                  "uriBaseId": "solutionDir",
                  "index": 35
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 11,
                  "charOffset": 1022,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 1,
                  "charOffset": 999,
                  "charLength": 63,
                  "snippet": {
                    "text": "    /// </summary>\n    public ushort? Iterations { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5D24DB38004FA4D607E790F3F541DDCD5BC8287F3AF5A7154C83ACBD53CA3992"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Key' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 47
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 5,
                  "endLine": 70,
                  "endColumn": 11,
                  "charOffset": 1852,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "endLine": 71,
                  "endColumn": 1,
                  "charOffset": 1831,
                  "charLength": 54,
                  "snippet": {
                    "text": "    /// </value>\n    public byte[]? Key { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A80A45856429BC8FC89A8A4A2990518536CC156C76DE79BDF3408AF0A99F749C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'KeyTag' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DSRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 26
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 5,
                  "endLine": 72,
                  "endColumn": 11,
                  "charOffset": 2360,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 1,
                  "charOffset": 2337,
                  "charLength": 59,
                  "snippet": {
                    "text": "    /// </summary>\n    public ushort? KeyTag { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4A3F61574B39B398680C4BE6B8022E16B59EB686BD076951E254BD456D954FFD"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'KeyTag' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 5,
                  "endLine": 74,
                  "endColumn": 11,
                  "charOffset": 2265,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "endLine": 75,
                  "endColumn": 1,
                  "charOffset": 2244,
                  "charLength": 56,
                  "snippet": {
                    "text": "    /// </value>\n    public ushort KeyTag { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B7A18E21A78DB48E45B6D4B33CAB7B05EF9166FE54CBADB57770C32498E2C499"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Labels' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 5,
                  "endLine": 41,
                  "endColumn": 11,
                  "charOffset": 1296,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 1,
                  "charOffset": 1273,
                  "charLength": 56,
                  "snippet": {
                    "text": "    /// </remarks>\n    public byte Labels { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D5AEEF290971D01F1CD3C9D8EEF9B5AD7B2159CEA30B70A7B462E01B39C9DD21"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'MAC' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Mac'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 20,
                  "endLine": 88,
                  "endColumn": 23,
                  "charOffset": 2637,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAC"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 1,
                  "charOffset": 2599,
                  "charLength": 56,
                  "snippet": {
                    "text": "    /// </remarks>\n    public byte[]? MAC { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15A5FFAB30F782F55967A4BB9C0A464EDB8C554299542311A18782097D9ECF2E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Mailbox' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RPRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 42
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "endLine": 23,
                  "endColumn": 11,
                  "charOffset": 619,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 1,
                  "charOffset": 598,
                  "charLength": 80,
                  "snippet": {
                    "text": "    /// </value>\n    public DomainName Mailbox { get; set; } = DomainName.Root;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02D1A5B7CEEC4F6FBA242909ED60B75027CC35F9E1B6FE2FEB934A75C82C0B2C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Mailbox' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SOARecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 45
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "endLine": 42,
                  "endColumn": 11,
                  "charOffset": 1546,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 1,
                  "charOffset": 1523,
                  "charLength": 64,
                  "snippet": {
                    "text": "    /// </summary>\n    public DomainName? Mailbox { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2A02A87AC22ACA70350F9A2BA4A63402BE00A736F1CF222530B8A3314645AFDB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Minimum' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SOARecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 45
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "endLine": 75,
                  "endColumn": 11,
                  "charOffset": 2560,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 1,
                  "charOffset": 2537,
                  "charLength": 61,
                  "snippet": {
                    "text": "    /// </summary>\n    public TimeSpan Minimum { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5CBDFA49A0C3710057926BDFE9EA661AD1B26BEE2DF2765E9085DD1DA9E1478A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Mode' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 47
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 5,
                  "endLine": 57,
                  "endColumn": 11,
                  "charOffset": 1523,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 1,
                  "charOffset": 1502,
                  "charLength": 63,
                  "snippet": {
                    "text": "    /// </value>\n    public KeyExchangeMode Mode { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D2DDD61C19E935D2258E242CE12BC022A8DAED2468D41579BDD73150268DBA06"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'NextHashedOwnerName' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3Record.cs",
                  "uriBaseId": "solutionDir",
                  "index": 3
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 5,
                  "endLine": 45,
                  "endColumn": 11,
                  "charOffset": 1406,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 1,
                  "charOffset": 1383,
                  "charLength": 72,
                  "snippet": {
                    "text": "    /// </summary>\n    public byte[]? NextHashedOwnerName { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50616F783DAB5CB7E25F8140E6B364B3150BDB76971DE44E7BB5228687623FF0"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'NextOwnerName' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSECRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 4
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "endLine": 21,
                  "endColumn": 11,
                  "charOffset": 614,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 1,
                  "charOffset": 591,
                  "charLength": 88,
                  "snippet": {
                    "text": "    /// </remarks>\n    public DomainName NextOwnerName { get; set; } = DomainName.Root;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1BDCD5735309EB79EF8DBAD8ED790193CFF0D6F605C6683490C120972D658BB6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'OS' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Os'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/HINFORecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 31
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 20,
                  "endLine": 28,
                  "endColumn": 22,
                  "charOffset": 793,
                  "charLength": 2,
                  "snippet": {
                    "text": "OS"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 1,
                  "charOffset": 755,
                  "charLength": 55,
                  "snippet": {
                    "text": "    /// </summary>\n    public string? OS { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FD25C7F74D93376E08BA50A686C0FDB97C2BEC7DB6058958A70FF493FA4185D8"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Opcode' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 5,
                  "endLine": 72,
                  "endColumn": 11,
                  "charOffset": 2300,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 1,
                  "charOffset": 2279,
                  "charLength": 93,
                  "snippet": {
                    "text": "    /// </value>\n    public MessageOperation Opcode { get; set; } = MessageOperation.Update;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C1E5C2BF5DD36C98E376546CD7CD7E30E7462A9E15A2753295D9592F413D033D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/OPTRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 5
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 44,
                  "endLine": 125,
                  "endColumn": 48,
                  "charOffset": 3974,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "endLine": 126,
                  "endColumn": 1,
                  "charOffset": 3914,
                  "charLength": 73,
                  "snippet": {
                    "text": "    /// </value>\n    public List<EdnsOption> Options { get; set; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6B23EDFA48D51368C77F95A2C6D6A6EBEE73AC32BDC308ECE60D46B66718EA2E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Origin' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/PresentationReader.cs",
                  "uriBaseId": "solutionDir",
                  "index": 43
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 5,
                  "endLine": 44,
                  "endColumn": 11,
                  "charOffset": 1272,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 1249,
                  "charLength": 81,
                  "snippet": {
                    "text": "    /// </remarks>\n    public DomainName Origin { get; set; } = DomainName.Root;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7F2DC97C81DFE6528A746E7BD6D222B159FCA2C4FCD94D3D5A0D8AD87EACC9D3"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'OriginalMessageId' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 5,
                  "endLine": 101,
                  "endColumn": 11,
                  "charOffset": 2948,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "endLine": 102,
                  "endColumn": 1,
                  "charOffset": 2925,
                  "charLength": 69,
                  "snippet": {
                    "text": "    /// </summary>\n    public ushort OriginalMessageId { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72154A0F6E971D0B73489B97EF5386C3ADEC9C916824277438BD3700A91CB099"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'OriginalTTL' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'OriginalTtl'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21,
                  "endLine": 49,
                  "endColumn": 32,
                  "charOffset": 1538,
                  "charLength": 11,
                  "snippet": {
                    "text": "OriginalTTL"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 1,
                  "charOffset": 1501,
                  "charLength": 63,
                  "snippet": {
                    "text": "    /// </value>\n    public TimeSpan OriginalTTL { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CF901EFC121505A3F4A5FFE53AEF4E3FDE43EAEB5C9B52BF9E479EA02D347471"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'OtherData' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 47
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "endLine": 75,
                  "endColumn": 11,
                  "charOffset": 1949,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 1,
                  "charOffset": 1926,
                  "charLength": 62,
                  "snippet": {
                    "text": "    /// </summary>\n    public byte[]? OtherData { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "AC7244223CB95E3CD0CE882E98294E6F58AE5B837623559D3A1591E64823909C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'OtherData' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 47
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "endLine": 75,
                  "endColumn": 11,
                  "charOffset": 1949,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 1,
                  "charOffset": 1926,
                  "charLength": 62,
                  "snippet": {
                    "text": "    /// </summary>\n    public byte[]? OtherData { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "AC7244223CB95E3CD0CE882E98294E6F58AE5B837623559D3A1591E64823909C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Padding' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsPaddingOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 61
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 5,
                  "endLine": 25,
                  "endColumn": 11,
                  "charOffset": 741,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 1,
                  "charOffset": 720,
                  "charLength": 58,
                  "snippet": {
                    "text": "    /// </value>\n    public byte[]? Padding { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4E98988D3A70D1652850C7A536EB4A18AB86C7B4C70B88C96240DBD8D22FD4E3"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Preference' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MXRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 34
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 5,
                  "endLine": 24,
                  "endColumn": 11,
                  "charOffset": 645,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 1,
                  "charOffset": 624,
                  "charLength": 61,
                  "snippet": {
                    "text": "    /// </value>\n    public ushort? Preference { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "08CB91C1A7F7C1F9C72E0E2D8CC5CBE8DA8518E790A88AF6DCE62C5CEB4861E2"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Prerequisites' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 5,
                  "endLine": 111,
                  "endColumn": 11,
                  "charOffset": 3421,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 1,
                  "charOffset": 3400,
                  "charLength": 80,
                  "snippet": {
                    "text": "    /// </value>\n    public UpdatePrerequisiteList Prerequisites { get; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2F92FED5FBACBFF7E34730FFAC66B2D7DCEEFABE7B59BC6108797EE52E7A8C68"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Priority' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SRVRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 46
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 5,
                  "endLine": 22,
                  "endColumn": 11,
                  "charOffset": 693,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 670,
                  "charLength": 60,
                  "snippet": {
                    "text": "    /// </remarks>\n    public ushort Priority { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FE5FA40A0353FC1E5343874DB372AFD67A87BEE15ED1C18DE5C74F9B50043090"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Protocol' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DNSKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 24
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 5,
                  "endLine": 111,
                  "endColumn": 11,
                  "charOffset": 4022,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 1,
                  "charOffset": 4001,
                  "charLength": 61,
                  "snippet": {
                    "text": "    /// </value>\n    public byte Protocol { get; set; } = 3;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ACFA0707847EEF986E2F936225E81F11215EBE89C1DC35532A5EA9B352755CFE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'PublicKey' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DNSKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 24
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 5,
                  "endLine": 131,
                  "endColumn": 11,
                  "charOffset": 4618,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "endLine": 132,
                  "endColumn": 1,
                  "charOffset": 4597,
                  "charLength": 60,
                  "snippet": {
                    "text": "    /// </value>\n    public byte[]? PublicKey { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "AA7B1426DC9690F06B231117422E5F7D54A1DC6DD81B2AD7F05BE0C38C63E8BD"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'QR' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Qr'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "endLine": 48,
                  "endColumn": 19,
                  "charOffset": 1676,
                  "charLength": 2,
                  "snippet": {
                    "text": "QR"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 1,
                  "charOffset": 1623,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// <seealso cref=\"IsResponse\"/>\n    public bool QR { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "69584A31A3A23720B703ECB8E858BCE3CC58FBA7C63DF158FA6385EB496E75CA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RD' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Rd'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 17,
                  "endLine": 163,
                  "endColumn": 19,
                  "charOffset": 5355,
                  "charLength": 2,
                  "snippet": {
                    "text": "RD"
                  }
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "endLine": 164,
                  "endColumn": 1,
                  "charOffset": 5322,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// </value>\n    public bool RD { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "553A95D5C89CBDA95AC5F5D2DA08531A4FCAD6734A18323B323B7D15FC731DBA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Refresh' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SOARecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 45
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "endLine": 58,
                  "endColumn": 11,
                  "charOffset": 2026,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 1,
                  "charOffset": 2003,
                  "charLength": 61,
                  "snippet": {
                    "text": "    /// </summary>\n    public TimeSpan Refresh { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CC9664F84F5CB88A431FB6E05AB4EA662208949DE366BC258EE1EEED068A62B6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'RequestorPayloadSize' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/OPTRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 5
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "endLine": 51,
                  "endColumn": 11,
                  "charOffset": 1733,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 6,
                  "charOffset": 1653,
                  "charLength": 120,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc6891#section-6.2.3\"/>\n    public ushort RequestorPayloadSize\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "918211BD1CECD3070D50FB1CBBFD53688291DCAEEF9EAF1D656947FAF4CCAA87"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Retry' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SOARecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 45
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 5,
                  "endLine": 63,
                  "endColumn": 11,
                  "charOffset": 2187,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 1,
                  "charOffset": 2164,
                  "charLength": 59,
                  "snippet": {
                    "text": "    /// </summary>\n    public TimeSpan Retry { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63ADDAC3C4ED44F7BE96B8B13429613A8A609B6462210A22AA84591C4C1CB963"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Salt' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3PARAMRecord%20.cs",
                  "uriBaseId": "solutionDir",
                  "index": 35
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 5,
                  "endLine": 40,
                  "endColumn": 11,
                  "charOffset": 1271,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 1,
                  "charOffset": 1248,
                  "charLength": 57,
                  "snippet": {
                    "text": "    /// </remarks>\n    public byte[]? Salt { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31F7D6CAB5D73DCCA15233B5D314124593EFA8DB5F79181DED96FCE5AE1CB217"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Salt' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3PARAMRecord%20.cs",
                  "uriBaseId": "solutionDir",
                  "index": 35
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 5,
                  "endLine": 40,
                  "endColumn": 11,
                  "charOffset": 1271,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 1,
                  "charOffset": 1248,
                  "charLength": 57,
                  "snippet": {
                    "text": "    /// </remarks>\n    public byte[]? Salt { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31F7D6CAB5D73DCCA15233B5D314124593EFA8DB5F79181DED96FCE5AE1CB217"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'SerialNumber' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SOARecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 45
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 5,
                  "endLine": 53,
                  "endColumn": 11,
                  "charOffset": 1889,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 1,
                  "charOffset": 1866,
                  "charLength": 62,
                  "snippet": {
                    "text": "    /// </remarks>\n    public uint SerialNumber { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81D6E6B7B68DF7C6082731B845367518A8D6857874C600396EA625E3B0D860C7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Signature' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 5,
                  "endLine": 88,
                  "endColumn": 11,
                  "charOffset": 2676,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 1,
                  "charOffset": 2655,
                  "charLength": 60,
                  "snippet": {
                    "text": "    /// </value>\n    public byte[]? Signature { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "187CB1688D2C8139F41DAA19E95B5B38A08FE7DE12BC7C12ECC5188CEEF6BC47"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'SignatureExpiration' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 5,
                  "endLine": 57,
                  "endColumn": 11,
                  "charOffset": 1733,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 1,
                  "charOffset": 1712,
                  "charLength": 71,
                  "snippet": {
                    "text": "    /// </value>\n    public DateTime SignatureExpiration { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35538306FD4F312BEC0F9B2B49CECE9C0D6C44DC5B4C29EB672F76EE21973754"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'SignatureInception' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 5,
                  "endLine": 65,
                  "endColumn": 11,
                  "charOffset": 1954,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "endLine": 66,
                  "endColumn": 1,
                  "charOffset": 1933,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </value>\n    public DateTime SignatureInception { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "702A15E5660EA8B4A19EBB127741C43C70D48999AE1B894EDA2971ADEDBD7712"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'SignerName' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RRSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 39
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 5,
                  "endLine": 80,
                  "endColumn": 11,
                  "charOffset": 2455,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "endLine": 81,
                  "endColumn": 1,
                  "charOffset": 2432,
                  "charLength": 67,
                  "snippet": {
                    "text": "    /// </summary>\n    public DomainName? SignerName { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CE7B2A939548E7E0E973B9185D676C4325BF44161A993F2A68E5812BC50FD283"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Status' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 5,
                  "endLine": 89,
                  "endColumn": 11,
                  "charOffset": 2791,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "endLine": 90,
                  "endColumn": 1,
                  "charOffset": 2770,
                  "charLength": 63,
                  "snippet": {
                    "text": "    /// </value>\n    public MessageStatus Status { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F8E58DE346FE0C2F0E6FB9891A33D26A908EFA8F954118C8F85F987D0D697B35"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Subtype' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/AFSDBRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 17
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "endLine": 23,
                  "endColumn": 11,
                  "charOffset": 664,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 1,
                  "charOffset": 643,
                  "charLength": 58,
                  "snippet": {
                    "text": "    /// </value>\n    public ushort? Subtype { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7BB28E67C94CAB2FE81D0621CBA8EFC4C97CDD6D21DC04D6AFD0FE24D30EC78A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'TC' does not match rule 'properties_should_be_pascalcase'. Suggested name is 'Tc'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 17,
                  "endLine": 151,
                  "endColumn": 19,
                  "charOffset": 4928,
                  "charLength": 2,
                  "snippet": {
                    "text": "TC"
                  }
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "endLine": 152,
                  "endColumn": 1,
                  "charOffset": 4872,
                  "charLength": 73,
                  "snippet": {
                    "text": "    /// <seealso cref=\"Truncate(int)\"/>\n    public bool TC { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3819FFE599035E5093EF9E5FFC0106C43259C1C888EB43DAC8FC6D543E7501A3"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Target' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/AFSDBRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 17
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "endLine": 31,
                  "endColumn": 11,
                  "charOffset": 882,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 5,
                  "charOffset": 861,
                  "charLength": 65,
                  "snippet": {
                    "text": "    /// </value>\n    public DomainName? Target { get; set; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "495FBFD6B6C4A4185B85077C1DB45FD5D9D1E140899339658B04BC2B4F854143"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'Target.set' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/CNAMERecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 20
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 38,
                  "endLine": 22,
                  "endColumn": 41,
                  "charOffset": 746,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 5,
                  "charOffset": 690,
                  "charLength": 67,
                  "snippet": {
                    "text": "    /// </summary>\n    public DomainName? Target { get; set; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B11C9920F5C1A4826211E91AF2D9F3EAE5DEE612BBA46F63D64C6DA434496C3F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Text' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsErrorOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 60
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "endLine": 31,
                  "endColumn": 11,
                  "charOffset": 748,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 1,
                  "charOffset": 725,
                  "charLength": 56,
                  "snippet": {
                    "text": "    /// </summary>\n    public string Text { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43926261902553C1FF1F2625D3ADE888DE8B5579A55911A07399071141E43530"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'TextName' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/RPRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 42
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "endLine": 31,
                  "endColumn": 11,
                  "charOffset": 868,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 1,
                  "charOffset": 847,
                  "charLength": 81,
                  "snippet": {
                    "text": "    /// </value>\n    public DomainName TextName { get; set; } = DomainName.Root;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0AF22000A319297C18DAAF9237A979D003DB11BA8687DF6C84EF7A693F70C501"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'TimeSigned' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 5,
                  "endLine": 76,
                  "endColumn": 11,
                  "charOffset": 2223,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "endLine": 77,
                  "endColumn": 1,
                  "charOffset": 2202,
                  "charLength": 62,
                  "snippet": {
                    "text": "    /// </value>\n    public DateTime TimeSigned { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "DD2AD6952883EA059F4C03816F7834C9B71E91F8581D03A1F0E56E7276379874"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Timeout' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsKeepaliveOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 62
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 5,
                  "endLine": 28,
                  "endColumn": 11,
                  "charOffset": 854,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 1,
                  "charOffset": 833,
                  "charLength": 60,
                  "snippet": {
                    "text": "    /// </value>\n    public TimeSpan? Timeout { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82C6070F8695DF78E1B9A7B23DE2C6A2D2E830880BCF79CBF98CFCC398DA5A08"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3Record.cs",
                  "uriBaseId": "solutionDir",
                  "index": 3
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 39,
                  "endLine": 53,
                  "endColumn": 43,
                  "charOffset": 1675,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 1,
                  "charOffset": 1620,
                  "charLength": 68,
                  "snippet": {
                    "text": "    /// </value>\n    public List<DnsType> Types { get; set; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7E11F1C567096077E4896E0440A71D121BDA5762A1DCDDF70A31D5B5824DD8FD"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "AutoPropertyCanBeMadeGetOnly.Global",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Auto-property can be made get-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3Record.cs",
                  "uriBaseId": "solutionDir",
                  "index": 3
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 39,
                  "endLine": 53,
                  "endColumn": 43,
                  "charOffset": 1675,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 1,
                  "charOffset": 1620,
                  "charLength": 68,
                  "snippet": {
                    "text": "    /// </value>\n    public List<DnsType> Types { get; set; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7E11F1C567096077E4896E0440A71D121BDA5762A1DCDDF70A31D5B5824DD8FD"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Updates' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 5,
                  "endLine": 119,
                  "endColumn": 11,
                  "charOffset": 3643,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "endLine": 120,
                  "endColumn": 1,
                  "charOffset": 3622,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </value>\n    public UpdateResourceList Updates { get; } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40D68A2C6D6132C8CF9F3C12416A8F4ACD846CD6D0C05D4730C120549AE5A2F5"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Weight' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SRVRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 46
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 5,
                  "endLine": 33,
                  "endColumn": 11,
                  "charOffset": 1056,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 1,
                  "charOffset": 1033,
                  "charLength": 58,
                  "snippet": {
                    "text": "    /// </remarks>\n    public ushort Weight { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5A1F81D20245D61359D18D5EDFAADA87DF0E1611BB14CF3AB94BBDD54437BFFD"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Z' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 5,
                  "endLine": 181,
                  "endColumn": 11,
                  "charOffset": 5889,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "endLine": 182,
                  "endColumn": 1,
                  "charOffset": 5868,
                  "charLength": 48,
                  "snippet": {
                    "text": "    /// </value>\n    public int Z { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ACB4F4AA91A20CE83E6CAF10591DF05753A23F00FADD9E52FEB6A21406C3BCB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Z' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 5,
                  "endLine": 181,
                  "endColumn": 11,
                  "charOffset": 5889,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "endLine": 182,
                  "endColumn": 1,
                  "charOffset": 5868,
                  "charLength": 48,
                  "snippet": {
                    "text": "    /// </value>\n    public int Z { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ACB4F4AA91A20CE83E6CAF10591DF05753A23F00FADD9E52FEB6A21406C3BCB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBeProtected.Global",
          "ruleIndex": 2265,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'GetData' can be made protected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 27
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 5,
                  "endLine": 121,
                  "endColumn": 11,
                  "charOffset": 3839,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "endLine": 122,
                  "endColumn": 6,
                  "charOffset": 3816,
                  "charLength": 52,
                  "snippet": {
                    "text": "    /// </remarks>\n    public byte[] GetData()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B0ADEF6ED5457BEFE9394332DA0ECB14181887950577A7C8C75C045B8C784014"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBeProtected.Global",
          "ruleIndex": 2265,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Length' can be made protected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsObject.cs",
                  "uriBaseId": "solutionDir",
                  "index": 50
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 29,
                  "endColumn": 11,
                  "charOffset": 755,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 6,
                  "charOffset": 732,
                  "charLength": 48,
                  "snippet": {
                    "text": "    /// </returns>\n    public int Length()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B92C3FE01D811311C0747CBFB7A6C998991D093798C9525534C3FD97033589BF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBeProtected.Global",
          "ruleIndex": 2265,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'ReadData' can be made protected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 27
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 5,
                  "endLine": 169,
                  "endColumn": 11,
                  "charOffset": 5361,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 168,
                  "startColumn": 1,
                  "endLine": 170,
                  "endColumn": 1,
                  "charOffset": 5338,
                  "charLength": 87,
                  "snippet": {
                    "text": "    /// </remarks>\n    public virtual void ReadData(WireReader reader, int length) { }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50BCECBEDC94D73AA977896B7BCB7BF17CB566292C9CA58F984175E46EE8E2FE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBeProtected.Global",
          "ruleIndex": 2265,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'WriteData' can be made protected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 27
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 5,
                  "endLine": 327,
                  "endColumn": 11,
                  "charOffset": 10522,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 326,
                  "startColumn": 1,
                  "endLine": 328,
                  "endColumn": 6,
                  "charOffset": 10499,
                  "charLength": 85,
                  "snippet": {
                    "text": "    /// </remarks>\n    public virtual void WriteData(PresentationWriter writer)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "755AFF91EF64C6D4EF8C158B99FD7AB1E9D663B5E36C4A447F9CE95246B3C73F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "PropertyCanBeMadeInitOnly.Global",
          "ruleIndex": 2404,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property can be made init-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 63
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 39,
                  "endLine": 27,
                  "endColumn": 42,
                  "charOffset": 1046,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 1,
                  "charOffset": 989,
                  "charLength": 64,
                  "snippet": {
                    "text": "    /// </remarks>\n    public EdnsOptionType Type { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6787340F04C7CA58DCF56AC59CF357DC485808956538C452F96B981D5291A7F6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "PropertyCanBeMadeInitOnly.Global",
          "ruleIndex": 2404,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property can be made init-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/OPTRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 5
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 9,
                  "endLine": 54,
                  "endColumn": 12,
                  "charOffset": 1812,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 6,
                  "charOffset": 1774,
                  "charLength": 75,
                  "snippet": {
                    "text": "        get => (ushort)Class;\n        set => Class = (DnsClass)value;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "60B4E778BD9CD54239B0C765D08E0811F9ACDA314D8F60872286F0BB3A7E4CA0"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "PropertyCanBeMadeInitOnly.Global",
          "ruleIndex": 2404,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property can be made init-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/NameServer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 53
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 36,
                  "endLine": 15,
                  "endColumn": 39,
                  "charOffset": 459,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 1,
                  "charOffset": 407,
                  "charLength": 59,
                  "snippet": {
                    "text": "    /// </value>\n    public Catalog? Catalog { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9C729A3A835CD73B31E31C67DC6CDCBB164DC60DB3DCD44A6F9B498F005C4733"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "PropertyCanBeMadeInitOnly.Global",
          "ruleIndex": 2404,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property can be made init-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/NameServer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 53
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 43,
                  "endLine": 29,
                  "endColumn": 46,
                  "charOffset": 1000,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 1,
                  "charOffset": 939,
                  "charLength": 68,
                  "snippet": {
                    "text": "    /// </remarks>\n    public bool AnswerAllQuestions { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2726F3116D69B115E7FF1F19B658FCD1E2D7B87D5917C5CC497816F4D39EB8DC"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "PropertyCanBeMadeInitOnly.Global",
          "ruleIndex": 2404,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property can be made init-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/Node.cs",
                  "uriBaseId": "solutionDir",
                  "index": 64
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 35,
                  "endLine": 22,
                  "endColumn": 38,
                  "charOffset": 651,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 598,
                  "charLength": 79,
                  "snippet": {
                    "text": "    /// </remarks>\n    public DomainName Name { get; set; } = DomainName.Root;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D3D87B34D6BB9EC69729D7578859EC8688A516A9D240ED461866BED97E89EB59"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "PropertyCanBeMadeInitOnly.Global",
          "ruleIndex": 2404,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property can be made init-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/Node.cs",
                  "uriBaseId": "solutionDir",
                  "index": 64
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 59,
                  "endLine": 36,
                  "endColumn": 62,
                  "charOffset": 1094,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 1,
                  "charOffset": 1017,
                  "charLength": 91,
                  "snippet": {
                    "text": "    /// </remarks>\n    public ConcurrentSet<ResourceRecord> Resources { get; set;  } = [];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "10BDC8C6DDCC8A93B752BB51EEE90ABDEBDCC9BE00EF7AECF8724676BEBA92EA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "PropertyCanBeMadeInitOnly.Global",
          "ruleIndex": 2404,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property can be made init-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithmRegistry.cs",
                  "uriBaseId": "solutionDir",
                  "index": 65
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 48,
                  "endLine": 23,
                  "endColumn": 51,
                  "charOffset": 769,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 1,
                  "charOffset": 699,
                  "charLength": 77,
                  "snippet": {
                    "text": "        /// </summary>\n        public DigestType HashAlgorithm { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5B0F5A655C33DFCAC461EF3EBC2AA66FF164CBF1C73F02EE55135543D9FC1359"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "PropertyCanBeMadeInitOnly.Global",
          "ruleIndex": 2404,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property can be made init-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithmRegistry.cs",
                  "uriBaseId": "solutionDir",
                  "index": 65
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 43,
                  "endLine": 28,
                  "endColumn": 46,
                  "charOffset": 921,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 6,
                  "charOffset": 856,
                  "charLength": 83,
                  "snippet": {
                    "text": "        /// </summary>\n        public string[] OtherNames { get; set; } = [];\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9C1DDB96C1780E00180A7A86BC00B7BBE142553788F89093951409E62249699C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "PropertyCanBeMadeInitOnly.Global",
          "ruleIndex": 2404,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property can be made init-only"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireWriter.cs",
                  "uriBaseId": "solutionDir",
                  "index": 33
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 38,
                  "endLine": 48,
                  "endColumn": 41,
                  "charOffset": 1587,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 1,
                  "charOffset": 1476,
                  "charLength": 118,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc4034#section-6.2\"/>\n    public bool CanonicalForm { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89234CAF6CF3CE996AF7574233C225F2EADA98DDC99ADE0FF81744091408608E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "RedundantSwitchExpressionArms",
          "ruleIndex": 2508,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant switch expression arm"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DigestRegistry.cs",
                  "uriBaseId": "solutionDir",
                  "index": 66
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 13,
                  "endLine": 46,
                  "endColumn": 146,
                  "charOffset": 1859,
                  "charLength": 133,
                  "snippet": {
                    "text": "DigestType.GostR34_11_94 => throw new ArgumentOutOfRangeException(nameof(algorithm), algorithm, \"The algorithm is not implemented.\"),"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 122,
                  "charOffset": 1789,
                  "charLength": 325,
                  "snippet": {
                    "text": "            DigestType.Sha512 => SHA512.HashData(stream),\n            DigestType.GostR34_11_94 => throw new ArgumentOutOfRangeException(nameof(algorithm), algorithm, \"The algorithm is not implemented.\"),\n            _ => throw new ArgumentOutOfRangeException(nameof(algorithm), algorithm, \"The algorithm is not implemented.\")"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7721031A0439BA704F36874D882EBF226354F552EA8B83525824F1E3E7480E6A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "High",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/RecentMessages.cs",
                  "uriBaseId": "solutionDir",
                  "index": 8
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "endLine": 17,
                  "endColumn": 64,
                  "charOffset": 438,
                  "charLength": 59,
                  "snippet": {
                    "text": "private readonly TimeProvider _timeProvider = timeProvider;"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 5,
                  "charOffset": 432,
                  "charLength": 70,
                  "snippet": {
                    "text": "{\n    private readonly TimeProvider _timeProvider = timeProvider;\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CC4258AB629FCC238A3DC35B83D14F259AB19E9EC0C9BE71C7ADD70AE4F0D8CC"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.FireTV/FireTVClientFactory.cs",
                  "uriBaseId": "solutionDir",
                  "index": 67
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 5,
                  "endLine": 12,
                  "endColumn": 68,
                  "charOffset": 261,
                  "charLength": 63,
                  "snippet": {
                    "text": "private readonly ILogger<FireTvClientFactory> _logger = logger;"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 91,
                  "charOffset": 255,
                  "charLength": 160,
                  "snippet": {
                    "text": "{\n    private readonly ILogger<FireTvClientFactory> _logger = logger;\n    private readonly ConcurrentDictionary<FireTvClientKey, DeviceClient> _clients = new();"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3CF42B10AD7093088E8431428D487D7B8CF1E48BEB75858E64C7ECD4E497FF51"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedAutoPropertyAccessor.Global",
          "ruleIndex": 2708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Auto-property accessor 'CaseSensitive.get' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Generators.Attributes/EnumJsonConverterAttribute.cs",
                  "uriBaseId": "solutionDir",
                  "index": 71
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 33,
                  "endLine": 17,
                  "endColumn": 37,
                  "charOffset": 559,
                  "charLength": 4,
                  "snippet": {
                    "text": "get;"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 1,
                  "charOffset": 508,
                  "charLength": 63,
                  "snippet": {
                    "text": "    /// </summary>\n    public bool CaseSensitive { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93B930768F0E77275A21355936EDBCFE6E61B5DFB8AACE803AF4785CE4A17CF4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "High",
            "tags": [
              "C#",
              ".NETStandard 2.0"
            ]
          }
        },
        {
          "ruleId": "UnusedAutoPropertyAccessor.Global",
          "ruleIndex": 2708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Auto-property accessor 'EnumType.get' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Generators.Attributes/EnumJsonConverterAttribute.cs",
                  "uriBaseId": "solutionDir",
                  "index": 71
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 28,
                  "endLine": 12,
                  "endColumn": 32,
                  "charOffset": 383,
                  "charLength": 4,
                  "snippet": {
                    "text": "get;"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 1,
                  "charOffset": 337,
                  "charLength": 53,
                  "snippet": {
                    "text": "    /// </summary>\n    public Type EnumType { get; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66142148010FCBFB7A09C4FA91EA50CB61E174D62E2DF9EADDDB48C4055916CA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "High",
            "tags": [
              "C#",
              ".NETStandard 2.0"
            ]
          }
        },
        {
          "ruleId": "UnusedAutoPropertyAccessor.Global",
          "ruleIndex": 2708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Auto-property accessor 'IncludeLoopbackInterfaces.set' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/MulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 7
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 57,
                  "endLine": 183,
                  "endColumn": 61,
                  "charOffset": 6318,
                  "charLength": 4,
                  "snippet": {
                    "text": "set;"
                  }
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "endLine": 184,
                  "endColumn": 1,
                  "charOffset": 6245,
                  "charLength": 80,
                  "snippet": {
                    "text": "    /// </value>\n    public static bool IncludeLoopbackInterfaces { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "AC82A806EDB40CAA9B0D025B6A6655567DDBA70103C8618CDCA98D4A739865BB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "High",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedAutoPropertyAccessor.Global",
          "ruleIndex": 2708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Auto-property accessor 'NetworkInterfaces.get' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/NetworkInterfaceEventArgs.cs",
                  "uriBaseId": "solutionDir",
                  "index": 72
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 63,
                  "endLine": 18,
                  "endColumn": 67,
                  "charOffset": 508,
                  "charLength": 4,
                  "snippet": {
                    "text": "get;"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 2,
                  "charOffset": 429,
                  "charLength": 93,
                  "snippet": {
                    "text": "    /// </value>\n    public IEnumerable<NetworkInterface>? NetworkInterfaces { get; init; }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D01EBE9554C61292BDF60F83B5B921DD6ECD5E5C008B2146F7271B7176AF6B6A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "High",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedAutoPropertyAccessor.Global",
          "ruleIndex": 2708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Auto-property accessor 'PropertyName.get' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Generators.Attributes/EnumJsonConverterAttribute.cs",
                  "uriBaseId": "solutionDir",
                  "index": 71
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 35,
                  "endLine": 27,
                  "endColumn": 39,
                  "charOffset": 986,
                  "charLength": 4,
                  "snippet": {
                    "text": "get;"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 1,
                  "charOffset": 933,
                  "charLength": 65,
                  "snippet": {
                    "text": "    /// </summary>\n    public string? PropertyName { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "99F15DDDC20BBF6A5298F15C46BE0B8EF85A44394BDF19921AE4536B8F179CF2"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "High",
            "tags": [
              "C#",
              ".NETStandard 2.0"
            ]
          }
        },
        {
          "ruleId": "UnusedAutoPropertyAccessor.Global",
          "ruleIndex": 2708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Auto-property accessor 'ServiceInstanceName.get' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceInstanceDiscoveryEventArgs.cs",
                  "uriBaseId": "solutionDir",
                  "index": 73
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 46,
                  "endLine": 15,
                  "endColumn": 50,
                  "charOffset": 518,
                  "charLength": 4,
                  "snippet": {
                    "text": "get;"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 2,
                  "charOffset": 413,
                  "charLength": 119,
                  "snippet": {
                    "text": "    /// <seealso cref=\"ServiceProfile.FullyQualifiedName\"/>\n    public DomainName? ServiceInstanceName { get; init; }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CC23F8B9F9536600380ED001D63DBC7AA4868054BD1362259DAFC2D00A7A7879"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "High",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedAutoPropertyAccessor.Global",
          "ruleIndex": 2708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Auto-property accessor 'ServiceInstanceName.get' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceInstanceDiscoveryEventArgs.cs",
                  "uriBaseId": "solutionDir",
                  "index": 73
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 46,
                  "endLine": 15,
                  "endColumn": 50,
                  "charOffset": 518,
                  "charLength": 4,
                  "snippet": {
                    "text": "get;"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 2,
                  "charOffset": 413,
                  "charLength": 119,
                  "snippet": {
                    "text": "    /// <seealso cref=\"ServiceProfile.FullyQualifiedName\"/>\n    public DomainName? ServiceInstanceName { get; init; }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CC23F8B9F9536600380ED001D63DBC7AA4868054BD1362259DAFC2D00A7A7879"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "High",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Accessor 'Version.set' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/OPTRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 5
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 9,
                  "endLine": 91,
                  "endColumn": 12,
                  "charOffset": 2912,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  }
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "endLine": 92,
                  "endColumn": 38,
                  "charOffset": 2827,
                  "charLength": 129,
                  "snippet": {
                    "text": "        get => (byte)(((TTL.Ticks / TimeSpan.TicksPerSecond) >> 16) & 0xff);\n        set =>\n            TTL = TimeSpan.FromTicks("
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E03D96F304CAA9DBF4AE551A7A7A3460C2D13A7293D801B9BCA842B7B62510A7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'GSSTSIG' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Gsstsig'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 25,
                  "endLine": 19,
                  "endColumn": 32,
                  "charOffset": 507,
                  "charLength": 7,
                  "snippet": {
                    "text": "GSSTSIG"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 1,
                  "charOffset": 464,
                  "charLength": 65,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string GSSTSIG = \"gss-tsig\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "DFD32887A5FC62CB3BF6A0F58294C8BEEBAD7822CD93B3D8AF8F213BD09E710E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACMD5' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacmd5'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 25,
                  "endLine": 14,
                  "endColumn": 32,
                  "charOffset": 352,
                  "charLength": 7,
                  "snippet": {
                    "text": "HMACMD5"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 1,
                  "charOffset": 309,
                  "charLength": 81,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACMD5 = \"HMAC-MD5.SIG-ALG.REG.INT\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "EA256241610806F855D6A3BA2629E98C0E3DBEDC49F6EB90C78ADC73C9E9E87A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACSHA1' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacsha1'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 25,
                  "endLine": 24,
                  "endColumn": 33,
                  "charOffset": 647,
                  "charLength": 8,
                  "snippet": {
                    "text": "HMACSHA1"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 1,
                  "charOffset": 604,
                  "charLength": 67,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACSHA1 = \"hmac-sha1\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7FD4BDC6230F833381D9FC46CBDEFD8EBFD2A470693A6C0D4B00E3DDECB2B393"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACSHA224' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacsha224'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 25,
                  "endLine": 29,
                  "endColumn": 35,
                  "charOffset": 791,
                  "charLength": 10,
                  "snippet": {
                    "text": "HMACSHA224"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 1,
                  "charOffset": 748,
                  "charLength": 71,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACSHA224 = \"hmac-sha224\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4CBC1E5B645835A2E2FE9353ABBE96297F5A0029471E877A1E63DCA3EC55F68E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACSHA256' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacsha256'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 25,
                  "endLine": 34,
                  "endColumn": 35,
                  "charOffset": 939,
                  "charLength": 10,
                  "snippet": {
                    "text": "HMACSHA256"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 1,
                  "charOffset": 896,
                  "charLength": 71,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACSHA256 = \"hmac-sha256\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6C9A3A2FE6E3422784EFDA4B22ED978A610E13E118920C4BC05FEAD544DAF102"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACSHA384' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacsha384'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 25,
                  "endLine": 39,
                  "endColumn": 35,
                  "charOffset": 1087,
                  "charLength": 10,
                  "snippet": {
                    "text": "HMACSHA384"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 1,
                  "charOffset": 1044,
                  "charLength": 71,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACSHA384 = \"hmac-sha384\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0FCB9D0167AB9D25B83577F6013D031D4E07B55C73DB1D9E938F7740AC9EF9E5"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'HMACSHA512' does not match rule 'public_constant_fields_should_be_pascalcase'. Suggested name is 'Hmacsha512'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/TSIGRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 29
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 25,
                  "endLine": 44,
                  "endColumn": 35,
                  "charOffset": 1235,
                  "charLength": 10,
                  "snippet": {
                    "text": "HMACSHA512"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 1192,
                  "charLength": 71,
                  "snippet": {
                    "text": "    /// </summary>\n    public const string HMACSHA512 = \"hmac-sha512\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52BE346A565D3ABB23C8E7AFC8A625D1A91314CBC878ADA127D7BBA470493197"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Constant 'MinLength' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 22,
                  "endLine": 35,
                  "endColumn": 31,
                  "charOffset": 969,
                  "charLength": 9,
                  "snippet": {
                    "text": "MinLength"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 1,
                  "charOffset": 931,
                  "charLength": 54,
                  "snippet": {
                    "text": "    /// </value>\n    public const int MinLength = 12;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FCD8CB9D87D7B0A03B21F7ADFD5AC3C2580C991B139C68125F9D1C15447B3DEB"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Constructor 'ConcurrentSet' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/ConcurrentSet.cs",
                  "uriBaseId": "solutionDir",
                  "index": 51
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 12,
                  "endLine": 51,
                  "endColumn": 25,
                  "charOffset": 1925,
                  "charLength": 13,
                  "snippet": {
                    "text": "ConcurrentSet"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 6,
                  "charOffset": 1822,
                  "charLength": 161,
                  "snippet": {
                    "text": "    /// <param name=\"equalityComparer\">The equality comparer for values in the set.</param>\n    public ConcurrentSet(IEqualityComparer<T> equalityComparer)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F327ACBD79507E1C3A91586CEF3C936F97EBC67BD4CD6BB72FFA603A1CFACAF4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Constructor 'DNSKEYRecord' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DNSKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 24
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 12,
                  "endLine": 25,
                  "endColumn": 24,
                  "charOffset": 735,
                  "charLength": 12,
                  "snippet": {
                    "text": "DNSKEYRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 6,
                  "charOffset": 707,
                  "charLength": 84,
                  "snippet": {
                    "text": "    /// </param>\n    public DNSKEYRecord(RSA key, SecurityAlgorithm algorithm)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8E2B61FE8330285923A34AEA6AA8CBB87B9192FBA1F31CAC1E5259F36EF17283"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Constructor 'DNSKEYRecord' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DNSKEYRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 24
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 12,
                  "endLine": 69,
                  "endColumn": 24,
                  "charOffset": 2491,
                  "charLength": 12,
                  "snippet": {
                    "text": "DNSKEYRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 6,
                  "charOffset": 2461,
                  "charLength": 59,
                  "snippet": {
                    "text": "    /// </remarks>\n    public DNSKEYRecord(ECDsa key)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "027A0BBD375259E33FA027087CB2A9292BD1230D800410B087C50D10A0EADE73"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Constructor 'DSRecord' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DSRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 26
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 12,
                  "endLine": 35,
                  "endColumn": 20,
                  "charOffset": 1115,
                  "charLength": 8,
                  "snippet": {
                    "text": "DSRecord"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 17,
                  "charOffset": 1083,
                  "charLength": 96,
                  "snippet": {
                    "text": "    /// </exception>\n    public DSRecord(DNSKEYRecord key, bool force = false) \n        : this()"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9B237AF0580D8CF0B65486ABA0F3DF395D89056C49EBF0C54B9EC60D3C337F15"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Constructor 'ServiceProfile' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/ServiceProfile.cs",
                  "uriBaseId": "solutionDir",
                  "index": 9
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 12,
                  "endLine": 23,
                  "endColumn": 26,
                  "charOffset": 686,
                  "charLength": 14,
                  "snippet": {
                    "text": "ServiceProfile"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 6,
                  "charOffset": 656,
                  "charLength": 52,
                  "snippet": {
                    "text": "    /// </remarks>\n    public ServiceProfile()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B28F871001B0DB395BF297F99127B605BD437E66E869ABBC8796A43C42686E27"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'BadSignature' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MessageStatus.cs",
                  "uriBaseId": "solutionDir",
                  "index": 19
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 5,
                  "endLine": 76,
                  "endColumn": 17,
                  "charOffset": 1844,
                  "charLength": 12,
                  "snippet": {
                    "text": "BadSignature"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "endLine": 77,
                  "endColumn": 1,
                  "charOffset": 1821,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// </summary>\n    BadSignature = BadVersion,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5409832EAC5FF2A00D905336EB86D0649B56D8EE5662A7F3F4D6A39477E95763"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'Blocked' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 5,
                  "endLine": 89,
                  "endColumn": 12,
                  "charOffset": 3370,
                  "charLength": 7,
                  "snippet": {
                    "text": "Blocked"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "endLine": 90,
                  "endColumn": 1,
                  "charOffset": 3347,
                  "charLength": 38,
                  "snippet": {
                    "text": "    /// </summary>\n    Blocked = 0xF,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B59A4AACB3DE9195411B356760C2DBEAF1AE1B1C36FF28A12F2CBAF131E9F76C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'CachedError' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 5,
                  "endLine": 78,
                  "endColumn": 16,
                  "charOffset": 2933,
                  "charLength": 11,
                  "snippet": {
                    "text": "CachedError"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 79,
                  "endColumn": 1,
                  "charOffset": 2910,
                  "charLength": 42,
                  "snippet": {
                    "text": "    /// </summary>\n    CachedError = 0xD,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6E3358EEAF02F28CB3558C5860266D038D24F9F0016FD59B27FF32B29C146DEE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'Censored' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "endLine": 95,
                  "endColumn": 13,
                  "charOffset": 3653,
                  "charLength": 8,
                  "snippet": {
                    "text": "Censored"
                  }
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 1,
                  "charOffset": 3630,
                  "charLength": 40,
                  "snippet": {
                    "text": "    /// </summary>\n    Censored = 0x10,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3CAEF85FB365CB962D83ADC49F18E9BD14EC89B799EFC96FC9B4F00AF14465B6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'Chain' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 5,
                  "endLine": 81,
                  "endColumn": 10,
                  "charOffset": 2296,
                  "charLength": 5,
                  "snippet": {
                    "text": "Chain"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 1,
                  "charOffset": 2230,
                  "charLength": 78,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc7901\"/>\n    Chain = 13,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5C4DBC0F6A1219C9347CE0D10A00FB45D20C3B8E4FB3C5B6EB96B8AB1CF2EA3A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'ClientSubnet' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "endLine": 49,
                  "endColumn": 17,
                  "charOffset": 1384,
                  "charLength": 12,
                  "snippet": {
                    "text": "ClientSubnet"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 1,
                  "charOffset": 1318,
                  "charLength": 84,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc7871\"/>\n    ClientSubnet = 8,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "452613DD6EEBB1EB97FF915D44F3AB071480E223F9AEDC46C71332EDE5D476DE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'Cookie' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 5,
                  "endLine": 61,
                  "endColumn": 11,
                  "charOffset": 1727,
                  "charLength": 6,
                  "snippet": {
                    "text": "Cookie"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 1,
                  "charOffset": 1661,
                  "charLength": 79,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc7873\"/>\n    Cookie = 10,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D0E1FCBFF4641E7B12ACE032E54AE7E17E40495373E7DDB4E6933D5EB6C05ECA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DELETE' does not match rule 'Enum members'. Suggested name is 'Delete'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 11,
                  "charOffset": 575,
                  "charLength": 6,
                  "snippet": {
                    "text": "DELETE"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 1,
                  "charOffset": 552,
                  "charLength": 35,
                  "snippet": {
                    "text": "    /// </summary>\n    DELETE = 0,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6B3C1843083B10344F17BD3D60F4E1F1A5BABCD56E0DE91F7B9ED1B4EFF6FB2D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DH' does not match rule 'Enum members'. Suggested name is 'Dh'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "endLine": 31,
                  "endColumn": 7,
                  "charOffset": 886,
                  "charLength": 2,
                  "snippet": {
                    "text": "DH"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 1,
                  "charOffset": 863,
                  "charLength": 31,
                  "snippet": {
                    "text": "    /// </summary>\n    DH = 2,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00373DBF42E57B9D9722B7CE02D12DF6C26F57E55D8179AA7E82EB574B4C7014"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DNSKeyMissing' does not match rule 'Enum members'. Suggested name is 'DnsKeyMissing'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "endLine": 58,
                  "endColumn": 18,
                  "charOffset": 2226,
                  "charLength": 13,
                  "snippet": {
                    "text": "DNSKeyMissing"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 1,
                  "charOffset": 2203,
                  "charLength": 44,
                  "snippet": {
                    "text": "    /// </summary>\n    DNSKeyMissing = 0x9,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E98E7CA747C69CFC42B13D7A55E4F64DCBCAD74028F7D4DF530CADC431DFE165"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DNSSECBogus' does not match rule 'Enum members'. Suggested name is 'DnssecBogus'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "endLine": 43,
                  "endColumn": 16,
                  "charOffset": 1649,
                  "charLength": 11,
                  "snippet": {
                    "text": "DNSSECBogus"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 1,
                  "charOffset": 1626,
                  "charLength": 42,
                  "snippet": {
                    "text": "    /// </summary>\n    DNSSECBogus = 0x6,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "173E9D19EF62F2F808AEDA7731315C01B9736CDE52D8256EE23C066524705F24"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DNSSECIndeterminate' does not match rule 'Enum members'. Suggested name is 'DnssecIndeterminate'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 24,
                  "charOffset": 1478,
                  "charLength": 19,
                  "snippet": {
                    "text": "DNSSECIndeterminate"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 1,
                  "charOffset": 1455,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// </summary>\n    DNSSECIndeterminate = 0x5,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F29428B326A40FD22B2595FE22C212D07396E292E19C1F3F13F6DA05383EED68"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'DiffieHellman' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/KeyExchangeMode.cs",
                  "uriBaseId": "solutionDir",
                  "index": 75
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "endLine": 16,
                  "endColumn": 18,
                  "charOffset": 309,
                  "charLength": 13,
                  "snippet": {
                    "text": "DiffieHellman"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 1,
                  "charOffset": 286,
                  "charLength": 42,
                  "snippet": {
                    "text": "    /// </summary>\n    DiffieHellman = 2,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C9AC9E20FA8C05C2EF31685518B35A8DB06F25AC14FAF88E135C89A03B0EE9DF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ECCGOST' does not match rule 'Enum members'. Suggested name is 'Eccgost'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 5,
                  "endLine": 66,
                  "endColumn": 12,
                  "charOffset": 1439,
                  "charLength": 7,
                  "snippet": {
                    "text": "ECCGOST"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 1,
                  "charOffset": 1416,
                  "charLength": 37,
                  "snippet": {
                    "text": "    /// </summary>\n    ECCGOST = 12,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15439F73955480C5AC0E0FFE5EE16BCC3DFA341758F4C622301F2B069425310D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ED25519' does not match rule 'Enum members'. Suggested name is 'Ed25519'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 5,
                  "endLine": 81,
                  "endColumn": 12,
                  "charOffset": 1720,
                  "charLength": 7,
                  "snippet": {
                    "text": "ED25519"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 1,
                  "charOffset": 1697,
                  "charLength": 37,
                  "snippet": {
                    "text": "    /// </summary>\n    ED25519 = 15,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E03F5BBBFD2F7AFEDE0315F86D3379965B47E89EF62534062E7EBBB9C6DFFB36"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ED448' does not match rule 'Enum members'. Suggested name is 'Ed448'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 5,
                  "endLine": 86,
                  "endColumn": 10,
                  "charOffset": 1791,
                  "charLength": 5,
                  "snippet": {
                    "text": "ED448"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 1,
                  "charOffset": 1768,
                  "charLength": 35,
                  "snippet": {
                    "text": "    /// </summary>\n    ED448 = 16,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7FB7EE4306BB069719CC65D7EE78311D2D329939F863ECB995182183F3DFE0DF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'ExperimentalMax' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 5,
                  "endLine": 105,
                  "endColumn": 20,
                  "charOffset": 2975,
                  "charLength": 15,
                  "snippet": {
                    "text": "ExperimentalMax"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 1,
                  "charOffset": 2909,
                  "charLength": 91,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc6891\"/>\n    ExperimentalMax = 65534,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2D2BA2D3EF1E1ABBC79042321C6EE094C52B60118A599010CE249CFCC07ED128"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'ExperimentalMin' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 5,
                  "endLine": 99,
                  "endColumn": 20,
                  "charOffset": 2792,
                  "charLength": 15,
                  "snippet": {
                    "text": "ExperimentalMin"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 1,
                  "charOffset": 2726,
                  "charLength": 91,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc6891\"/>\n    ExperimentalMin = 65001,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9CD605325AADEDDE0BB764C8F6849AB2CE742CA824842781D8EACFEF8BF9B935"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'Expire' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 5,
                  "endLine": 55,
                  "endColumn": 11,
                  "charOffset": 1567,
                  "charLength": 6,
                  "snippet": {
                    "text": "Expire"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 1,
                  "charOffset": 1501,
                  "charLength": 78,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc7314\"/>\n    Expire = 9,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26FBA8B08908044F715DCF960D185AFDB3F7B0EFCD4351CB0577A673CEE777DE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'Filtered' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 5,
                  "endLine": 100,
                  "endColumn": 13,
                  "charOffset": 3832,
                  "charLength": 8,
                  "snippet": {
                    "text": "Filtered"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "endLine": 101,
                  "endColumn": 1,
                  "charOffset": 3809,
                  "charLength": 40,
                  "snippet": {
                    "text": "    /// </summary>\n    Filtered = 0x11,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3C17B312CB9E1C7DAFF4D8CD6901F1FF668ABFD10523560C01B910976001F1D9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'ForgedAnswer' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 5,
                  "endLine": 33,
                  "endColumn": 17,
                  "charOffset": 1307,
                  "charLength": 12,
                  "snippet": {
                    "text": "ForgedAnswer"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 1,
                  "charOffset": 1284,
                  "charLength": 43,
                  "snippet": {
                    "text": "    /// </summary>\n    ForgedAnswer = 0x4,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76E45A52D23F4B48940D740814AA044B2F565052ADEC2AFF6F94006EC02D69A4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'FutureExpansion' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 5,
                  "endLine": 111,
                  "endColumn": 20,
                  "charOffset": 3145,
                  "charLength": 15,
                  "snippet": {
                    "text": "FutureExpansion"
                  }
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 2,
                  "charOffset": 3079,
                  "charLength": 92,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc6891\"/>\n    FutureExpansion = 65535 \n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D215FFD97301D0C86A37021D94D1B8A5B113C0F4B10DE769053F48618FF3E93B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'GssApi' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/KeyExchangeMode.cs",
                  "uriBaseId": "solutionDir",
                  "index": 75
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "endLine": 21,
                  "endColumn": 11,
                  "charOffset": 400,
                  "charLength": 6,
                  "snippet": {
                    "text": "GssApi"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 1,
                  "charOffset": 377,
                  "charLength": 35,
                  "snippet": {
                    "text": "    /// </summary>\n    GssApi = 3,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1D0CCFFD93355AF5E659059481F3D0FB44B324E66A7C124BCA0C9A53AB063D64"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'INDIRECT' does not match rule 'Enum members'. Suggested name is 'Indirect'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 5,
                  "endLine": 91,
                  "endColumn": 13,
                  "charOffset": 1868,
                  "charLength": 8,
                  "snippet": {
                    "text": "INDIRECT"
                  }
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "endLine": 92,
                  "endColumn": 1,
                  "charOffset": 1845,
                  "charLength": 39,
                  "snippet": {
                    "text": "    /// </summary>\n    INDIRECT = 252,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "440A306E30B15A1A3F3F500F272494F848DE0D00EEC12F283D5466E09BE7D37A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'InvalidData' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 5,
                  "endLine": 137,
                  "endColumn": 16,
                  "charOffset": 5250,
                  "charLength": 11,
                  "snippet": {
                    "text": "InvalidData"
                  }
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "endLine": 138,
                  "endColumn": 2,
                  "charOffset": 5227,
                  "charLength": 43,
                  "snippet": {
                    "text": "    /// </summary>\n    InvalidData = 0x18\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "913757761AEC97C2789F32E51A2CBDA29763F43AB34D014913E68FD3C5EC2B30"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'InverseQuery' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MessageOperation.cs",
                  "uriBaseId": "solutionDir",
                  "index": 76
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 5,
                  "endLine": 22,
                  "endColumn": 17,
                  "charOffset": 597,
                  "charLength": 12,
                  "snippet": {
                    "text": "InverseQuery"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 574,
                  "charLength": 41,
                  "snippet": {
                    "text": "    /// </summary>\n    InverseQuery = 1,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "880B433182145EF59911CA7C5B3CD202496B91C303446E86FD0496197AEFD6D1"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'KeyDeletion' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/KeyExchangeMode.cs",
                  "uriBaseId": "solutionDir",
                  "index": 75
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "endLine": 31,
                  "endColumn": 16,
                  "charOffset": 575,
                  "charLength": 11,
                  "snippet": {
                    "text": "KeyDeletion"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 2,
                  "charOffset": 552,
                  "charLength": 40,
                  "snippet": {
                    "text": "    /// </summary>\n    KeyDeletion = 5\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A3AFB9AB61658DFA6BD2E2BC3C30C5A480C5449DA8CD3B9EB955D3244323DA3B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'KeyTag' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 5,
                  "endLine": 87,
                  "endColumn": 11,
                  "charOffset": 2467,
                  "charLength": 6,
                  "snippet": {
                    "text": "KeyTag"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 1,
                  "charOffset": 2401,
                  "charLength": 79,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc8145\"/>\n    KeyTag = 14,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "973ED0268DBC150CD168B51F357E22E1A27FF1499C773BD93D2CEE749DE46370"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'LLQ' does not match rule 'Enum members'. Suggested name is 'Llq'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdsnOptionType.cs",
                  "uriBaseId": "solutionDir",
                  "index": 21
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 8,
                  "charOffset": 579,
                  "charLength": 3,
                  "snippet": {
                    "text": "LLQ"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 5,
                  "charOffset": 513,
                  "charLength": 79,
                  "snippet": {
                    "text": "    /// <seealso href=\"https://tools.ietf.org/html/rfc8764\"/>\n    LLQ = 1,\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FEA7289BA0ECA8CF878DC71E4B74903251ABAFC29BDE5BAE34168CDDD58D0B50"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'NSECMissing' does not match rule 'Enum members'. Suggested name is 'NsecMissing'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 5,
                  "endLine": 73,
                  "endColumn": 16,
                  "charOffset": 2803,
                  "charLength": 11,
                  "snippet": {
                    "text": "NSECMissing"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 74,
                  "endColumn": 1,
                  "charOffset": 2780,
                  "charLength": 42,
                  "snippet": {
                    "text": "    /// </summary>\n    NSECMissing = 0xC,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72798E6EEFE9D50C60257C4FDF52141389A7BD2C8D23D2718D09B7722B3BE056"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'NetworkError' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 5,
                  "endLine": 132,
                  "endColumn": 17,
                  "charOffset": 5079,
                  "charLength": 12,
                  "snippet": {
                    "text": "NetworkError"
                  }
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "endLine": 133,
                  "endColumn": 1,
                  "charOffset": 5056,
                  "charLength": 44,
                  "snippet": {
                    "text": "    /// </summary>\n    NetworkError = 0x17,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81EF01AB24BC60EDB31F5A59EBAD43B04E1FBD8C6051F6233A62001E0C1F79C5"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'NoReachableAuthority' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 5,
                  "endLine": 127,
                  "endColumn": 25,
                  "charOffset": 4927,
                  "charLength": 20,
                  "snippet": {
                    "text": "NoReachableAuthority"
                  }
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "endLine": 128,
                  "endColumn": 1,
                  "charOffset": 4904,
                  "charLength": 52,
                  "snippet": {
                    "text": "    /// </summary>\n    NoReachableAuthority = 0x16,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5492A96A1FE41F863D81144A83821FC3D127DE5118E32878EF5DF9330AE4406B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'NoZoneKeyBitSet' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 5,
                  "endLine": 68,
                  "endColumn": 20,
                  "charOffset": 2595,
                  "charLength": 15,
                  "snippet": {
                    "text": "NoZoneKeyBitSet"
                  }
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 69,
                  "endColumn": 1,
                  "charOffset": 2572,
                  "charLength": 46,
                  "snippet": {
                    "text": "    /// </summary>\n    NoZoneKeyBitSet = 0xB,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4A5B8FBF4EA0C9FD1600CCEB14C9A544A8E95CC33BDCCF8339EDB8E0D9311511"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'NotAuthoritative' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 5,
                  "endLine": 117,
                  "endColumn": 21,
                  "charOffset": 4623,
                  "charLength": 16,
                  "snippet": {
                    "text": "NotAuthoritative"
                  }
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "endLine": 118,
                  "endColumn": 1,
                  "charOffset": 4600,
                  "charLength": 48,
                  "snippet": {
                    "text": "    /// </summary>\n    NotAuthoritative = 0x14,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B041838D8178F6D1F3DF100F79D7C84643599DFF2B8846A6E2886888AABCAA0D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'NotReady' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 5,
                  "endLine": 83,
                  "endColumn": 13,
                  "charOffset": 3104,
                  "charLength": 8,
                  "snippet": {
                    "text": "NotReady"
                  }
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "endLine": 84,
                  "endColumn": 1,
                  "charOffset": 3081,
                  "charLength": 39,
                  "snippet": {
                    "text": "    /// </summary>\n    NotReady = 0xE,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4448527A2F8CDE8A9EF5E030DF16D1E0AD5D3E931F327C33F4D8D14B0D15E3B0"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'Notify' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MessageOperation.cs",
                  "uriBaseId": "solutionDir",
                  "index": 76
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 11,
                  "charOffset": 824,
                  "charLength": 6,
                  "snippet": {
                    "text": "Notify"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 1,
                  "charOffset": 801,
                  "charLength": 35,
                  "snippet": {
                    "text": "    /// </summary>\n    Notify = 4,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4E6F1EBC59D53EEF964CC84E7AF7093ACBA9D77CBF130802EF8557729C3F75ED"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'OptOut' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/NSEC3s.cs",
                  "uriBaseId": "solutionDir",
                  "index": 36
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 5,
                  "endLine": 15,
                  "endColumn": 11,
                  "charOffset": 433,
                  "charLength": 6,
                  "snippet": {
                    "text": "OptOut"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 2,
                  "charOffset": 410,
                  "charLength": 38,
                  "snippet": {
                    "text": "    /// </summary>\n    OptOut = 0x01\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9577A2E9FBB2623BEF34772443CB68F70F122D988A127200D86210222F3DA0EE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'Other' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 5,
                  "endLine": 12,
                  "endColumn": 10,
                  "charOffset": 363,
                  "charLength": 5,
                  "snippet": {
                    "text": "Other"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 1,
                  "charOffset": 340,
                  "charLength": 36,
                  "snippet": {
                    "text": "    /// </summary>\n    Other = 0x0,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A54AE5F7B8A65E5997373EAEB29DBD9C0CE08783E7CAC05CA8326BC6A087FE1E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'PRIVATEDNS' does not match rule 'Enum members'. Suggested name is 'Privatedns'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "endLine": 96,
                  "endColumn": 15,
                  "charOffset": 1953,
                  "charLength": 10,
                  "snippet": {
                    "text": "PRIVATEDNS"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 97,
                  "endColumn": 1,
                  "charOffset": 1930,
                  "charLength": 41,
                  "snippet": {
                    "text": "    /// </summary>\n    PRIVATEDNS = 253,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5F8EBCEA87E58D8AFDDC0749D0B5F2708421742BDE7695E951656685969FEDC6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'PRIVATEOID' does not match rule 'Enum members'. Suggested name is 'Privateoid'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/SecurityAlgorithm.cs",
                  "uriBaseId": "solutionDir",
                  "index": 22
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 5,
                  "endLine": 101,
                  "endColumn": 15,
                  "charOffset": 2044,
                  "charLength": 10,
                  "snippet": {
                    "text": "PRIVATEOID"
                  }
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "endLine": 102,
                  "endColumn": 2,
                  "charOffset": 2021,
                  "charLength": 41,
                  "snippet": {
                    "text": "    /// </summary>\n    PRIVATEOID = 254\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "302849BEF8F53C7422B354B44B932BAA51281EBE2527E87FC9D5C56EA79E20EE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'Prohibited' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 5,
                  "endLine": 105,
                  "endColumn": 15,
                  "charOffset": 4047,
                  "charLength": 10,
                  "snippet": {
                    "text": "Prohibited"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 1,
                  "charOffset": 4024,
                  "charLength": 42,
                  "snippet": {
                    "text": "    /// </summary>\n    Prohibited = 0x12,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "AE82C86143B8B3C72FE2C452729B7C47898709553B59A2CB5AD073E665984658"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'RRSIGsMissing' does not match rule 'Enum members'. Suggested name is 'RrsiGsMissing'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 5,
                  "endLine": 63,
                  "endColumn": 18,
                  "charOffset": 2430,
                  "charLength": 13,
                  "snippet": {
                    "text": "RRSIGsMissing"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 1,
                  "charOffset": 2407,
                  "charLength": 44,
                  "snippet": {
                    "text": "    /// </summary>\n    RRSIGsMissing = 0xA,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D7FF7D1B9B65CC0810F243913E52A0F11D63B0F69DFD9CE9BFE715D9A3654FC2"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'ResolverAssignment' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/KeyExchangeMode.cs",
                  "uriBaseId": "solutionDir",
                  "index": 75
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 5,
                  "endLine": 26,
                  "endColumn": 23,
                  "charOffset": 485,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResolverAssignment"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 1,
                  "charOffset": 462,
                  "charLength": 47,
                  "snippet": {
                    "text": "    /// </summary>\n    ResolverAssignment = 4,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37A8BAF429469B66259B9CEFDB713B0D1CF9844E5C33A4A491C6004C6A9B3554"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'ServerAssignment' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/KeyExchangeMode.cs",
                  "uriBaseId": "solutionDir",
                  "index": 75
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "endLine": 11,
                  "endColumn": 21,
                  "charOffset": 206,
                  "charLength": 16,
                  "snippet": {
                    "text": "ServerAssignment"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 1,
                  "charOffset": 183,
                  "charLength": 45,
                  "snippet": {
                    "text": "    /// </summary>\n    ServerAssignment = 1,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D12E234928832FEF4D4ACAE55C0666FBBB9003E92ACE99591D2161977A4471BC"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'SignatureExpired' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 5,
                  "endLine": 48,
                  "endColumn": 21,
                  "charOffset": 1843,
                  "charLength": 16,
                  "snippet": {
                    "text": "SignatureExpired"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 1,
                  "charOffset": 1820,
                  "charLength": 47,
                  "snippet": {
                    "text": "    /// </summary>\n    SignatureExpired = 0x7,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1544980E07FD1EFDBD7149B0B34B4542C3EEB6128B93EA6EC199F5EE81765AA3"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'SignatureNotYetValid' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 5,
                  "endLine": 53,
                  "endColumn": 25,
                  "charOffset": 2045,
                  "charLength": 20,
                  "snippet": {
                    "text": "SignatureNotYetValid"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 1,
                  "charOffset": 2022,
                  "charLength": 51,
                  "snippet": {
                    "text": "    /// </summary>\n    SignatureNotYetValid = 0x8,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E78BF80015F17064E50DB6E35C242558C2FF81DCA857A8EE8CF35F48C019F2C9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'StaleAnswer' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 5,
                  "endLine": 28,
                  "endColumn": 16,
                  "charOffset": 1142,
                  "charLength": 11,
                  "snippet": {
                    "text": "StaleAnswer"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 1,
                  "charOffset": 1119,
                  "charLength": 42,
                  "snippet": {
                    "text": "    /// </summary>\n    StaleAnswer = 0x3,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5D9C915F9B59FC55B23B8DB383902B0DD6BAEAFCC02D572DD8988CFACD350C78"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'StaleNXDOMAINAnswer' does not match rule 'Enum members'. Suggested name is 'StaleNxdomainAnswer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 5,
                  "endLine": 111,
                  "endColumn": 24,
                  "charOffset": 4303,
                  "charLength": 19,
                  "snippet": {
                    "text": "StaleNXDOMAINAnswer"
                  }
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 1,
                  "charOffset": 4280,
                  "charLength": 51,
                  "snippet": {
                    "text": "    /// </summary>\n    StaleNXDOMAINAnswer = 0x13,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F963D9C16FD07050C0325BFE59B9EA88106051F18D0E8FD4C55E956CA6F47D07"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Enum member 'Status' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/MessageOperation.cs",
                  "uriBaseId": "solutionDir",
                  "index": 76
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "endLine": 27,
                  "endColumn": 11,
                  "charOffset": 692,
                  "charLength": 6,
                  "snippet": {
                    "text": "Status"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 1,
                  "charOffset": 669,
                  "charLength": 35,
                  "snippet": {
                    "text": "    /// </summary>\n    Status = 2,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9CE98FCEC327100F24902D33884F06C2B9363607DE99718A44F6D24D2F99C339"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'UnsupportedDNSKeyAlgorithm' does not match rule 'Enum members'. Suggested name is 'UnsupportedDnsKeyAlgorithm'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "endLine": 17,
                  "endColumn": 31,
                  "charOffset": 544,
                  "charLength": 26,
                  "snippet": {
                    "text": "UnsupportedDNSKeyAlgorithm"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 1,
                  "charOffset": 521,
                  "charLength": 57,
                  "snippet": {
                    "text": "    /// </summary>\n    UnsupportedDNSKeyAlgorithm = 0x1,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FFED05C796EF16E628691E76766A70F9138A094EE84B526E8E95B6C294B52D72"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'UnsupportedDSDigestType' does not match rule 'Enum members'. Suggested name is 'UnsupportedDsDigestType'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ExtendedDNSError.cs",
                  "uriBaseId": "solutionDir",
                  "index": 25
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 5,
                  "endLine": 22,
                  "endColumn": 28,
                  "charOffset": 737,
                  "charLength": 23,
                  "snippet": {
                    "text": "UnsupportedDSDigestType"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 714,
                  "charLength": 54,
                  "snippet": {
                    "text": "    /// </summary>\n    UnsupportedDSDigestType = 0x2,\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C53AA53EF64A52C1CF1A9CF4BFF43A0EB52D19B8CC61D45FC3E6A97ACB552905"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'DefaultHostTTL' does not match rule 'public_static_readonly_fields_should_be_pascalcase'. Suggested name is 'DefaultHostTtl'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 27
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 37,
                  "endLine": 31,
                  "endColumn": 51,
                  "charOffset": 1024,
                  "charLength": 14,
                  "snippet": {
                    "text": "DefaultHostTTL"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 1,
                  "charOffset": 969,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// </remarks>\n    public static readonly TimeSpan DefaultHostTTL = TimeSpan.FromDays(1);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F2402F8F8E6743EA27324B2FBF6B7C3A30BE77B17E138BBE07BD3DC287D429E4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Add' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/CachedNameServer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 56
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 17,
                  "endLine": 69,
                  "endColumn": 20,
                  "charOffset": 2020,
                  "charLength": 3,
                  "snippet": {
                    "text": "Add"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 6,
                  "charOffset": 1985,
                  "charLength": 62,
                  "snippet": {
                    "text": "    /// </remarks>\n    public void Add(Message response)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D59603BC171079D758E188EA517C273EE82A3F3DC41E9144A4191E0030C84B46"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'AddResource' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateResourceList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 52
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 31,
                  "endLine": 33,
                  "endColumn": 42,
                  "charOffset": 1084,
                  "charLength": 11,
                  "snippet": {
                    "text": "AddResource"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 6,
                  "charOffset": 1035,
                  "charLength": 91,
                  "snippet": {
                    "text": "    /// </remarks>\n    public UpdateResourceList AddResource(ResourceRecord resource)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "AF25B6DB411AA0AC500CC1B7E05A55A083FB37D1C0139DA9EFCBCE0163B910C2"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Announce' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 17,
                  "endLine": 188,
                  "endColumn": 25,
                  "charOffset": 6918,
                  "charLength": 8,
                  "snippet": {
                    "text": "Announce"
                  }
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "endLine": 189,
                  "endColumn": 1,
                  "charOffset": 6883,
                  "charLength": 92,
                  "snippet": {
                    "text": "    /// </remarks>\n    public Task Announce(ServiceProfile profile, int numberOfTimes = 2);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "912CD338F6C95174AF6C0D641A7F7B6512E0CFAB83958952F5CB600871F3CD05"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Create' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsDAUOption.cs",
                  "uriBaseId": "solutionDir"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 33,
                  "endLine": 38,
                  "endColumn": 39,
                  "charOffset": 1139,
                  "charLength": 6,
                  "snippet": {
                    "text": "Create"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 6,
                  "charOffset": 1088,
                  "charLength": 65,
                  "snippet": {
                    "text": "    /// </remarks>\n    public static EdnsDAUOption Create()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5B92510A9591F16ED3D70F50AD8133D93187D449DD7975CDADE226BC00B8ED78"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Create' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsDHUOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 33,
                  "endLine": 39,
                  "endColumn": 39,
                  "charOffset": 1143,
                  "charLength": 6,
                  "snippet": {
                    "text": "Create"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 6,
                  "charOffset": 1092,
                  "charLength": 65,
                  "snippet": {
                    "text": "    /// </remarks>\n    public static EdnsDHUOption Create()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B41097D3033EA4B5D8CFA1D8BA7426964A7646F31ADD619A9B6725FAD61EBB6F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Create' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/EdnsN3UOption.cs",
                  "uriBaseId": "solutionDir",
                  "index": 2
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 33,
                  "endLine": 39,
                  "endColumn": 39,
                  "charOffset": 1148,
                  "charLength": 6,
                  "snippet": {
                    "text": "Create"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 6,
                  "charOffset": 1097,
                  "charLength": 65,
                  "snippet": {
                    "text": "    /// </remarks>\n    public static EdnsN3UOption Create()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74A82555ABE1A5ABED39BB91DFC262509380ABD0732FC1CA291D28CB99583792"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'CreateResponse' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 26,
                  "endLine": 142,
                  "endColumn": 40,
                  "charOffset": 4467,
                  "charLength": 14,
                  "snippet": {
                    "text": "CreateResponse"
                  }
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "endLine": 143,
                  "endColumn": 14,
                  "charOffset": 4414,
                  "charLength": 86,
                  "snippet": {
                    "text": "    /// <returns></returns>\n    public UpdateMessage CreateResponse() =>\n        new()"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B35C506283F8C5A8441AE2086ABD4265AB85DB0FF4824B44B4B121DC2FCD57B2"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'DeleteResource' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateResourceList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 52
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 31,
                  "endLine": 58,
                  "endColumn": 45,
                  "charOffset": 1961,
                  "charLength": 14,
                  "snippet": {
                    "text": "DeleteResource"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 6,
                  "charOffset": 1912,
                  "charLength": 94,
                  "snippet": {
                    "text": "    /// </remarks>\n    public UpdateResourceList DeleteResource(ResourceRecord resource)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90B0D8E681A7A5AAB673A79F75368A23155EA89E7883604EF56EB3DC9F111E59"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'DeleteResource' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateResourceList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 52
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 31,
                  "endLine": 83,
                  "endColumn": 45,
                  "charOffset": 2846,
                  "charLength": 14,
                  "snippet": {
                    "text": "DeleteResource"
                  }
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "endLine": 84,
                  "endColumn": 6,
                  "charOffset": 2797,
                  "charLength": 86,
                  "snippet": {
                    "text": "    /// </remarks>\n    public UpdateResourceList DeleteResource(DomainName name)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E8E38E8AB1B2AE818AB5F13A355734342F7CF6B8BFC84C28A59CA1F5875D9056"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'DeleteResource' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateResourceList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 52
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 31,
                  "endLine": 147,
                  "endColumn": 45,
                  "charOffset": 5045,
                  "charLength": 14,
                  "snippet": {
                    "text": "DeleteResource"
                  }
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 1,
                  "endLine": 148,
                  "endColumn": 43,
                  "charOffset": 4953,
                  "charLength": 169,
                  "snippet": {
                    "text": "    /// <seealso cref=\"DeleteResource(DomainName, DnsType)\"/>\n    public UpdateResourceList DeleteResource<T>(DomainName name)\n        where T : ResourceRecord, new() =>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6C3C2C7D21C847C830E3968465447B47D80A91F8CD82827E1467B42F49797459"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'GetDataLength' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 27
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 16,
                  "endLine": 104,
                  "endColumn": 29,
                  "charOffset": 3404,
                  "charLength": 13,
                  "snippet": {
                    "text": "GetDataLength"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 6,
                  "charOffset": 3370,
                  "charLength": 55,
                  "snippet": {
                    "text": "    /// </remarks>\n    public int GetDataLength()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "75DB98596ABB723DBAB60CE54251F32A926BC0392074D0CA6B02138A1DA9CE7D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'HasMessage' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/RecentMessages.cs",
                  "uriBaseId": "solutionDir",
                  "index": 8
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "endLine": 44,
                  "endColumn": 27,
                  "charOffset": 1383,
                  "charLength": 10,
                  "snippet": {
                    "text": "HasMessage"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 1304,
                  "charLength": 148,
                  "snippet": {
                    "text": "    /// <param name=\"message\">The message to look for.</param>\n    public bool HasMessage(byte[] message) => _messages.ContainsKey(GetId(message));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8BF58B93BB7F2963FF8FCE9649687DF9D03F8CEC81D16A08FBBB316F4EA7A57C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Include' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/Catalog.cs",
                  "uriBaseId": "solutionDir",
                  "index": 78
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 17,
                  "endLine": 166,
                  "endColumn": 24,
                  "charOffset": 5588,
                  "charLength": 7,
                  "snippet": {
                    "text": "Include"
                  }
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 1,
                  "endLine": 167,
                  "endColumn": 6,
                  "charOffset": 5555,
                  "charLength": 101,
                  "snippet": {
                    "text": "    /// </param>\n    public void Include(PresentationReader reader, bool authoritative = false)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90C9DB2819ECAF0E45619EBD9213857967DE07E1575F692DF415A5637C8258EC"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'IncludeRootHints' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/Catalog.cs",
                  "uriBaseId": "solutionDir",
                  "index": 78
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 17,
                  "endLine": 138,
                  "endColumn": 33,
                  "charOffset": 4616,
                  "charLength": 16,
                  "snippet": {
                    "text": "IncludeRootHints"
                  }
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "endLine": 139,
                  "endColumn": 6,
                  "charOffset": 4581,
                  "charLength": 59,
                  "snippet": {
                    "text": "    /// </remarks>\n    public Node IncludeRootHints()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "DB818F6A13051FDFB6D250350BB482FBC0883442357B9819CA7472BB38117819"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'IncludeZone' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/Catalog.cs",
                  "uriBaseId": "solutionDir",
                  "index": 78
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 28,
                  "charOffset": 856,
                  "charLength": 11,
                  "snippet": {
                    "text": "IncludeZone"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 6,
                  "charOffset": 821,
                  "charLength": 79,
                  "snippet": {
                    "text": "    /// </remarks>\n    public Node IncludeZone(PresentationReader reader)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "BB4A785879FD0091712FD815EBBB77CC4992596D197FE29401FB61E73CEDB165"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'MustExist' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdatePrerequisiteList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 55
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 35,
                  "endLine": 64,
                  "endColumn": 44,
                  "charOffset": 2573,
                  "charLength": 9,
                  "snippet": {
                    "text": "MustExist"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "endLine": 65,
                  "endColumn": 1,
                  "charOffset": 2520,
                  "charLength": 113,
                  "snippet": {
                    "text": "    /// </remarks>\n    public UpdatePrerequisiteList MustExist(DomainName name) => MustExist(name, DnsType.ANY);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "DB8D576196CD48783EF3411222C5DDBEBAFBD2F40D413FBF92DB38763EFD01D2"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'MustExist' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdatePrerequisiteList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 55
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 35,
                  "endLine": 86,
                  "endColumn": 44,
                  "charOffset": 3657,
                  "charLength": 9,
                  "snippet": {
                    "text": "MustExist"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 43,
                  "charOffset": 3604,
                  "charLength": 125,
                  "snippet": {
                    "text": "    /// </remarks>\n    public UpdatePrerequisiteList MustExist<T>(DomainName name)\n        where T : ResourceRecord, new() =>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B240AAAFD1EB83468780BD3C21884DC8FE2855240A6595C2D6685A7A6988E7C8"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'MustExist' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdatePrerequisiteList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 55
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 35,
                  "endLine": 104,
                  "endColumn": 44,
                  "charOffset": 4421,
                  "charLength": 9,
                  "snippet": {
                    "text": "MustExist"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 6,
                  "charOffset": 4368,
                  "charLength": 93,
                  "snippet": {
                    "text": "    /// </remarks>\n    public UpdatePrerequisiteList MustExist(ResourceRecord resource)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F4EDDF7FAEB165851B25CBC612011C277C00F6421565C436CC6F16962E4014D9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'MustNotExist' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdatePrerequisiteList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 55
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 35,
                  "endLine": 157,
                  "endColumn": 47,
                  "charOffset": 6453,
                  "charLength": 12,
                  "snippet": {
                    "text": "MustNotExist"
                  }
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "endLine": 158,
                  "endColumn": 1,
                  "charOffset": 6400,
                  "charLength": 119,
                  "snippet": {
                    "text": "    /// </remarks>\n    public UpdatePrerequisiteList MustNotExist(DomainName name) => MustNotExist(name, DnsType.ANY);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "771CD3BC670A7A6C9E139A90D33EBD1A7FBA490E9AD6828E166443D251EFD4B7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'MustNotExist' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdatePrerequisiteList.cs",
                  "uriBaseId": "solutionDir",
                  "index": 55
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 35,
                  "endLine": 179,
                  "endColumn": 47,
                  "charOffset": 7489,
                  "charLength": 12,
                  "snippet": {
                    "text": "MustNotExist"
                  }
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "endLine": 180,
                  "endColumn": 43,
                  "charOffset": 7436,
                  "charLength": 128,
                  "snippet": {
                    "text": "    /// </remarks>\n    public UpdatePrerequisiteList MustNotExist<T>(DomainName name)\n        where T : ResourceRecord, new() =>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "EB78D1C0305B17525B14B68D2C65349656BCD5CB1AF9C24FBC287BF97415B423"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'NodesInCanonicalOrder' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/Catalog.cs",
                  "uriBaseId": "solutionDir",
                  "index": 78
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 30,
                  "endLine": 188,
                  "endColumn": 51,
                  "charOffset": 6205,
                  "charLength": 21,
                  "snippet": {
                    "text": "NodesInCanonicalOrder"
                  }
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "endLine": 189,
                  "endColumn": 15,
                  "charOffset": 6157,
                  "charLength": 89,
                  "snippet": {
                    "text": "    /// </remarks>\n    public IEnumerable<Node> NodesInCanonicalOrder() =>\n        Values"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9193499E035DC7DFCBE27A00F277B29AAEA95C57A177AEBF97323715F87DDF83"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Probe' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 23,
                  "endLine": 168,
                  "endColumn": 28,
                  "charOffset": 6191,
                  "charLength": 5,
                  "snippet": {
                    "text": "Probe"
                  }
                },
                "contextRegion": {
                  "startLine": 167,
                  "startColumn": 1,
                  "endLine": 169,
                  "endColumn": 1,
                  "charOffset": 6068,
                  "charLength": 154,
                  "snippet": {
                    "text": "    /// <exception cref=\"InvalidOperationException\">Thrown if a shared profile is probed</exception>\n    public Task<bool> Probe(ServiceProfile profile);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B7FB77B6FB6CB5512641778E7DCC2C4A580E1FE04E12F75E907C76ED63AE3D2E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'PruneContinuously' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/CachedNameServer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 56
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 36,
                  "endLine": 40,
                  "endColumn": 53,
                  "charOffset": 1203,
                  "charLength": 17,
                  "snippet": {
                    "text": "PruneContinuously"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 6,
                  "charOffset": 1136,
                  "charLength": 109,
                  "snippet": {
                    "text": "    /// <seealso cref=\"Prune\"/>\n    public CancellationTokenSource PruneContinuously(TimeSpan interval)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0E79D1EE5558C7BBCFBDDAF484F871AFC8196CF63B35126C34DE1E11DDEB4F0E"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'QueryAllServices' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 17,
                  "endLine": 95,
                  "endColumn": 33,
                  "charOffset": 3282,
                  "charLength": 16,
                  "snippet": {
                    "text": "QueryAllServices"
                  }
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 1,
                  "charOffset": 3247,
                  "charLength": 55,
                  "snippet": {
                    "text": "    /// </remarks>\n    public Task QueryAllServices();\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "DE40E9E8E3B3868D732CA175AD7067ACFBD1CB367E412BC47B98C41193BDC914"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'QueryServiceInstances' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 17,
                  "endLine": 116,
                  "endColumn": 38,
                  "charOffset": 4068,
                  "charLength": 21,
                  "snippet": {
                    "text": "QueryServiceInstances"
                  }
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "endLine": 117,
                  "endColumn": 1,
                  "charOffset": 3999,
                  "charLength": 112,
                  "snippet": {
                    "text": "    /// <seealso cref=\"ServiceProfile.ServiceName\"/>\n    public Task QueryServiceInstances(DomainName service);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "186B196B79EA1070BB39E9EA20759AD0A49CDE4A053D1406B394E361FB4E089F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'QueryServiceInstances' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 17,
                  "endLine": 131,
                  "endColumn": 38,
                  "charOffset": 4654,
                  "charLength": 21,
                  "snippet": {
                    "text": "QueryServiceInstances"
                  }
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "endLine": 132,
                  "endColumn": 1,
                  "charOffset": 4585,
                  "charLength": 128,
                  "snippet": {
                    "text": "    /// <seealso cref=\"ServiceProfile.ServiceName\"/>\n    public Task QueryServiceInstances(DomainName service, string subtype);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6E29580F407252E7B5CA67AFF7030214CF5832EAD86830C964E65A64428A4700"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'QueryUnicastAllServices' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 17,
                  "endLine": 104,
                  "endColumn": 40,
                  "charOffset": 3601,
                  "charLength": 23,
                  "snippet": {
                    "text": "QueryUnicastAllServices"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 1,
                  "charOffset": 3566,
                  "charLength": 62,
                  "snippet": {
                    "text": "    /// </remarks>\n    public Task QueryUnicastAllServices();\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3F91E2D0CCE194CCEA02A74F4515A5F4061289C6BC08C7EFD9349AD48323BF71"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'QueryUnicastServiceInstances' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "endLine": 144,
                  "endColumn": 45,
                  "charOffset": 5205,
                  "charLength": 28,
                  "snippet": {
                    "text": "QueryUnicastServiceInstances"
                  }
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "endLine": 145,
                  "endColumn": 1,
                  "charOffset": 5136,
                  "charLength": 119,
                  "snippet": {
                    "text": "    /// <seealso cref=\"ServiceProfile.ServiceName\"/>\n    public Task QueryUnicastServiceInstances(DomainName service);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B560FF1C26A2A863AD21FC4D231C921FD175F728CE9EB11B93774DB673CB4A48"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Read' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/DnsObject.cs",
                  "uriBaseId": "solutionDir",
                  "index": 50
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 28,
                  "endLine": 76,
                  "endColumn": 32,
                  "charOffset": 1983,
                  "charLength": 4,
                  "snippet": {
                    "text": "Read"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "endLine": 77,
                  "endColumn": 1,
                  "charOffset": 1939,
                  "charLength": 99,
                  "snippet": {
                    "text": "    /// </param>\n    public IWireSerializer Read(byte[] buffer) => Read(buffer, 0, buffer.Length);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0BF7387E8A001AAF8AC7DB7C1D2DC1B57EACE61023896A05A1AF2DAEF9282EBF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Read' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRecord.cs",
                  "uriBaseId": "solutionDir",
                  "index": 27
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 28,
                  "endLine": 346,
                  "endColumn": 32,
                  "charOffset": 11114,
                  "charLength": 4,
                  "snippet": {
                    "text": "Read"
                  }
                },
                "contextRegion": {
                  "startLine": 345,
                  "startColumn": 1,
                  "endLine": 347,
                  "endColumn": 1,
                  "charOffset": 11070,
                  "charLength": 119,
                  "snippet": {
                    "text": "    /// </param>\n    public ResourceRecord? Read(string text) => Read(new PresentationReader(new StringReader(text)));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4BD622DCEF6351449164AB6B8ED86DD6B22625F43710234A60F421B804094D88"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ReadUTF8String' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'ReadUtf8String'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireReader.cs",
                  "uriBaseId": "solutionDir",
                  "index": 44
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 19,
                  "endLine": 249,
                  "endColumn": 33,
                  "charOffset": 6800,
                  "charLength": 14,
                  "snippet": {
                    "text": "ReadUTF8String"
                  }
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "endLine": 250,
                  "endColumn": 1,
                  "charOffset": 6761,
                  "charLength": 115,
                  "snippet": {
                    "text": "    /// </exception>\n    public string ReadUTF8String() => Encoding.UTF8.GetString(ReadByteLengthPrefixedBytes());\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A9D5775965F4449F9116E445CCF3C89BB6097B1D3FEE9DF818EE67CA8E9B3971"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Register' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRegistry.cs",
                  "uriBaseId": "solutionDir",
                  "index": 79
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 24,
                  "endLine": 59,
                  "endColumn": 32,
                  "charOffset": 2192,
                  "charLength": 8,
                  "snippet": {
                    "text": "Register"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 6,
                  "charOffset": 2148,
                  "charLength": 95,
                  "snippet": {
                    "text": "    /// </exception>\n    public static void Register<T>() where T : ResourceRecord, new()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1C4A30EE098F4DB671F948A2AB455A64EF5958826D75D47690547EF6400C5505"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'RemoveZone' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/Catalog.cs",
                  "uriBaseId": "solutionDir",
                  "index": 78
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "endLine": 81,
                  "endColumn": 27,
                  "charOffset": 2520,
                  "charLength": 10,
                  "snippet": {
                    "text": "RemoveZone"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 6,
                  "charOffset": 2487,
                  "charLength": 66,
                  "snippet": {
                    "text": "    /// </param>\n    public void RemoveZone(DomainName name)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1B01C669273D2FF756BB6428046DF2A6A9CF23F177F34BD9C7D3707A63C2E7A4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Reset' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/ConcurrentSet.cs",
                  "uriBaseId": "solutionDir",
                  "index": 51
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 21,
                  "endLine": 145,
                  "endColumn": 26,
                  "charOffset": 4574,
                  "charLength": 5,
                  "snippet": {
                    "text": "Reset"
                  }
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "endLine": 146,
                  "endColumn": 10,
                  "charOffset": 4553,
                  "charLength": 38,
                  "snippet": {
                    "text": "\n        public void Reset()\n        {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F5AAC70A57D6298C9C72D0514E53D20A6AE03F636EF8EE9AF4EB2CAE70C67577"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Unadvertise' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 17,
                  "endLine": 200,
                  "endColumn": 28,
                  "charOffset": 7371,
                  "charLength": 11,
                  "snippet": {
                    "text": "Unadvertise"
                  }
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "endLine": 201,
                  "endColumn": 2,
                  "charOffset": 7336,
                  "charLength": 51,
                  "snippet": {
                    "text": "    /// </summary>\n    public Task Unadvertise();\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4BB5140690D3932EBDC82F2707A23D184AB01885578BB009F1E8FFEFF0F5760C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'UseDnsSecurity' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Message.cs",
                  "uriBaseId": "solutionDir",
                  "index": 14
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 20,
                  "endLine": 339,
                  "endColumn": 34,
                  "charOffset": 10832,
                  "charLength": 14,
                  "snippet": {
                    "text": "UseDnsSecurity"
                  }
                },
                "contextRegion": {
                  "startLine": 338,
                  "startColumn": 1,
                  "endLine": 340,
                  "endColumn": 6,
                  "charOffset": 10784,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// <seealso cref=\"DO\"/>\n    public Message UseDnsSecurity()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C2CAF74102CE3FA9C6647AC848058EA2A97DFAFE091019DCE73F0F18A8D75418"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'WriteDomainName' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireWriter.cs",
                  "uriBaseId": "solutionDir",
                  "index": 33
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 17,
                  "endLine": 210,
                  "endColumn": 32,
                  "charOffset": 6545,
                  "charLength": 15,
                  "snippet": {
                    "text": "WriteDomainName"
                  }
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "endLine": 211,
                  "endColumn": 6,
                  "charOffset": 6510,
                  "charLength": 97,
                  "snippet": {
                    "text": "    /// </remarks>\n    public void WriteDomainName(string? name, bool uncompressed = false)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "FE8F6001A6FF322294D4DAC8D58EC48F1C989856A3B3891EC6E40E9086378843"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'WriteStringUTF8' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'WriteStringUtf8'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireWriter.cs",
                  "uriBaseId": "solutionDir",
                  "index": 33
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 17,
                  "endLine": 316,
                  "endColumn": 32,
                  "charOffset": 10008,
                  "charLength": 15,
                  "snippet": {
                    "text": "WriteStringUTF8"
                  }
                },
                "contextRegion": {
                  "startLine": 315,
                  "startColumn": 1,
                  "endLine": 317,
                  "endColumn": 6,
                  "charOffset": 9973,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </remarks>\n    public void WriteStringUTF8(string value)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44BD51DF715FF18F9E7EC3449ED6FEC85656A043F70109E998E5D984942ACF4D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'CamelCase' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Generators.Attributes/EnumJsonConverterAttribute.cs",
                  "uriBaseId": "solutionDir",
                  "index": 71
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 17,
                  "endLine": 22,
                  "endColumn": 26,
                  "charOffset": 745,
                  "charLength": 9,
                  "snippet": {
                    "text": "CamelCase"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 710,
                  "charLength": 67,
                  "snippet": {
                    "text": "    /// </summary>\n    public bool CamelCase { get; set; } = true;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83CE64BB61D78672367128CD9BE347D43E9DCF40328676A7103E5A783E597DE2"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NETStandard 2.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Count' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/RecentMessages.cs",
                  "uriBaseId": "solutionDir",
                  "index": 8
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 16,
                  "endLine": 33,
                  "endColumn": 21,
                  "charOffset": 982,
                  "charLength": 5,
                  "snippet": {
                    "text": "Count"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 5,
                  "charOffset": 948,
                  "charLength": 64,
                  "snippet": {
                    "text": "    /// </summary>\n    public int Count => _messages.Count;\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "D73FC95BD574CE24CA1DF26D2DF4D995ECE47DC33401BE3B108B3547DD8E6C68"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'IsEmpty' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/ConcurrentSet.cs",
                  "uriBaseId": "solutionDir",
                  "index": 51
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 17,
                  "endLine": 74,
                  "endColumn": 24,
                  "charOffset": 2672,
                  "charLength": 7,
                  "snippet": {
                    "text": "IsEmpty"
                  }
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "endLine": 75,
                  "endColumn": 1,
                  "charOffset": 2585,
                  "charLength": 119,
                  "snippet": {
                    "text": "    /// <returns>true if the set is empty; otherwise, false.</returns>\n    public bool IsEmpty => _dictionary.IsEmpty;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72C83237ADACD99D0C131670B0239832509386F68A38E8569BEF379A09F04EB7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'IsResponse' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "endLine": 64,
                  "endColumn": 27,
                  "charOffset": 2115,
                  "charLength": 10,
                  "snippet": {
                    "text": "IsResponse"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "endLine": 65,
                  "endColumn": 1,
                  "charOffset": 2082,
                  "charLength": 51,
                  "snippet": {
                    "text": "    /// </value>\n    public bool IsResponse => QR;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "F2D9DBE717AE4C4EA14629905F8425B76E404E06B642004AA9E65AE3714388FC"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'IsUpdate' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 17,
                  "endLine": 56,
                  "endColumn": 25,
                  "charOffset": 1889,
                  "charLength": 8,
                  "snippet": {
                    "text": "IsUpdate"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 1,
                  "charOffset": 1856,
                  "charLength": 50,
                  "snippet": {
                    "text": "    /// </value>\n    public bool IsUpdate => !QR;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3BB0E81522C16DF665335278631D790C017B3BC05F083DAF862215FB918B0DC7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'MediaPosition' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/MediaPlayerEntityCommandParams.cs",
                  "uriBaseId": "solutionDir",
                  "index": 11
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 18,
                  "endLine": 11,
                  "endColumn": 31,
                  "charOffset": 260,
                  "charLength": 13,
                  "snippet": {
                    "text": "MediaPosition"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 5,
                  "charOffset": 202,
                  "charLength": 91,
                  "snippet": {
                    "text": "    [JsonPropertyName(\"media_position\")]\n    public uint? MediaPosition { get; init; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "EA0C944CEEC19EA629C3EFD7108DD75321EEE266918389F12EE3C0F99DF64A30"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Mode' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/MediaPlayerEntityCommandParams.cs",
                  "uriBaseId": "solutionDir",
                  "index": 11
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 24,
                  "charOffset": 506,
                  "charLength": 4,
                  "snippet": {
                    "text": "Mode"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 5,
                  "charOffset": 456,
                  "charLength": 74,
                  "snippet": {
                    "text": "    [JsonPropertyName(\"mode\")]\n    public string? Mode { get; init; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "BAB782C597AB46009C88BB96F91F8FA2D175E07F38FD759201A525E96CC2009D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Records' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/ResourceRegistry.cs",
                  "uriBaseId": "solutionDir",
                  "index": 79
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 70,
                  "endLine": 48,
                  "endColumn": 77,
                  "charOffset": 1855,
                  "charLength": 7,
                  "snippet": {
                    "text": "Records"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 1,
                  "charOffset": 1767,
                  "charLength": 115,
                  "snippet": {
                    "text": "    /// </remarks>\n    public static IReadOnlyDictionary<DnsType, Func<ResourceRecord>> Records => RecordsPrivate;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "06C29F5840552FD95ED9932D562D881CAD341A02BA7FBE2433C200D033BC0F64"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Repeat' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/MediaPlayerEntityCommandParams.cs",
                  "uriBaseId": "solutionDir",
                  "index": 11
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 24,
                  "endLine": 14,
                  "endColumn": 30,
                  "charOffset": 350,
                  "charLength": 6,
                  "snippet": {
                    "text": "Repeat"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 5,
                  "charOffset": 294,
                  "charLength": 82,
                  "snippet": {
                    "text": "    [JsonPropertyName(\"repeat\")]\n    public RepeatMode? Repeat { get; init; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6F29B8C8EE064215C018ED7A603363F882D9EED98C132F325C3D2360C0F159EC"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Shuffle' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/MediaPlayerEntityCommandParams.cs",
                  "uriBaseId": "solutionDir",
                  "index": 11
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 18,
                  "endLine": 17,
                  "endColumn": 25,
                  "charOffset": 428,
                  "charLength": 7,
                  "snippet": {
                    "text": "Shuffle"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 5,
                  "charOffset": 377,
                  "charLength": 78,
                  "snippet": {
                    "text": "    [JsonPropertyName(\"shuffle\")]\n    public bool? Shuffle { get; init; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "316A217E388BF3372335832433E1ED5BEB10C4A7915806DEDC4444E228386B21"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Source' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/MediaPlayerEntityCommandParams.cs",
                  "uriBaseId": "solutionDir",
                  "index": 11
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 20,
                  "endLine": 23,
                  "endColumn": 26,
                  "charOffset": 583,
                  "charLength": 6,
                  "snippet": {
                    "text": "Source"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 2,
                  "charOffset": 531,
                  "charLength": 75,
                  "snippet": {
                    "text": "    [JsonPropertyName(\"source\")]\n    public string? Source { get; init; }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "B1AE6835B87FE5AA7ED73037F190E3460A228C88AC9C85B1231709D4D60C368C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Token' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/AuthRequestMsgData.cs",
                  "uriBaseId": "solutionDir",
                  "index": 10
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 28,
                  "endLine": 6,
                  "endColumn": 33,
                  "charOffset": 133,
                  "charLength": 5,
                  "snippet": {
                    "text": "Token"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 2,
                  "charOffset": 74,
                  "charLength": 81,
                  "snippet": {
                    "text": "    [JsonPropertyName(\"token\")]\n    public required string Token { get; init; }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E856F6DF5462FB6E76F6DE31FC288570B9049D91BDD2A65AB4105259E4566F08"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMember.Global",
          "ruleIndex": 2717,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'Volume' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/MediaPlayerEntityCommandParams.cs",
                  "uriBaseId": "solutionDir",
                  "index": 11
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 20,
                  "endLine": 8,
                  "endColumn": 26,
                  "charOffset": 175,
                  "charLength": 6,
                  "snippet": {
                    "text": "Volume"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 5,
                  "charOffset": 123,
                  "charLength": 78,
                  "snippet": {
                    "text": "    [JsonPropertyName(\"volume\")]\n    public ushort? Volume { get; init; }\n    "
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4A000C184C99EDB023E507C4A8C954C57BCB1B8D05116583F4836D958DFD30B8"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of method 'Advertise' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 17,
                  "endLine": 160,
                  "endColumn": 26,
                  "charOffset": 5806,
                  "charLength": 9,
                  "snippet": {
                    "text": "Advertise"
                  }
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "endLine": 161,
                  "endColumn": 1,
                  "charOffset": 5771,
                  "charLength": 70,
                  "snippet": {
                    "text": "    /// </remarks>\n    public void Advertise(ServiceProfile service);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0D75C8E3167BF77862601747426634BA2D9F4B032D3E1FB3CE746888BB787A09"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of method 'OnDnsMessage' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IMulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 80
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 17,
                  "endLine": 270,
                  "endColumn": 29,
                  "charOffset": 9930,
                  "charLength": 12,
                  "snippet": {
                    "text": "OnDnsMessage"
                  }
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "endLine": 271,
                  "endColumn": 2,
                  "charOffset": 9895,
                  "charLength": 75,
                  "snippet": {
                    "text": "    /// </remarks>\n    public Task OnDnsMessage(UdpReceiveResult result);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ADDFEFBA5F5DFC6F095A92E22F07591F72376CDEDB8411D07C9839651B58698D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of method 'Read' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/IPresentationSerializer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 81
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 21,
                  "endLine": 32,
                  "endColumn": 25,
                  "charOffset": 1122,
                  "charLength": 4,
                  "snippet": {
                    "text": "Read"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 1,
                  "charOffset": 1083,
                  "charLength": 72,
                  "snippet": {
                    "text": "    /// </remarks>\n    ResourceRecord? Read(PresentationReader reader);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "214CD806413809EFC459679552ED394DABFF67CDAABBBBAE60FA5E61A400CA90"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of method 'Read' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/IWireSerializer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 82
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 21,
                  "endLine": 22,
                  "endColumn": 25,
                  "charOffset": 649,
                  "charLength": 4,
                  "snippet": {
                    "text": "Read"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 610,
                  "charLength": 64,
                  "snippet": {
                    "text": "    /// </remarks>\n    IWireSerializer Read(WireReader reader);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9C080CF45311E15CEF628A32AE58152CF430D1E805947F9B191FBC01B32109EE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of method 'ResolveAsync' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/IResolver.cs",
                  "uriBaseId": "solutionDir",
                  "index": 83
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 19,
                  "endLine": 22,
                  "endColumn": 31,
                  "charOffset": 707,
                  "charLength": 12,
                  "snippet": {
                    "text": "ResolveAsync"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 25,
                  "charOffset": 670,
                  "charLength": 75,
                  "snippet": {
                    "text": "    /// </returns>\n    Task<Message> ResolveAsync(\n        Message request,"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C6D764EAB5EC776ABD0A52E40086B18DA5F36B0D98F06BB9AA430B7200D75459"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of method 'SendQuery' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IMulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 80
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 17,
                  "endLine": 164,
                  "endColumn": 26,
                  "charOffset": 5391,
                  "charLength": 9,
                  "snippet": {
                    "text": "SendQuery"
                  }
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "endLine": 165,
                  "endColumn": 1,
                  "charOffset": 5354,
                  "charLength": 61,
                  "snippet": {
                    "text": "    /// </exception>\n    public Task SendQuery(Message msg);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5CE9942B4BFA67042FCC0EAD93DFEE46C0E3AA5A0C71B9A46025CFA1D2DB6DEF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of method 'Stop' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IMulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 80
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 17,
                  "endLine": 103,
                  "endColumn": 21,
                  "charOffset": 3144,
                  "charLength": 4,
                  "snippet": {
                    "text": "Stop"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 1,
                  "charOffset": 3109,
                  "charLength": 43,
                  "snippet": {
                    "text": "    /// </remarks>\n    public void Stop();\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6850F5C7D2B1468FB49CE7599F7211B7F5AB60063044E6B1BBF55AD2C0E4F1A6"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of method 'Unadvertise' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 17,
                  "endLine": 195,
                  "endColumn": 28,
                  "charOffset": 7220,
                  "charLength": 11,
                  "snippet": {
                    "text": "Unadvertise"
                  }
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "endLine": 196,
                  "endColumn": 1,
                  "charOffset": 7123,
                  "charLength": 134,
                  "snippet": {
                    "text": "    /// <param name=\"profile\">The profile to send a goodbye message for.</param>\n    public Task Unadvertise(ServiceProfile profile);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97F640B78EE03BE6FC7B64F5408F12FC30D8D74BE5F58049CF869C57D80022E3"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of method 'Write' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/IPresentationSerializer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 81
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 15,
                  "charOffset": 1374,
                  "charLength": 5,
                  "snippet": {
                    "text": "Write"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 2,
                  "charOffset": 1348,
                  "charLength": 61,
                  "snippet": {
                    "text": "    /// </param>\n    void Write(PresentationWriter writer);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5587C96162077D2C281EAAFE1C8B2B5E2929BBDD8DB85DDA7DCA00CCFDC4A30D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of method 'Write' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/IWireSerializer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 82
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 10,
                  "endLine": 30,
                  "endColumn": 15,
                  "charOffset": 873,
                  "charLength": 5,
                  "snippet": {
                    "text": "Write"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 2,
                  "charOffset": 847,
                  "charLength": 53,
                  "snippet": {
                    "text": "    /// </param>\n    void Write(WireWriter writer);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17C610DF7987071A1C6FDE6E9932AEBB345109768FEA865B73933D9D7ABC204B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'AnswersContainsAdditionalRecords' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 17,
                  "endLine": 38,
                  "endColumn": 49,
                  "charOffset": 1255,
                  "charLength": 32,
                  "snippet": {
                    "text": "AnswersContainsAdditionalRecords"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 1,
                  "charOffset": 1220,
                  "charLength": 82,
                  "snippet": {
                    "text": "    /// </remarks>\n    public bool AnswersContainsAdditionalRecords { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C48A6727DE52B097245555D246D92F3A4948CED4037018F818A2AB82297A2A14"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'IgnoreDuplicateMessages' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IMulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 80
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 17,
                  "endLine": 90,
                  "endColumn": 40,
                  "charOffset": 2819,
                  "charLength": 23,
                  "snippet": {
                    "text": "IgnoreDuplicateMessages"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 1,
                  "charOffset": 2784,
                  "charLength": 73,
                  "snippet": {
                    "text": "    /// </remarks>\n    public bool IgnoreDuplicateMessages { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6FB1E2DDA571F66AD0877A52EB19030DF8D20C3FA234F3F293AE52C3B2B112C1"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'MalformedMessage' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IMulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 80
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 32,
                  "endLine": 54,
                  "endColumn": 48,
                  "charOffset": 1732,
                  "charLength": 16,
                  "snippet": {
                    "text": "MalformedMessage"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 1,
                  "charOffset": 1684,
                  "charLength": 80,
                  "snippet": {
                    "text": "    /// </value>\n    public Func<byte[], Task>? MalformedMessage  { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30BB9F0996D960624BB8019ECB9CD4E7C60944878D1BA2B2DAFA8AE48C2C1D30"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'Mdns' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 31,
                  "endLine": 21,
                  "endColumn": 35,
                  "charOffset": 672,
                  "charLength": 4,
                  "snippet": {
                    "text": "Mdns"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 1,
                  "charOffset": 625,
                  "charLength": 61,
                  "snippet": {
                    "text": "    /// </value>\n    public IMulticastService? Mdns { get; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0311169B938CE1E2E81D68E883FC5B816000955E89DFBA2AD84839FFF304D306"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'NameServer' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 23,
                  "endLine": 46,
                  "endColumn": 33,
                  "charOffset": 1466,
                  "charLength": 10,
                  "snippet": {
                    "text": "NameServer"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 1,
                  "charOffset": 1427,
                  "charLength": 59,
                  "snippet": {
                    "text": "    /// </value>\n    public NameServer NameServer { get; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6883CD39C971EDCC76BB26D3ECDCF5B25DCE5E142E287BA9244D7959059B603C"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'NetworkInterfaceDiscovered' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IMulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 80
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 51,
                  "endLine": 62,
                  "endColumn": 77,
                  "charOffset": 1999,
                  "charLength": 26,
                  "snippet": {
                    "text": "NetworkInterfaceDiscovered"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 1,
                  "charOffset": 1932,
                  "charLength": 109,
                  "snippet": {
                    "text": "    /// </value>\n    public Func<NetworkInterfaceEventArgs, Task>? NetworkInterfaceDiscovered  { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74CF25787571882D44C14C6144040F7E11E471EC492CCDDADA21522F193E7B0A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'ServiceDiscovered' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 36,
                  "endLine": 61,
                  "endColumn": 53,
                  "charOffset": 1989,
                  "charLength": 17,
                  "snippet": {
                    "text": "ServiceDiscovered"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 1,
                  "charOffset": 1935,
                  "charLength": 86,
                  "snippet": {
                    "text": "    /// </remarks>\n    public Func<DomainName, Task>? ServiceDiscovered { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5E2C1E6021E654A0735DD5EC7A186ECB19E74C4D3F08A689B6E8CDF21D7A2C59"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'ServiceInstanceDiscovered' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 59,
                  "endLine": 74,
                  "endColumn": 84,
                  "charOffset": 2479,
                  "charLength": 25,
                  "snippet": {
                    "text": "ServiceInstanceDiscovered"
                  }
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "endLine": 75,
                  "endColumn": 1,
                  "charOffset": 2402,
                  "charLength": 117,
                  "snippet": {
                    "text": "    /// </remarks>\n    public Func<ServiceInstanceDiscoveryEventArgs, Task>? ServiceInstanceDiscovered { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CDE3DCB2654F126CEF6561741C154C328AC088D13BDB376D950B404EED69601F"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'ServiceInstanceShutdown' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IServiceDiscovery.cs",
                  "uriBaseId": "solutionDir",
                  "index": 77
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 58,
                  "endLine": 87,
                  "endColumn": 81,
                  "charOffset": 2998,
                  "charLength": 23,
                  "snippet": {
                    "text": "ServiceInstanceShutdown"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 1,
                  "charOffset": 2922,
                  "charLength": 114,
                  "snippet": {
                    "text": "    /// </remarks>\n    public Func<ServiceInstanceShutdownEventArgs, Task>? ServiceInstanceShutdown { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54EF1D2DC45B95B05D308021AC97DA1BF9823696797A4BF9186F9D51145FE928"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'UseIpv4' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IMulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 80
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 17,
                  "endLine": 70,
                  "endColumn": 24,
                  "charOffset": 2221,
                  "charLength": 7,
                  "snippet": {
                    "text": "UseIpv4"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "endLine": 71,
                  "endColumn": 1,
                  "charOffset": 2188,
                  "charLength": 55,
                  "snippet": {
                    "text": "    /// </value>\n    public bool UseIpv4 { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CE234D830A657ABC7DE1C01BFA6B105E8B945FAA4D4BEFC75F8E69F30567F168"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMemberInSuper.Global",
          "ruleIndex": 2721,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Only implementations of property 'UseIpv6' are used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/IMulticastService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 80
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 17,
                  "endLine": 78,
                  "endColumn": 24,
                  "charOffset": 2423,
                  "charLength": 7,
                  "snippet": {
                    "text": "UseIpv6"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 79,
                  "endColumn": 1,
                  "charOffset": 2390,
                  "charLength": 55,
                  "snippet": {
                    "text": "    /// </value>\n    public bool UseIpv6 { get; set; }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "DEC5E951FA5376B34B4029D2B2951E127323661A93401B8E42CB4478A3239B4D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMethodReturnValue.Global",
          "ruleIndex": 2723,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Add' return value is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/Catalog.cs",
                  "uriBaseId": "solutionDir",
                  "index": 78
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 12,
                  "endLine": 106,
                  "endColumn": 16,
                  "charOffset": 3448,
                  "charLength": 4,
                  "snippet": {
                    "text": "Node"
                  }
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "endLine": 107,
                  "endColumn": 6,
                  "charOffset": 3418,
                  "charLength": 97,
                  "snippet": {
                    "text": "    /// </remarks>\n    public Node Add(ResourceRecord resource, bool authoritative = false)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3C9F29C4899C6B5689139CA6754406FE4497B4AFC99AC0CD9DCD36A9217EF806"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedMethodReturnValue.Global",
          "ruleIndex": 2723,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'PopLengthPrefixedScope' return value is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/WireWriter.cs",
                  "uriBaseId": "solutionDir",
                  "index": 33
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 12,
                  "endLine": 73,
                  "endColumn": 18,
                  "charOffset": 2398,
                  "charLength": 6,
                  "snippet": {
                    "text": "ushort"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 74,
                  "endColumn": 6,
                  "charOffset": 2368,
                  "charLength": 67,
                  "snippet": {
                    "text": "    /// </remarks>\n    public ushort PopLengthPrefixedScope()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7F2AF61618F12F4A1AF99688D5D0216BFD7F6AB7532A6C3865576FBBCAE060F4"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'Prune' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Mdns/RecentMessages.cs",
                  "uriBaseId": "solutionDir",
                  "index": 8
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 5,
                  "endLine": 71,
                  "endColumn": 11,
                  "charOffset": 2270,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 6,
                  "charOffset": 2247,
                  "charLength": 47,
                  "snippet": {
                    "text": "    /// </remarks>\n    public int Prune()\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4CEC61CCEF5C4739ABB89CF1040034F851C722D4E163F8EBB737D380D7B056AE"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "MemberCanBePrivate.Global",
          "ruleIndex": 2263,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'ResolveAsync' can be made private"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/NameServer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 53
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 5,
                  "endLine": 87,
                  "endColumn": 11,
                  "charOffset": 3048,
                  "charLength": 6,
                  "snippet": {
                    "text": "public"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 6,
                  "charOffset": 3025,
                  "charLength": 149,
                  "snippet": {
                    "text": "    /// </remarks>\n    public async Task<Message> ResolveAsync(Question question, Message? response = null, CancellationToken cancel = default)\n    {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "379901856D7EEB030390D1A748823D3075474C4162CF69E04C9198818C20F37D"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "InconsistentNaming",
          "ruleIndex": 2215,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Name 'ReadIPAddress' does not match rule 'methods_should_be_pascalcase'. Suggested name is 'ReadIpAddress'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/PresentationReader.cs",
                  "uriBaseId": "solutionDir",
                  "index": 43
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 22,
                  "endLine": 138,
                  "endColumn": 35,
                  "charOffset": 4035,
                  "charLength": 13,
                  "snippet": {
                    "text": "ReadIPAddress"
                  }
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "endLine": 139,
                  "endColumn": 1,
                  "charOffset": 3995,
                  "charLength": 103,
                  "snippet": {
                    "text": "    /// </returns>\n    public IPAddress ReadIPAddress(int length = 4) => IPAddress.Parse(ReadToken());\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "E53AC334917A0E21B2711D451BFF314133BADBE3B12CF24D86D590E16CCED282"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedType.Global",
          "ruleIndex": 2731,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class 'CachedNameServer' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/Resolving/CachedNameServer.cs",
                  "uriBaseId": "solutionDir",
                  "index": 56
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 14,
                  "endLine": 6,
                  "endColumn": 30,
                  "charOffset": 106,
                  "charLength": 16,
                  "snippet": {
                    "text": "CachedNameServer"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 2,
                  "charOffset": 78,
                  "charLength": 59,
                  "snippet": {
                    "text": "/// </summary>\npublic class CachedNameServer : NameServer\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "C1503245F759301E5B1C18F0994577AF0C30CEE402E5EDA8DD9944E575DCD3C3"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedType.Global",
          "ruleIndex": 2731,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class 'UpdateMessage' is never used (except inside its declaration)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Dns/UpdateMessage.cs",
                  "uriBaseId": "solutionDir",
                  "index": 41
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 14,
                  "endLine": 24,
                  "endColumn": 27,
                  "charOffset": 888,
                  "charLength": 13,
                  "snippet": {
                    "text": "UpdateMessage"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 2,
                  "charOffset": 817,
                  "charLength": 98,
                  "snippet": {
                    "text": "/// <seealso href=\"https://tools.ietf.org/html/rfc2136\"/>\npublic class UpdateMessage : DnsObject\n{"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87CA72AC492C897CB7B7DDCF445F028BD93E3BAF2E6E24C9BFDB45A80AF37B1B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedType.Global",
          "ruleIndex": 2731,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Record 'AuthRequestMsg' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/AuthRequestMsg.cs",
                  "uriBaseId": "solutionDir",
                  "index": 84
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 15,
                  "endLine": 3,
                  "endColumn": 29,
                  "charOffset": 53,
                  "charLength": 14,
                  "snippet": {
                    "text": "AuthRequestMsg"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 62,
                  "charOffset": 38,
                  "charLength": 62,
                  "snippet": {
                    "text": "\npublic record AuthRequestMsg : CommonReq<AuthRequestMsgData>;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "10473B037E28C709C736E55AE5E27D12A29E6CACAE8485DC3603C942246C5038"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "UnusedType.Global",
          "ruleIndex": 2731,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Record 'MediaPlayerEntityCommandMsgData' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Models/Sync/EntityCommandMsg.cs",
                  "uriBaseId": "solutionDir",
                  "index": 85
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 15,
                  "endLine": 3,
                  "endColumn": 46,
                  "charOffset": 53,
                  "charLength": 31,
                  "snippet": {
                    "text": "MediaPlayerEntityCommandMsgData"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 37,
                  "charOffset": 38,
                  "charLength": 173,
                  "snippet": {
                    "text": "\npublic record MediaPlayerEntityCommandMsgData<TCommandId> : CommonReq<EntityCommandMsgData<TCommandId, MediaPlayerEntityCommandParams>>\n    where TCommandId : struct, Enum;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "065BF461FB2046366A62B2393EF2748237FA2C26603402A1CB6F970C86827625"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/Configuration/ConfigurationService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 68
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 5,
                  "endLine": 9,
                  "endColumn": 68,
                  "charOffset": 291,
                  "charLength": 63,
                  "snippet": {
                    "text": "private readonly IConfiguration _configuration = configuration;"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 105,
                  "charOffset": 285,
                  "charLength": 174,
                  "snippet": {
                    "text": "{\n    private readonly IConfiguration _configuration = configuration;\n    private readonly UnfoldedCircleJsonSerializerContext _jsonSerializerContext = jsonSerializerContext;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "A3157BE89E64EC07AEED1BB4914A48754A9A655BF7D1457B15E1AA9742E716E7"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/Configuration/ConfigurationService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 68
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 5,
                  "endLine": 10,
                  "endColumn": 105,
                  "charOffset": 359,
                  "charLength": 100,
                  "snippet": {
                    "text": "private readonly UnfoldedCircleJsonSerializerContext _jsonSerializerContext = jsonSerializerContext;"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 69,
                  "charOffset": 287,
                  "charLength": 241,
                  "snippet": {
                    "text": "    private readonly IConfiguration _configuration = configuration;\n    private readonly UnfoldedCircleJsonSerializerContext _jsonSerializerContext = jsonSerializerContext;\n    private readonly ILogger<ConfigurationService> _logger = logger;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "CED0930706DE451F11228BB00314139BA77A8FF239DB922B41E63EFB2059BB4B"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/Configuration/ConfigurationService.cs",
                  "uriBaseId": "solutionDir",
                  "index": 68
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "endLine": 11,
                  "endColumn": 69,
                  "charOffset": 464,
                  "charLength": 64,
                  "snippet": {
                    "text": "private readonly ILogger<ConfigurationService> _logger = logger;"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 35,
                  "charOffset": 355,
                  "charLength": 208,
                  "snippet": {
                    "text": "    private readonly UnfoldedCircleJsonSerializerContext _jsonSerializerContext = jsonSerializerContext;\n    private readonly ILogger<ConfigurationService> _logger = logger;\n    private string? _ucConfigHome;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "039C45873CED8511C9347C468B6136B6FC31AB1115CD840D4D0DB54314CC5555"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/WebSocket/UnfoldedCircleMiddleware.cs",
                  "uriBaseId": "solutionDir",
                  "index": 69
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 5,
                  "endLine": 12,
                  "endColumn": 118,
                  "charOffset": 367,
                  "charLength": 113,
                  "snippet": {
                    "text": "private readonly UnfoldedCircleWebSocketHandler _unfoldedCircleWebSocketHandler = unfoldedCircleWebSocketHandler;"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 90,
                  "charOffset": 361,
                  "charLength": 209,
                  "snippet": {
                    "text": "{\n    private readonly UnfoldedCircleWebSocketHandler _unfoldedCircleWebSocketHandler = unfoldedCircleWebSocketHandler;\n    private readonly IHostApplicationLifetime _applicationLifetime = applicationLifetime;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "594DE124CD91156583ECCF54B25748E62DA6ADA745C76E56948AE529027785FF"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/WebSocket/UnfoldedCircleMiddleware.cs",
                  "uriBaseId": "solutionDir",
                  "index": 69
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "endLine": 13,
                  "endColumn": 90,
                  "charOffset": 485,
                  "charLength": 85,
                  "snippet": {
                    "text": "private readonly IHostApplicationLifetime _applicationLifetime = applicationLifetime;"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 68,
                  "charOffset": 363,
                  "charLength": 275,
                  "snippet": {
                    "text": "    private readonly UnfoldedCircleWebSocketHandler _unfoldedCircleWebSocketHandler = unfoldedCircleWebSocketHandler;\n    private readonly IHostApplicationLifetime _applicationLifetime = applicationLifetime;\n    private readonly ILoggerFactory _loggerFactory = loggerFactory;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93C769A9EA220597D6B56B68439023EE1B275681F780454DF688425BBDCC4859"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/WebSocket/UnfoldedCircleMiddleware.cs",
                  "uriBaseId": "solutionDir",
                  "index": 69
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "endLine": 14,
                  "endColumn": 68,
                  "charOffset": 575,
                  "charLength": 63,
                  "snippet": {
                    "text": "private readonly ILoggerFactory _loggerFactory = loggerFactory;"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 73,
                  "charOffset": 481,
                  "charLength": 230,
                  "snippet": {
                    "text": "    private readonly IHostApplicationLifetime _applicationLifetime = applicationLifetime;\n    private readonly ILoggerFactory _loggerFactory = loggerFactory;\n    private readonly ILogger<UnfoldedCircleMiddleware> _logger = logger;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "841322F1108944A62DBD9CC94A48691198C866917C4CADC07DA69808F8018F39"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/WebSocket/UnfoldedCircleMiddleware.cs",
                  "uriBaseId": "solutionDir",
                  "index": 69
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 5,
                  "endLine": 15,
                  "endColumn": 73,
                  "charOffset": 643,
                  "charLength": 68,
                  "snippet": {
                    "text": "private readonly ILogger<UnfoldedCircleMiddleware> _logger = logger;"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 1,
                  "charOffset": 571,
                  "charLength": 141,
                  "snippet": {
                    "text": "    private readonly ILoggerFactory _loggerFactory = loggerFactory;\n    private readonly ILogger<UnfoldedCircleMiddleware> _logger = logger;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1D39DDBE7D719D65CB3DA0FF515D172594C988E7EBA9A751E770AF537C6378CA"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/WebSocket/UnfoldedCircleWebSocketHandler.cs",
                  "uriBaseId": "solutionDir",
                  "index": 70
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 133,
                  "charOffset": 584,
                  "charLength": 128,
                  "snippet": {
                    "text": "private readonly UnfoldedCircleJsonSerializerContext _unfoldedCircleJsonSerializerContext = unfoldedCircleJsonSerializerContext;"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 89,
                  "charOffset": 578,
                  "charLength": 223,
                  "snippet": {
                    "text": "{\n    private readonly UnfoldedCircleJsonSerializerContext _unfoldedCircleJsonSerializerContext = unfoldedCircleJsonSerializerContext;\n    private readonly IConfigurationService _configurationService = configurationService;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97B1CCCFD338B16F3EB46DD02D86B0E05BDF4DDC297E533A02DE9382BF7D8430"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/WebSocket/UnfoldedCircleWebSocketHandler.cs",
                  "uriBaseId": "solutionDir",
                  "index": 70
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "endLine": 19,
                  "endColumn": 89,
                  "charOffset": 717,
                  "charLength": 84,
                  "snippet": {
                    "text": "private readonly IConfigurationService _configurationService = configurationService;"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 85,
                  "charOffset": 580,
                  "charLength": 306,
                  "snippet": {
                    "text": "    private readonly UnfoldedCircleJsonSerializerContext _unfoldedCircleJsonSerializerContext = unfoldedCircleJsonSerializerContext;\n    private readonly IConfigurationService _configurationService = configurationService;\n    private readonly FireTvClientFactory _fireTvClientFactory = fireTvClientFactory;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "64456C39BAA91F6CF5278FD24D34E76C9151F4064C616BA48E2D8DB63F47AB5A"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/WebSocket/UnfoldedCircleWebSocketHandler.cs",
                  "uriBaseId": "solutionDir",
                  "index": 70
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "endLine": 20,
                  "endColumn": 85,
                  "charOffset": 806,
                  "charLength": 80,
                  "snippet": {
                    "text": "private readonly FireTvClientFactory _fireTvClientFactory = fireTvClientFactory;"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 79,
                  "charOffset": 713,
                  "charLength": 252,
                  "snippet": {
                    "text": "    private readonly IConfigurationService _configurationService = configurationService;\n    private readonly FireTvClientFactory _fireTvClientFactory = fireTvClientFactory;\n    private readonly ILogger<UnfoldedCircleWebSocketHandler> _logger = logger;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ABCAB9F4BD72F63BDB7E8ECFD023FD73B2D3958ACA17840D2A68D3CE7133E6E"
          },
          "baselineState": "new",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        },
        {
          "ruleId": "ReplaceWithPrimaryConstructorParameter",
          "ruleIndex": 2569,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Replace with primary constructor parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UnfoldedCircle.Server/WebSocket/UnfoldedCircleWebSocketHandler.cs",
                  "uriBaseId": "solutionDir",
                  "index": 70
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "endLine": 21,
                  "endColumn": 79,
                  "charOffset": 891,
                  "charLength": 74,
                  "snippet": {
                    "text": "private readonly ILogger<UnfoldedCircleWebSocketHandler> _logger = logger;"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 1,
                  "charOffset": 802,
                  "charLength": 164,
                  "snippet": {
                    "text": "    private readonly FireTvClientFactory _fireTvClientFactory = fireTvClientFactory;\n    private readonly ILogger<UnfoldedCircleWebSocketHandler> _logger = logger;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4F4C3544F25BF47B2D3AC838385126BA7B264A6DF81425EC78B0242256CB0FF9"
          },
          "baselineState": "unchanged",
          "properties": {
            "qodanaSeverity": "Moderate",
            "tags": [
              "C#",
              ".NET 9.0"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "QDNETC/qodana/2025-08-01",
        "guid": "aed672d7-1802-4e32-9ff8-89bbd50627fc",
        "properties": {
          "jobUrl": "https://github.com/henrikwidlund/unfoldedcircle-firetv/actions/runs/16670959289"
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "columnKind": "utf16CodeUnits",
      "properties": {
        "deviceId": "200820300000000-da2f-b33f-626d-edf797a5392d"
      }
    }
  ]
}